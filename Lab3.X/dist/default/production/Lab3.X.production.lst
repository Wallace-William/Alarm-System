

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Mar 06 15:28:50 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 1.44
    28                           ; Generated 14/09/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F452 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataCOMRAM
    63  000C44                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _multlow
    67  000C44  C0                 	db	192
    68  000C45  20                 	db	32
    69  000C46  20                 	db	32
    70  000C47  20                 	db	32
    71  000C48  20                 	db	32
    72  000C49  20                 	db	32
    73  000C4A  20                 	db	32
    74  000C4B  20                 	db	32
    75  000C4C  20                 	db	32
    76  000C4D  00                 	db	0
    77                           
    78                           ;initializer for _notlow
    79  000C4E  C0                 	db	192
    80  000C4F  20                 	db	32
    81  000C50  20                 	db	32
    82  000C51  20                 	db	32
    83  000C52  20                 	db	32
    84  000C53  20                 	db	32
    85  000C54  20                 	db	32
    86  000C55  20                 	db	32
    87  000C56  20                 	db	32
    88  000C57  00                 	db	0
    89                           
    90                           ;initializer for _and_lcd
    91  000C58  80                 	db	128
    92  000C59  20                 	db	32
    93  000C5A  42                 	db	66
    94  000C5B  41                 	db	65
    95  000C5C  4E                 	db	78
    96  000C5D  44                 	db	68
    97  000C5E  43                 	db	67
    98  000C5F  20                 	db	32
    99  000C60  20                 	db	32
   100  000C61  00                 	db	0
   101                           
   102                           ;initializer for _sublow
   103  000C62  C0                 	db	192
   104  000C63  20                 	db	32
   105  000C64  20                 	db	32
   106  000C65  20                 	db	32
   107  000C66  20                 	db	32
   108  000C67  20                 	db	32
   109  000C68  20                 	db	32
   110  000C69  20                 	db	32
   111  000C6A  20                 	db	32
   112  000C6B  00                 	db	0
   113                           
   114                           ;initializer for _sub
   115  000C6C  80                 	db	128
   116  000C6D  20                 	db	32
   117  000C6E  20                 	db	32
   118  000C6F  42                 	db	66
   119  000C70  2D                 	db	45
   120  000C71  43                 	db	67
   121  000C72  20                 	db	32
   122  000C73  20                 	db	32
   123  000C74  20                 	db	32
   124  000C75  00                 	db	0
   125                           
   126                           ;initializer for _addlow
   127  000C76  C0                 	db	192
   128  000C77  20                 	db	32
   129  000C78  20                 	db	32
   130  000C79  20                 	db	32
   131  000C7A  20                 	db	32
   132  000C7B  20                 	db	32
   133  000C7C  20                 	db	32
   134  000C7D  20                 	db	32
   135  000C7E  20                 	db	32
   136  000C7F  00                 	db	0
   137                           
   138                           ;initializer for _add
   139  000C80  80                 	db	128
   140  000C81  20                 	db	32
   141  000C82  20                 	db	32
   142  000C83  42                 	db	66
   143  000C84  2B                 	db	43
   144  000C85  43                 	db	67
   145  000C86  20                 	db	32
   146  000C87  20                 	db	32
   147  000C88  20                 	db	32
   148  000C89  00                 	db	0
   149                           
   150                           	psect	idataBANK0
   151  000C8A                     __pidataBANK0:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _andlow
   155  000C8A  C0                 	db	192
   156  000C8B  20                 	db	32
   157  000C8C  20                 	db	32
   158  000C8D  20                 	db	32
   159  000C8E  20                 	db	32
   160  000C8F  20                 	db	32
   161  000C90  20                 	db	32
   162  000C91  20                 	db	32
   163  000C92  20                 	db	32
   164  000C93  00                 	db	0
   165                           
   166                           ;initializer for _Str_2
   167  000C94  C0                 	db	192
   168  000C95  20                 	db	32
   169  000C96  20                 	db	32
   170  000C97  20                 	db	32
   171  000C98  20                 	db	32
   172  000C99  20                 	db	32
   173  000C9A  20                 	db	32
   174  000C9B  20                 	db	32
   175  000C9C  20                 	db	32
   176  000C9D  00                 	db	0
   177                           
   178                           ;initializer for _Str_1
   179  000C9E  80                 	db	128
   180  000C9F  20                 	db	32
   181  000CA0  20                 	db	32
   182  000CA1  20                 	db	32
   183  000CA2  20                 	db	32
   184  000CA3  20                 	db	32
   185  000CA4  20                 	db	32
   186  000CA5  20                 	db	32
   187  000CA6  20                 	db	32
   188  000CA7  00                 	db	0
   189                           
   190                           ;initializer for _mult_lcd
   191  000CA8  80                 	db	128
   192  000CA9  20                 	db	32
   193  000CAA  20                 	db	32
   194  000CAB  42                 	db	66
   195  000CAC  2A                 	db	42
   196  000CAD  43                 	db	67
   197  000CAE  20                 	db	32
   198  000CAF  20                 	db	32
   199  000CB0  20                 	db	32
   200  000CB1  00                 	db	0
   201                           
   202                           ;initializer for _not_lcd
   203  000CB2  80                 	db	128
   204  000CB3  20                 	db	32
   205  000CB4  4E                 	db	78
   206  000CB5  4F                 	db	79
   207  000CB6  54                 	db	84
   208  000CB7  28                 	db	40
   209  000CB8  42                 	db	66
   210  000CB9  29                 	db	41
   211  000CBA  20                 	db	32
   212  000CBB  00                 	db	0
   213                           
   214                           	psect	smallconst
   215  000600                     __psmallconst:
   216                           	opt stack 0
   217  000600  00                 	db	0
   218  000601                     _Clear2:
   219                           	opt stack 0
   220  000601  C0                 	db	192
   221  000602  20                 	db	32
   222  000603  20                 	db	32
   223  000604  20                 	db	32
   224  000605  20                 	db	32
   225  000606  20                 	db	32
   226  000607  20                 	db	32
   227  000608  20                 	db	32
   228  000609  20                 	db	32
   229  00060A  00                 	db	0
   230  00060B                     __end_of_Clear2:
   231                           	opt stack 0
   232  00060B                     _Clear1:
   233                           	opt stack 0
   234  00060B  80                 	db	128
   235  00060C  20                 	db	32
   236  00060D  20                 	db	32
   237  00060E  20                 	db	32
   238  00060F  20                 	db	32
   239  000610  20                 	db	32
   240  000611  20                 	db	32
   241  000612  20                 	db	32
   242  000613  20                 	db	32
   243  000614  00                 	db	0
   244  000615                     __end_of_Clear1:
   245                           	opt stack 0
   246  000615                     _LCDstr:
   247                           	opt stack 0
   248  000615  33                 	db	51
   249  000616  32                 	db	50
   250  000617  28                 	db	40
   251  000618  01                 	db	1
   252  000619  0C                 	db	12
   253  00061A  06                 	db	6
   254  00061B  00                 	db	0
   255  00061C  00                 	db	0
   256  00061D                     __end_of_LCDstr:
   257                           	opt stack 0
   258  0000                     _PORTD	set	3971
   259  0000                     _PORTEbits	set	3972
   260  0000                     _PORTAbits	set	3968
   261  0000                     _PORTA	set	3968
   262  0000                     _TRISE	set	3990
   263  0000                     _TRISA	set	3986
   264  0000                     _ADCON1	set	4033
   265  0000                     _PORTCbits	set	3970
   266  0000                     _PORTBbits	set	3969
   267  0000                     _TRISD	set	3989
   268  0000                     _TRISB	set	3987
   269  0000                     _TRISC	set	3988
   270                           
   271                           ; #config settings
   272  00061D  00                 	db	0	; dummy byte at the end
   273  0000                     
   274                           	psect	cinit
   275  000B4A                     __pcinit:
   276                           	opt stack 0
   277  000B4A                     start_initialization:
   278                           	opt stack 0
   279  000B4A                     __initialization:
   280                           	opt stack 0
   281                           
   282                           ; Initialize objects allocated to BANK0 (50 bytes)
   283                           ; load TBLPTR registers with __pidataBANK0
   284  000B4A  0E8A               	movlw	low __pidataBANK0
   285  000B4C  6EF6               	movwf	tblptrl,c
   286  000B4E  0E0C               	movlw	high __pidataBANK0
   287  000B50  6EF7               	movwf	tblptrh,c
   288  000B52  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   289  000B54  6EF8               	movwf	tblptru,c
   290  000B56  EE00  F080         	lfsr	0,__pdataBANK0
   291  000B5A  EE10 F032          	lfsr	1,50
   292  000B5E                     copy_data0:
   293  000B5E  0009               	tblrd		*+
   294  000B60  CFF5 FFEE          	movff	tablat,postinc0
   295  000B64  50E5               	movf	postdec1,w,c
   296  000B66  50E1               	movf	fsr1l,w,c
   297  000B68  E1FA               	bnz	copy_data0
   298                           
   299                           ; Initialize objects allocated to COMRAM (70 bytes)
   300                           ; load TBLPTR registers with __pidataCOMRAM
   301  000B6A  0E44               	movlw	low __pidataCOMRAM
   302  000B6C  6EF6               	movwf	tblptrl,c
   303  000B6E  0E0C               	movlw	high __pidataCOMRAM
   304  000B70  6EF7               	movwf	tblptrh,c
   305  000B72  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   306  000B74  6EF8               	movwf	tblptru,c
   307  000B76  EE00  F001         	lfsr	0,__pdataCOMRAM
   308  000B7A  EE10 F046          	lfsr	1,70
   309  000B7E                     copy_data1:
   310  000B7E  0009               	tblrd		*+
   311  000B80  CFF5 FFEE          	movff	tablat,postinc0
   312  000B84  50E5               	movf	postdec1,w,c
   313  000B86  50E1               	movf	fsr1l,w,c
   314  000B88  E1FA               	bnz	copy_data1
   315                           
   316                           ; Clear objects allocated to COMRAM (36 bytes)
   317  000B8A  EE00  F047         	lfsr	0,__pbssCOMRAM
   318  000B8E  0E24               	movlw	36
   319  000B90                     clear_0:
   320  000B90  6AEE               	clrf	postinc0,c
   321  000B92  06E8               	decf	wreg,f,c
   322  000B94  E1FD               	bnz	clear_0
   323  000B96                     end_of_initialization:
   324                           	opt stack 0
   325  000B96                     __end_of__initialization:
   326                           	opt stack 0
   327  000B96  0E00               	movlw	low (__Lmediumconst shr (0+16))
   328  000B98  6EF8               	movwf	tblptru,c
   329  000B9A  0100               	movlb	0
   330  000B9C  EF0F  F003         	goto	_main	;jump to C main() function
   331                           tblptru	equ	0xFF8
   332                           tblptrh	equ	0xFF7
   333                           tblptrl	equ	0xFF6
   334                           tablat	equ	0xFF5
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           postdec1	equ	0xFE5
   338                           fsr1l	equ	0xFE1
   339                           
   340                           	psect	bssCOMRAM
   341  000047                     __pbssCOMRAM:
   342                           	opt stack 0
   343  000047                     _rem:
   344                           	opt stack 0
   345  000047                     	ds	2
   346  000049                     _Cdecimal:
   347                           	opt stack 0
   348  000049                     	ds	2
   349  00004B                     _Bdecimal:
   350                           	opt stack 0
   351  00004B                     	ds	2
   352  00004D                     _hund:
   353                           	opt stack 0
   354  00004D                     	ds	2
   355  00004F                     _mult:
   356                           	opt stack 0
   357  00004F                     	ds	2
   358  000051                     _not:
   359                           	opt stack 0
   360  000051                     	ds	2
   361  000053                     _and:
   362                           	opt stack 0
   363  000053                     	ds	2
   364  000055                     _rem_n:
   365                           	opt stack 0
   366  000055                     	ds	2
   367  000057                     _tens_n:
   368                           	opt stack 0
   369  000057                     	ds	2
   370  000059                     _neg:
   371                           	opt stack 0
   372  000059                     	ds	2
   373  00005B                     _tens:
   374                           	opt stack 0
   375  00005B                     	ds	2
   376  00005D                     _sum:
   377                           	opt stack 0
   378  00005D                     	ds	2
   379  00005F                     _C0:
   380                           	opt stack 0
   381  00005F                     	ds	1
   382  000060                     _C1:
   383                           	opt stack 0
   384  000060                     	ds	1
   385  000061                     _C2:
   386                           	opt stack 0
   387  000061                     	ds	1
   388  000062                     _C3:
   389                           	opt stack 0
   390  000062                     	ds	1
   391  000063                     _B0:
   392                           	opt stack 0
   393  000063                     	ds	1
   394  000064                     _B1:
   395                           	opt stack 0
   396  000064                     	ds	1
   397  000065                     _B2:
   398                           	opt stack 0
   399  000065                     	ds	1
   400  000066                     _B3:
   401                           	opt stack 0
   402  000066                     	ds	1
   403  000067                     _SWB:
   404                           	opt stack 0
   405  000067                     	ds	1
   406  000068                     _SWA:
   407                           	opt stack 0
   408  000068                     	ds	1
   409  000069                     _minus:
   410                           	opt stack 0
   411  000069                     	ds	2
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	dataCOMRAM
   422  000001                     __pdataCOMRAM:
   423                           	opt stack 0
   424  000001                     _multlow:
   425                           	opt stack 0
   426  000001                     	ds	10
   427  00000B                     _notlow:
   428                           	opt stack 0
   429  00000B                     	ds	10
   430  000015                     _and_lcd:
   431                           	opt stack 0
   432  000015                     	ds	10
   433  00001F                     _sublow:
   434                           	opt stack 0
   435  00001F                     	ds	10
   436  000029                     _sub:
   437                           	opt stack 0
   438  000029                     	ds	10
   439  000033                     _addlow:
   440                           	opt stack 0
   441  000033                     	ds	10
   442  00003D                     _add:
   443                           	opt stack 0
   444  00003D                     	ds	10
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           postdec1	equ	0xFE5
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataBANK0
   455  000080                     __pdataBANK0:
   456                           	opt stack 0
   457  000080                     _andlow:
   458                           	opt stack 0
   459  000080                     	ds	10
   460  00008A                     _Str_2:
   461                           	opt stack 0
   462  00008A                     	ds	10
   463  000094                     _Str_1:
   464                           	opt stack 0
   465  000094                     	ds	10
   466  00009E                     _mult_lcd:
   467                           	opt stack 0
   468  00009E                     	ds	10
   469  0000A8                     _not_lcd:
   470                           	opt stack 0
   471  0000A8                     	ds	10
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	cstackCOMRAM
   482  00006B                     __pcstackCOMRAM:
   483                           	opt stack 0
   484  00006B                     ??_Initialize_LCD:
   485  00006B                     ?___wmul:
   486                           	opt stack 0
   487  00006B                     ?___awdiv:
   488                           	opt stack 0
   489  00006B                     ?___awmod:
   490                           	opt stack 0
   491  00006B                     Print_To_LCD@tempPtr:
   492                           	opt stack 0
   493  00006B                     ___wmul@multiplier:
   494                           	opt stack 0
   495  00006B                     ___awdiv@dividend:
   496                           	opt stack 0
   497  00006B                     ___awmod@dividend:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x0
   501  00006B                     	ds	2
   502  00006D                     ??_Print_To_LCD:
   503  00006D                     Initialize_LCD@tempPtr:
   504                           	opt stack 0
   505  00006D                     ___wmul@multiplicand:
   506                           	opt stack 0
   507  00006D                     ___awdiv@divisor:
   508                           	opt stack 0
   509  00006D                     ___awmod@divisor:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x2
   513  00006D                     	ds	1
   514  00006E                     Print_To_LCD@currentChar:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x3
   518  00006E                     	ds	1
   519  00006F                     Initialize_LCD@currentChar:
   520                           	opt stack 0
   521  00006F                     ___awdiv@counter:
   522                           	opt stack 0
   523  00006F                     ___awmod@counter:
   524                           	opt stack 0
   525  00006F                     ___wmul@product:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x4
   529  00006F                     	ds	1
   530  000070                     ___awdiv@sign:
   531                           	opt stack 0
   532  000070                     ___awmod@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x5
   536  000070                     	ds	1
   537  000071                     ___awdiv@quotient:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x6
   541  000071                     	ds	2
   542  000073                     ??_SUB:
   543                           
   544                           ; 1 bytes @ 0x8
   545  000073                     	ds	2
   546  000075                     ??_main:
   547                           
   548                           ; 1 bytes @ 0xA
   549  000075                     	ds	2
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1l	equ	0xFE1
   558                           
   559 ;;
   560 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   561 ;;
   562 ;; *************** function _main *****************
   563 ;; Defined at:
   564 ;;		line 73 in file "Lab3.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   578 ;;      Params:         0       0       0       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0       0       0
   580 ;;      Temps:          2       0       0       0       0       0       0
   581 ;;      Totals:         2       0       0       0       0       0       0
   582 ;;Total ram usage:        2 bytes
   583 ;; Hardware stack levels required when called:    2
   584 ;; This function calls:
   585 ;;		_AND
   586 ;;		_Initialize_PIC
   587 ;;		_MULT
   588 ;;		_NOT
   589 ;;		_Print_To_LCD
   590 ;;		_SUB
   591 ;; This function is called by:
   592 ;;		Startup code after reset
   593 ;; This function uses a non-reentrant model
   594 ;;
   595                           
   596                           	psect	text0
   597  00061E                     __ptext0:
   598                           	opt stack 0
   599  00061E                     _main:
   600                           	opt stack 0
   601  00061E  FFFF               	dw	65535	; assembler added errata NOP
   602                           
   603                           ;Lab3.c: 75: Initialize_PIC();
   604                           
   605                           ;incstack = 0
   606  000620  EC5E  F006         	call	_Initialize_PIC	;wreg free
   607                           
   608                           ;Lab3.c: 76: Print_To_LCD(Clear1);
   609  000624  0E0B               	movlw	low _Clear1
   610  000626  6E6B               	movwf	Print_To_LCD@tempPtr,c
   611  000628  0E06               	movlw	high _Clear1
   612  00062A  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
   613  00062C  EC1F  F005         	call	_Print_To_LCD	;wreg free
   614                           
   615                           ;Lab3.c: 77: Print_To_LCD(Clear2);
   616  000630  0E01               	movlw	low _Clear2
   617  000632  6E6B               	movwf	Print_To_LCD@tempPtr,c
   618  000634  0E06               	movlw	high _Clear2
   619  000636  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
   620  000638  EC1F  F005         	call	_Print_To_LCD	;wreg free
   621                           
   622                           ;Lab3.c: 80: TRISC = 0b11111111;
   623  00063C  6894               	setf	3988,c	;volatile
   624                           
   625                           ;Lab3.c: 81: TRISB = 0b11111111;
   626  00063E  6893               	setf	3987,c	;volatile
   627                           
   628                           ;Lab3.c: 82: TRISD = 0b00000000;
   629  000640  0E00               	movlw	0
   630  000642  6E95               	movwf	3989,c	;volatile
   631  000644  FFFF               	dw	65535	; assembler added errata NOP
   632                           
   633                           ;Lab3.c: 86: {
   634                           ;Lab3.c: 87: SWA = PORTBbits.RB4;
   635  000646  0E00               	movlw	0
   636  000648  B881               	btfsc	3969,4,c	;volatile
   637  00064A  0E01               	movlw	1
   638  00064C  6E68               	movwf	_SWA,c
   639                           
   640                           ;Lab3.c: 88: SWB = PORTBbits.RB5;
   641  00064E  0E00               	movlw	0
   642  000650  BA81               	btfsc	3969,5,c	;volatile
   643  000652  0E01               	movlw	1
   644  000654  6E67               	movwf	_SWB,c
   645                           
   646                           ;Lab3.c: 90: B3 = PORTBbits.RB3;
   647  000656  0E00               	movlw	0
   648  000658  B681               	btfsc	3969,3,c	;volatile
   649  00065A  0E01               	movlw	1
   650  00065C  6E66               	movwf	_B3,c
   651                           
   652                           ;Lab3.c: 91: B2 = PORTBbits.RB2;
   653  00065E  0E00               	movlw	0
   654  000660  B481               	btfsc	3969,2,c	;volatile
   655  000662  0E01               	movlw	1
   656  000664  6E65               	movwf	_B2,c
   657                           
   658                           ;Lab3.c: 92: B1 = PORTBbits.RB1;
   659  000666  0E00               	movlw	0
   660  000668  B281               	btfsc	3969,1,c	;volatile
   661  00066A  0E01               	movlw	1
   662  00066C  6E64               	movwf	_B1,c
   663                           
   664                           ;Lab3.c: 93: B0 = PORTBbits.RB0;
   665  00066E  0E00               	movlw	0
   666  000670  B081               	btfsc	3969,0,c	;volatile
   667  000672  0E01               	movlw	1
   668  000674  6E63               	movwf	_B0,c
   669                           
   670                           ;Lab3.c: 95: C3 = PORTCbits.RC3;
   671  000676  0E00               	movlw	0
   672  000678  B682               	btfsc	3970,3,c	;volatile
   673  00067A  0E01               	movlw	1
   674  00067C  6E62               	movwf	_C3,c
   675                           
   676                           ;Lab3.c: 96: C2 = PORTCbits.RC2;
   677  00067E  0E00               	movlw	0
   678  000680  B482               	btfsc	3970,2,c	;volatile
   679  000682  0E01               	movlw	1
   680  000684  6E61               	movwf	_C2,c
   681                           
   682                           ;Lab3.c: 97: C1 = PORTCbits.RC1;
   683  000686  0E00               	movlw	0
   684  000688  B282               	btfsc	3970,1,c	;volatile
   685  00068A  0E01               	movlw	1
   686  00068C  6E60               	movwf	_C1,c
   687                           
   688                           ;Lab3.c: 98: C0 = PORTCbits.RC0;
   689  00068E  0E00               	movlw	0
   690  000690  B082               	btfsc	3970,0,c	;volatile
   691  000692  0E01               	movlw	1
   692  000694  6E5F               	movwf	_C0,c
   693                           
   694                           ;Lab3.c: 100: Bdecimal = (B3*8) + (B2*4) + (B1*2) + (B0*1);
   695  000696  5066               	movf	_B3,w,c
   696  000698  0D08               	mullw	8
   697  00069A  CFF3 F075          	movff	prodl,??_main
   698  00069E  CFF4 F076          	movff	prodh,??_main+1
   699  0006A2  5065               	movf	_B2,w,c
   700  0006A4  0D04               	mullw	4
   701  0006A6  50F3               	movf	prodl,w,c
   702  0006A8  2675               	addwf	??_main,f,c
   703  0006AA  50F4               	movf	prodh,w,c
   704  0006AC  2276               	addwfc	??_main+1,f,c
   705  0006AE  5064               	movf	_B1,w,c
   706  0006B0  0D02               	mullw	2
   707  0006B2  50F3               	movf	prodl,w,c
   708  0006B4  2675               	addwf	??_main,f,c
   709  0006B6  50F4               	movf	prodh,w,c
   710  0006B8  2276               	addwfc	??_main+1,f,c
   711  0006BA  5063               	movf	_B0,w,c
   712  0006BC  0D01               	mullw	1
   713  0006BE  50F3               	movf	prodl,w,c
   714  0006C0  2475               	addwf	??_main,w,c
   715  0006C2  6E4B               	movwf	_Bdecimal,c
   716  0006C4  50F4               	movf	prodh,w,c
   717  0006C6  2076               	addwfc	??_main+1,w,c
   718  0006C8  6E4C               	movwf	_Bdecimal+1,c
   719                           
   720                           ;Lab3.c: 101: Cdecimal = (C3*8) + (C2*4) + (C1*2) + (C0*1);
   721  0006CA  5062               	movf	_C3,w,c
   722  0006CC  0D08               	mullw	8
   723  0006CE  CFF3 F075          	movff	prodl,??_main
   724  0006D2  CFF4 F076          	movff	prodh,??_main+1
   725  0006D6  5061               	movf	_C2,w,c
   726  0006D8  0D04               	mullw	4
   727  0006DA  50F3               	movf	prodl,w,c
   728  0006DC  2675               	addwf	??_main,f,c
   729  0006DE  50F4               	movf	prodh,w,c
   730  0006E0  2276               	addwfc	??_main+1,f,c
   731  0006E2  5060               	movf	_C1,w,c
   732  0006E4  0D02               	mullw	2
   733  0006E6  50F3               	movf	prodl,w,c
   734  0006E8  2675               	addwf	??_main,f,c
   735  0006EA  50F4               	movf	prodh,w,c
   736  0006EC  2276               	addwfc	??_main+1,f,c
   737  0006EE  505F               	movf	_C0,w,c
   738  0006F0  0D01               	mullw	1
   739  0006F2  50F3               	movf	prodl,w,c
   740  0006F4  2475               	addwf	??_main,w,c
   741  0006F6  6E49               	movwf	_Cdecimal,c
   742  0006F8  50F4               	movf	prodh,w,c
   743  0006FA  2076               	addwfc	??_main+1,w,c
   744  0006FC  6E4A               	movwf	_Cdecimal+1,c
   745                           
   746                           ;Lab3.c: 104: if(SWA == 0 && SWB == 0)
   747  0006FE  5068               	movf	_SWA,w,c
   748  000700  A4D8               	btfss	status,2,c
   749  000702  D006               	goto	l122
   750  000704  5067               	movf	_SWB,w,c
   751  000706  A4D8               	btfss	status,2,c
   752  000708  D003               	goto	l122
   753                           
   754                           ;Lab3.c: 105: {
   755                           ;Lab3.c: 107: MULT();
   756  00070A  EC22  F004         	call	_MULT	;wreg free
   757                           
   758                           ;Lab3.c: 110: }
   759  00070E  D79A               	goto	l121
   760  000710                     l122:
   761  000710  FFFF               	dw	65535	; assembler added errata NOP
   762                           
   763                           ;Lab3.c: 111: else if(SWA == 0 && SWB == 1)
   764  000712  5068               	movf	_SWA,w,c
   765  000714  A4D8               	btfss	status,2,c
   766  000716  D006               	goto	l124
   767  000718  0467               	decf	_SWB,w,c
   768  00071A  A4D8               	btfss	status,2,c
   769  00071C  D003               	goto	l124
   770                           
   771                           ;Lab3.c: 112: {
   772                           ;Lab3.c: 113: SUB();
   773  00071E  ECA0  F003         	call	_SUB	;wreg free
   774                           
   775                           ;Lab3.c: 115: }
   776  000722  D790               	goto	l121
   777  000724                     l124:
   778  000724  FFFF               	dw	65535	; assembler added errata NOP
   779                           
   780                           ;Lab3.c: 116: else if(SWA == 1 && SWB == 0)
   781  000726  0468               	decf	_SWA,w,c
   782  000728  A4D8               	btfss	status,2,c
   783  00072A  D006               	goto	l126
   784  00072C  5067               	movf	_SWB,w,c
   785  00072E  A4D8               	btfss	status,2,c
   786  000730  D003               	goto	l126
   787                           
   788                           ;Lab3.c: 117: {
   789                           ;Lab3.c: 118: AND();
   790  000732  ECD0  F005         	call	_AND	;wreg free
   791                           
   792                           ;Lab3.c: 120: }
   793  000736  D786               	goto	l121
   794  000738                     l126:
   795  000738  FFFF               	dw	65535	; assembler added errata NOP
   796                           
   797                           ;Lab3.c: 121: else
   798                           ;Lab3.c: 122: {
   799                           ;Lab3.c: 123: NOT();
   800  00073A  ECFB  F005         	call	_NOT	;wreg free
   801  00073E  D782               	goto	l121
   802  000740                     __end_of_main:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           prodh	equ	0xFF4
   809                           prodl	equ	0xFF3
   810                           postinc0	equ	0xFEE
   811                           wreg	equ	0xFE8
   812                           postdec1	equ	0xFE5
   813                           fsr1l	equ	0xFE1
   814                           status	equ	0xFD8
   815                           
   816 ;; *************** function _SUB *****************
   817 ;; Defined at:
   818 ;;		line 158 in file "Lab3.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;		None
   823 ;; Return value:  Size  Location     Type
   824 ;;                  1    wreg      void 
   825 ;; Registers used:
   826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   832 ;;      Params:         0       0       0       0       0       0       0
   833 ;;      Locals:         0       0       0       0       0       0       0
   834 ;;      Temps:          2       0       0       0       0       0       0
   835 ;;      Totals:         2       0       0       0       0       0       0
   836 ;;Total ram usage:        2 bytes
   837 ;; Hardware stack levels used:    1
   838 ;; Hardware stack levels required when called:    1
   839 ;; This function calls:
   840 ;;		_Print_To_LCD
   841 ;;		___awdiv
   842 ;;		___awmod
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text1
   849  000740                     __ptext1:
   850                           	opt stack 0
   851  000740                     _SUB:
   852                           	opt stack 0
   853  000740  FFFF               	dw	65535	; assembler added errata NOP
   854                           
   855                           ;Lab3.c: 160: minus = Bdecimal - Cdecimal;
   856                           
   857                           ;incstack = 0
   858  000742  C049  F073         	movff	_Cdecimal,??_SUB
   859  000746  C04A  F074         	movff	_Cdecimal+1,??_SUB+1
   860  00074A  1E73               	comf	??_SUB,f,c
   861  00074C  1E74               	comf	??_SUB+1,f,c
   862  00074E  4A73               	infsnz	??_SUB,f,c
   863  000750  2A74               	incf	??_SUB+1,f,c
   864  000752  504B               	movf	_Bdecimal,w,c
   865  000754  2473               	addwf	??_SUB,w,c
   866  000756  6E69               	movwf	_minus,c
   867  000758  504C               	movf	_Bdecimal+1,w,c
   868  00075A  2074               	addwfc	??_SUB+1,w,c
   869  00075C  6E6A               	movwf	_minus+1,c
   870                           
   871                           ;Lab3.c: 161: neg = minus*-1;
   872  00075E  C069  F073         	movff	_minus,??_SUB
   873  000762  C06A  F074         	movff	_minus+1,??_SUB+1
   874  000766  1E73               	comf	??_SUB,f,c
   875  000768  1E74               	comf	??_SUB+1,f,c
   876  00076A  4A73               	infsnz	??_SUB,f,c
   877  00076C  2A74               	incf	??_SUB+1,f,c
   878  00076E  C073  F059         	movff	??_SUB,_neg
   879  000772  C074  F05A         	movff	??_SUB+1,_neg+1
   880                           
   881                           ;Lab3.c: 163: tens = minus / 10;
   882  000776  C069  F06B         	movff	_minus,___awdiv@dividend
   883  00077A  C06A  F06C         	movff	_minus+1,___awdiv@dividend+1
   884  00077E  0E00               	movlw	0
   885  000780  6E6E               	movwf	___awdiv@divisor+1,c
   886  000782  0E0A               	movlw	10
   887  000784  6E6D               	movwf	___awdiv@divisor,c
   888  000786  EC8B  F004         	call	___awdiv	;wreg free
   889  00078A  C06B  F05B         	movff	?___awdiv,_tens
   890  00078E  C06C  F05C         	movff	?___awdiv+1,_tens+1
   891                           
   892                           ;Lab3.c: 164: rem = minus % 10;
   893  000792  C069  F06B         	movff	_minus,___awmod@dividend
   894  000796  C06A  F06C         	movff	_minus+1,___awmod@dividend+1
   895  00079A  0E00               	movlw	0
   896  00079C  6E6E               	movwf	___awmod@divisor+1,c
   897  00079E  0E0A               	movlw	10
   898  0007A0  6E6D               	movwf	___awmod@divisor,c
   899  0007A2  EC63  F005         	call	___awmod	;wreg free
   900  0007A6  C06B  F047         	movff	?___awmod,_rem
   901  0007AA  C06C  F048         	movff	?___awmod+1,_rem+1
   902                           
   903                           ;Lab3.c: 166: tens_n = neg / 10;
   904  0007AE  C059  F06B         	movff	_neg,___awdiv@dividend
   905  0007B2  C05A  F06C         	movff	_neg+1,___awdiv@dividend+1
   906  0007B6  0E00               	movlw	0
   907  0007B8  6E6E               	movwf	___awdiv@divisor+1,c
   908  0007BA  0E0A               	movlw	10
   909  0007BC  6E6D               	movwf	___awdiv@divisor,c
   910  0007BE  EC8B  F004         	call	___awdiv	;wreg free
   911  0007C2  C06B  F057         	movff	?___awdiv,_tens_n
   912  0007C6  C06C  F058         	movff	?___awdiv+1,_tens_n+1
   913                           
   914                           ;Lab3.c: 167: rem_n = neg % 10;
   915  0007CA  C059  F06B         	movff	_neg,___awmod@dividend
   916  0007CE  C05A  F06C         	movff	_neg+1,___awmod@dividend+1
   917  0007D2  0E00               	movlw	0
   918  0007D4  6E6E               	movwf	___awmod@divisor+1,c
   919  0007D6  0E0A               	movlw	10
   920  0007D8  6E6D               	movwf	___awmod@divisor,c
   921  0007DA  EC63  F005         	call	___awmod	;wreg free
   922  0007DE  C06B  F055         	movff	?___awmod,_rem_n
   923  0007E2  C06C  F056         	movff	?___awmod+1,_rem_n+1
   924                           
   925                           ;Lab3.c: 169: tens_n += 48;
   926  0007E6  0E30               	movlw	48
   927  0007E8  2657               	addwf	_tens_n,f,c
   928  0007EA  0E00               	movlw	0
   929  0007EC  2258               	addwfc	_tens_n+1,f,c
   930                           
   931                           ;Lab3.c: 170: rem_n += 48;
   932  0007EE  0E30               	movlw	48
   933  0007F0  2655               	addwf	_rem_n,f,c
   934  0007F2  0E00               	movlw	0
   935  0007F4  2256               	addwfc	_rem_n+1,f,c
   936                           
   937                           ;Lab3.c: 172: tens += 48;
   938  0007F6  0E30               	movlw	48
   939  0007F8  265B               	addwf	_tens,f,c
   940  0007FA  0E00               	movlw	0
   941  0007FC  225C               	addwfc	_tens+1,f,c
   942                           
   943                           ;Lab3.c: 173: rem += 48;
   944  0007FE  0E30               	movlw	48
   945  000800  2647               	addwf	_rem,f,c
   946  000802  0E00               	movlw	0
   947  000804  2248               	addwfc	_rem+1,f,c
   948                           
   949                           ;Lab3.c: 175: if(minus < 0)
   950  000806  AE6A               	btfss	_minus+1,7,c
   951  000808  D007               	goto	l136
   952                           
   953                           ;Lab3.c: 176: {
   954                           ;Lab3.c: 178: sublow[3] = 0x2D;
   955  00080A  0E2D               	movlw	45
   956  00080C  6E22               	movwf	_sublow+3,c
   957                           
   958                           ;Lab3.c: 179: sublow[4] = tens_n;
   959  00080E  C057  F023         	movff	_tens_n,_sublow+4
   960                           
   961                           ;Lab3.c: 180: sublow[5] = rem_n;
   962  000812  C055  F024         	movff	_rem_n,_sublow+5
   963                           
   964                           ;Lab3.c: 181: }
   965  000816  D007               	goto	l137
   966  000818                     l136:
   967  000818  FFFF               	dw	65535	; assembler added errata NOP
   968                           
   969                           ;Lab3.c: 182: else
   970                           ;Lab3.c: 183: {
   971                           ;Lab3.c: 184: sublow[3] = 0x2B;
   972  00081A  0E2B               	movlw	43
   973  00081C  6E22               	movwf	_sublow+3,c
   974                           
   975                           ;Lab3.c: 185: sublow[4] = tens;
   976  00081E  C05B  F023         	movff	_tens,_sublow+4
   977                           
   978                           ;Lab3.c: 186: sublow[5] = rem;
   979  000822  C047  F024         	movff	_rem,_sublow+5
   980  000826                     l137:
   981  000826  FFFF               	dw	65535	; assembler added errata NOP
   982                           
   983                           ;Lab3.c: 187: }
   984                           ;Lab3.c: 189: Print_To_LCD(sub);
   985  000828  0E29               	movlw	low _sub
   986  00082A  6E6B               	movwf	Print_To_LCD@tempPtr,c
   987  00082C  0E00               	movlw	high _sub
   988  00082E  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
   989  000830  EC1F  F005         	call	_Print_To_LCD	;wreg free
   990                           
   991                           ;Lab3.c: 190: Print_To_LCD(sublow);
   992  000834  0E1F               	movlw	low _sublow
   993  000836  6E6B               	movwf	Print_To_LCD@tempPtr,c
   994  000838  0E00               	movlw	high _sublow
   995  00083A  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
   996  00083C  EC1F  F005         	call	_Print_To_LCD	;wreg free
   997  000840  0012               	return		;funcret
   998  000842  FFFF               	dw	65535	; errata NOP
   999  000844                     __end_of_SUB:
  1000                           	opt stack 0
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           prodh	equ	0xFF4
  1006                           prodl	equ	0xFF3
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1l	equ	0xFE1
  1011                           status	equ	0xFD8
  1012                           
  1013 ;; *************** function _NOT *****************
  1014 ;; Defined at:
  1015 ;;		line 213 in file "Lab3.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1029 ;;      Params:         0       0       0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0
  1032 ;;      Totals:         0       0       0       0       0       0       0
  1033 ;;Total ram usage:        0 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    1
  1036 ;; This function calls:
  1037 ;;		_Print_To_LCD
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text2
  1044  000BF6                     __ptext2:
  1045                           	opt stack 0
  1046  000BF6                     _NOT:
  1047                           	opt stack 0
  1048  000BF6  FFFF               	dw	65535	; assembler added errata NOP
  1049                           
  1050                           ;Lab3.c: 215: B3 ^= 1;
  1051                           
  1052                           ;incstack = 0
  1053  000BF8  0E01               	movlw	1
  1054  000BFA  1A66               	xorwf	_B3,f,c
  1055                           
  1056                           ;Lab3.c: 216: B2 ^= 1;
  1057  000BFC  0E01               	movlw	1
  1058  000BFE  1A65               	xorwf	_B2,f,c
  1059                           
  1060                           ;Lab3.c: 217: B1 ^= 1;
  1061  000C00  0E01               	movlw	1
  1062  000C02  1A64               	xorwf	_B1,f,c
  1063                           
  1064                           ;Lab3.c: 218: B0 ^= 1;
  1065  000C04  0E01               	movlw	1
  1066  000C06  1A63               	xorwf	_B0,f,c
  1067                           
  1068                           ;Lab3.c: 220: B3 += 48;
  1069  000C08  0E30               	movlw	48
  1070  000C0A  2666               	addwf	_B3,f,c
  1071                           
  1072                           ;Lab3.c: 221: B2 += 48;
  1073  000C0C  0E30               	movlw	48
  1074  000C0E  2665               	addwf	_B2,f,c
  1075                           
  1076                           ;Lab3.c: 222: B1 += 48;
  1077  000C10  0E30               	movlw	48
  1078  000C12  2664               	addwf	_B1,f,c
  1079                           
  1080                           ;Lab3.c: 223: B0 += 48;
  1081  000C14  0E30               	movlw	48
  1082  000C16  2663               	addwf	_B0,f,c
  1083                           
  1084                           ;Lab3.c: 225: notlow[2] = B3;
  1085  000C18  C066  F00D         	movff	_B3,_notlow+2
  1086                           
  1087                           ;Lab3.c: 226: notlow[3] = B2;
  1088  000C1C  C065  F00E         	movff	_B2,_notlow+3
  1089                           
  1090                           ;Lab3.c: 227: notlow[4] = B1;
  1091  000C20  C064  F00F         	movff	_B1,_notlow+4
  1092                           
  1093                           ;Lab3.c: 228: notlow[5] = B0;
  1094  000C24  C063  F010         	movff	_B0,_notlow+5
  1095                           
  1096                           ;Lab3.c: 230: Print_To_LCD(not_lcd);
  1097  000C28  0EA8               	movlw	low _not_lcd
  1098  000C2A  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1099  000C2C  0E00               	movlw	high _not_lcd
  1100  000C2E  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1101  000C30  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1102                           
  1103                           ;Lab3.c: 231: Print_To_LCD(notlow);
  1104  000C34  0E0B               	movlw	low _notlow
  1105  000C36  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1106  000C38  0E00               	movlw	high _notlow
  1107  000C3A  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1108  000C3C  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1109  000C40  0012               	return		;funcret
  1110  000C42  FFFF               	dw	65535	; errata NOP
  1111  000C44                     __end_of_NOT:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           prodh	equ	0xFF4
  1118                           prodl	equ	0xFF3
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function _MULT *****************
  1126 ;; Defined at:
  1127 ;;		line 233 in file "Lab3.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;		None
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1141 ;;      Params:         0       0       0       0       0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0
  1143 ;;      Temps:          0       0       0       0       0       0       0
  1144 ;;      Totals:         0       0       0       0       0       0       0
  1145 ;;Total ram usage:        0 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    1
  1148 ;; This function calls:
  1149 ;;		_Print_To_LCD
  1150 ;;		___awdiv
  1151 ;;		___awmod
  1152 ;;		___wmul
  1153 ;; This function is called by:
  1154 ;;		_main
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text3
  1159  000844                     __ptext3:
  1160                           	opt stack 0
  1161  000844                     _MULT:
  1162                           	opt stack 0
  1163  000844  FFFF               	dw	65535	; assembler added errata NOP
  1164                           
  1165                           ;Lab3.c: 235: mult = Bdecimal * Cdecimal;
  1166                           
  1167                           ;incstack = 0
  1168  000846  C04B  F06B         	movff	_Bdecimal,___wmul@multiplier
  1169  00084A  C04C  F06C         	movff	_Bdecimal+1,___wmul@multiplier+1
  1170  00084E  C049  F06D         	movff	_Cdecimal,___wmul@multiplicand
  1171  000852  C04A  F06E         	movff	_Cdecimal+1,___wmul@multiplicand+1
  1172  000856  EC74  F006         	call	___wmul	;wreg free
  1173  00085A  C06B  F04F         	movff	?___wmul,_mult
  1174  00085E  C06C  F050         	movff	?___wmul+1,_mult+1
  1175                           
  1176                           ;Lab3.c: 237: hund = mult / 100;
  1177  000862  C04F  F06B         	movff	_mult,___awdiv@dividend
  1178  000866  C050  F06C         	movff	_mult+1,___awdiv@dividend+1
  1179  00086A  0E00               	movlw	0
  1180  00086C  6E6E               	movwf	___awdiv@divisor+1,c
  1181  00086E  0E64               	movlw	100
  1182  000870  6E6D               	movwf	___awdiv@divisor,c
  1183  000872  EC8B  F004         	call	___awdiv	;wreg free
  1184  000876  C06B  F04D         	movff	?___awdiv,_hund
  1185  00087A  C06C  F04E         	movff	?___awdiv+1,_hund+1
  1186                           
  1187                           ;Lab3.c: 238: mult -= hund*100;
  1188  00087E  C04D  F06B         	movff	_hund,___wmul@multiplier
  1189  000882  C04E  F06C         	movff	_hund+1,___wmul@multiplier+1
  1190  000886  0E00               	movlw	0
  1191  000888  6E6E               	movwf	___wmul@multiplicand+1,c
  1192  00088A  0E64               	movlw	100
  1193  00088C  6E6D               	movwf	___wmul@multiplicand,c
  1194  00088E  EC74  F006         	call	___wmul	;wreg free
  1195  000892  506B               	movf	?___wmul,w,c
  1196  000894  5E4F               	subwf	_mult,f,c
  1197  000896  506C               	movf	?___wmul+1,w,c
  1198  000898  5A50               	subwfb	_mult+1,f,c
  1199                           
  1200                           ;Lab3.c: 239: tens = mult / 10;
  1201  00089A  C04F  F06B         	movff	_mult,___awdiv@dividend
  1202  00089E  C050  F06C         	movff	_mult+1,___awdiv@dividend+1
  1203  0008A2  0E00               	movlw	0
  1204  0008A4  6E6E               	movwf	___awdiv@divisor+1,c
  1205  0008A6  0E0A               	movlw	10
  1206  0008A8  6E6D               	movwf	___awdiv@divisor,c
  1207  0008AA  EC8B  F004         	call	___awdiv	;wreg free
  1208  0008AE  C06B  F05B         	movff	?___awdiv,_tens
  1209  0008B2  C06C  F05C         	movff	?___awdiv+1,_tens+1
  1210                           
  1211                           ;Lab3.c: 240: rem = mult % 10;
  1212  0008B6  C04F  F06B         	movff	_mult,___awmod@dividend
  1213  0008BA  C050  F06C         	movff	_mult+1,___awmod@dividend+1
  1214  0008BE  0E00               	movlw	0
  1215  0008C0  6E6E               	movwf	___awmod@divisor+1,c
  1216  0008C2  0E0A               	movlw	10
  1217  0008C4  6E6D               	movwf	___awmod@divisor,c
  1218  0008C6  EC63  F005         	call	___awmod	;wreg free
  1219  0008CA  C06B  F047         	movff	?___awmod,_rem
  1220  0008CE  C06C  F048         	movff	?___awmod+1,_rem+1
  1221                           
  1222                           ;Lab3.c: 242: hund += 48;
  1223  0008D2  0E30               	movlw	48
  1224  0008D4  264D               	addwf	_hund,f,c
  1225  0008D6  0E00               	movlw	0
  1226  0008D8  224E               	addwfc	_hund+1,f,c
  1227                           
  1228                           ;Lab3.c: 243: tens += 48;
  1229  0008DA  0E30               	movlw	48
  1230  0008DC  265B               	addwf	_tens,f,c
  1231  0008DE  0E00               	movlw	0
  1232  0008E0  225C               	addwfc	_tens+1,f,c
  1233                           
  1234                           ;Lab3.c: 244: rem += 48;
  1235  0008E2  0E30               	movlw	48
  1236  0008E4  2647               	addwf	_rem,f,c
  1237  0008E6  0E00               	movlw	0
  1238  0008E8  2248               	addwfc	_rem+1,f,c
  1239                           
  1240                           ;Lab3.c: 246: multlow[2] = 0x2B;
  1241  0008EA  0E2B               	movlw	43
  1242  0008EC  6E03               	movwf	_multlow+2,c
  1243                           
  1244                           ;Lab3.c: 247: multlow[3] = hund;
  1245  0008EE  C04D  F004         	movff	_hund,_multlow+3
  1246                           
  1247                           ;Lab3.c: 248: multlow[4] = tens;
  1248  0008F2  C05B  F005         	movff	_tens,_multlow+4
  1249                           
  1250                           ;Lab3.c: 249: multlow[5] = rem;
  1251  0008F6  C047  F006         	movff	_rem,_multlow+5
  1252                           
  1253                           ;Lab3.c: 251: Print_To_LCD(mult_lcd);
  1254  0008FA  0E9E               	movlw	low _mult_lcd
  1255  0008FC  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1256  0008FE  0E00               	movlw	high _mult_lcd
  1257  000900  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1258  000902  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1259                           
  1260                           ;Lab3.c: 252: Print_To_LCD(multlow);
  1261  000906  0E01               	movlw	low _multlow
  1262  000908  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1263  00090A  0E00               	movlw	high _multlow
  1264  00090C  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1265  00090E  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1266  000912  0012               	return		;funcret
  1267  000914  FFFF               	dw	65535	; errata NOP
  1268  000916                     __end_of_MULT:
  1269                           	opt stack 0
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postdec1	equ	0xFE5
  1279                           fsr1l	equ	0xFE1
  1280                           status	equ	0xFD8
  1281                           
  1282 ;; *************** function ___wmul *****************
  1283 ;; Defined at:
  1284 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;  multiplier      2    0[COMRAM] unsigned int 
  1287 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  product         2    4[COMRAM] unsigned int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2    0[COMRAM] unsigned int 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, prodl, prodh
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1299 ;;      Params:         4       0       0       0       0       0       0
  1300 ;;      Locals:         2       0       0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0
  1302 ;;      Totals:         6       0       0       0       0       0       0
  1303 ;;Total ram usage:        6 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; This function calls:
  1306 ;;		Nothing
  1307 ;; This function is called by:
  1308 ;;		_MULT
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text4
  1313  000CE8                     __ptext4:
  1314                           	opt stack 0
  1315  000CE8                     ___wmul:
  1316                           	opt stack 0
  1317  000CE8  FFFF               	dw	65535	; assembler added errata NOP
  1318                           
  1319                           ;incstack = 0
  1320  000CEA  506B               	movf	___wmul@multiplier,w,c
  1321  000CEC  026D               	mulwf	___wmul@multiplicand,c
  1322  000CEE  CFF3 F06F          	movff	prodl,___wmul@product
  1323  000CF2  CFF4 F070          	movff	prodh,___wmul@product+1
  1324  000CF6  506B               	movf	___wmul@multiplier,w,c
  1325  000CF8  026E               	mulwf	___wmul@multiplicand+1,c
  1326  000CFA  50F3               	movf	prodl,w,c
  1327  000CFC  2670               	addwf	___wmul@product+1,f,c
  1328  000CFE  506C               	movf	___wmul@multiplier+1,w,c
  1329  000D00  026D               	mulwf	___wmul@multiplicand,c
  1330  000D02  50F3               	movf	prodl,w,c
  1331  000D04  2670               	addwf	___wmul@product+1,f,c
  1332  000D06  C06F  F06B         	movff	___wmul@product,?___wmul
  1333  000D0A  C070  F06C         	movff	___wmul@product+1,?___wmul+1
  1334  000D0E  0012               	return		;funcret
  1335  000D10  FFFF               	dw	65535	; errata NOP
  1336  000D12                     __end_of___wmul:
  1337                           	opt stack 0
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           prodh	equ	0xFF4
  1343                           prodl	equ	0xFF3
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1l	equ	0xFE1
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function ___awmod *****************
  1351 ;; Defined at:
  1352 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  dividend        2    0[COMRAM] int 
  1355 ;;  divisor         2    2[COMRAM] int 
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  sign            1    5[COMRAM] unsigned char 
  1358 ;;  counter         1    4[COMRAM] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  2    0[COMRAM] int 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1368 ;;      Params:         4       0       0       0       0       0       0
  1369 ;;      Locals:         2       0       0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0
  1371 ;;      Totals:         6       0       0       0       0       0       0
  1372 ;;Total ram usage:        6 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_SUB
  1378 ;;		_MULT
  1379 ;;		_ADD
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text5
  1384  000AC6                     __ptext5:
  1385                           	opt stack 0
  1386  000AC6                     ___awmod:
  1387                           	opt stack 0
  1388  000AC6  FFFF               	dw	65535	; assembler added errata NOP
  1389                           
  1390                           ;incstack = 0
  1391  000AC8  0E00               	movlw	0
  1392  000ACA  6E70               	movwf	___awmod@sign,c
  1393  000ACC  AE6C               	btfss	___awmod@dividend+1,7,c
  1394  000ACE  D006               	goto	l346
  1395  000AD0  6C6B               	negf	___awmod@dividend,c
  1396  000AD2  1E6C               	comf	___awmod@dividend+1,f,c
  1397  000AD4  B0D8               	btfsc	status,0,c
  1398  000AD6  2A6C               	incf	___awmod@dividend+1,f,c
  1399  000AD8  0E01               	movlw	1
  1400  000ADA  6E70               	movwf	___awmod@sign,c
  1401  000ADC                     l346:
  1402  000ADC  FFFF               	dw	65535	; assembler added errata NOP
  1403  000ADE  AE6E               	btfss	___awmod@divisor+1,7,c
  1404  000AE0  D004               	goto	l347
  1405  000AE2  6C6D               	negf	___awmod@divisor,c
  1406  000AE4  1E6E               	comf	___awmod@divisor+1,f,c
  1407  000AE6  B0D8               	btfsc	status,0,c
  1408  000AE8  2A6E               	incf	___awmod@divisor+1,f,c
  1409  000AEA                     l347:
  1410  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  1411  000AEC  506D               	movf	___awmod@divisor,w,c
  1412  000AEE  106E               	iorwf	___awmod@divisor+1,w,c
  1413  000AF0  B4D8               	btfsc	status,2,c
  1414  000AF2  D01C               	goto	l354
  1415  000AF4  0E01               	movlw	1
  1416  000AF6  6E6F               	movwf	___awmod@counter,c
  1417  000AF8  D005               	goto	l349
  1418  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  1419  000AFC  90D8               	bcf	status,0,c
  1420  000AFE  366D               	rlcf	___awmod@divisor,f,c
  1421  000B00  366E               	rlcf	___awmod@divisor+1,f,c
  1422  000B02  2A6F               	incf	___awmod@counter,f,c
  1423  000B04                     l349:
  1424  000B04  FFFF               	dw	65535	; assembler added errata NOP
  1425  000B06  AE6E               	btfss	___awmod@divisor+1,7,c
  1426  000B08  D7F8               	goto	l350
  1427  000B0A                     u360:
  1428  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  1429  000B0C  506D               	movf	___awmod@divisor,w,c
  1430  000B0E  5C6B               	subwf	___awmod@dividend,w,c
  1431  000B10  506E               	movf	___awmod@divisor+1,w,c
  1432  000B12  586C               	subwfb	___awmod@dividend+1,w,c
  1433  000B14  A0D8               	btfss	status,0,c
  1434  000B16  D004               	goto	l353
  1435  000B18  506D               	movf	___awmod@divisor,w,c
  1436  000B1A  5E6B               	subwf	___awmod@dividend,f,c
  1437  000B1C  506E               	movf	___awmod@divisor+1,w,c
  1438  000B1E  5A6C               	subwfb	___awmod@dividend+1,f,c
  1439  000B20                     l353:
  1440  000B20  FFFF               	dw	65535	; assembler added errata NOP
  1441  000B22  90D8               	bcf	status,0,c
  1442  000B24  326E               	rrcf	___awmod@divisor+1,f,c
  1443  000B26  326D               	rrcf	___awmod@divisor,f,c
  1444  000B28  2E6F               	decfsz	___awmod@counter,f,c
  1445  000B2A  D7EF               	goto	u360
  1446  000B2C                     l354:
  1447  000B2C  FFFF               	dw	65535	; assembler added errata NOP
  1448  000B2E  5070               	movf	___awmod@sign,w,c
  1449  000B30  B4D8               	btfsc	status,2,c
  1450  000B32  D004               	goto	l355
  1451  000B34  6C6B               	negf	___awmod@dividend,c
  1452  000B36  1E6C               	comf	___awmod@dividend+1,f,c
  1453  000B38  B0D8               	btfsc	status,0,c
  1454  000B3A  2A6C               	incf	___awmod@dividend+1,f,c
  1455  000B3C                     l355:
  1456  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  1457  000B3E  C06B  F06B         	movff	___awmod@dividend,?___awmod
  1458  000B42  C06C  F06C         	movff	___awmod@dividend+1,?___awmod+1
  1459  000B46  0012               	return		;funcret
  1460  000B48  FFFF               	dw	65535	; errata NOP
  1461  000B4A                     __end_of___awmod:
  1462                           	opt stack 0
  1463                           tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           prodh	equ	0xFF4
  1468                           prodl	equ	0xFF3
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postdec1	equ	0xFE5
  1472                           fsr1l	equ	0xFE1
  1473                           status	equ	0xFD8
  1474                           
  1475 ;; *************** function ___awdiv *****************
  1476 ;; Defined at:
  1477 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  dividend        2    0[COMRAM] int 
  1480 ;;  divisor         2    2[COMRAM] int 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  quotient        2    6[COMRAM] int 
  1483 ;;  sign            1    5[COMRAM] unsigned char 
  1484 ;;  counter         1    4[COMRAM] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  2    0[COMRAM] int 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1494 ;;      Params:         4       0       0       0       0       0       0
  1495 ;;      Locals:         4       0       0       0       0       0       0
  1496 ;;      Temps:          0       0       0       0       0       0       0
  1497 ;;      Totals:         8       0       0       0       0       0       0
  1498 ;;Total ram usage:        8 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_SUB
  1504 ;;		_MULT
  1505 ;;		_ADD
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text6
  1510  000916                     __ptext6:
  1511                           	opt stack 0
  1512  000916                     ___awdiv:
  1513                           	opt stack 0
  1514  000916  FFFF               	dw	65535	; assembler added errata NOP
  1515                           
  1516                           ;incstack = 0
  1517  000918  0E00               	movlw	0
  1518  00091A  6E70               	movwf	___awdiv@sign,c
  1519  00091C  AE6E               	btfss	___awdiv@divisor+1,7,c
  1520  00091E  D006               	goto	l333
  1521  000920  6C6D               	negf	___awdiv@divisor,c
  1522  000922  1E6E               	comf	___awdiv@divisor+1,f,c
  1523  000924  B0D8               	btfsc	status,0,c
  1524  000926  2A6E               	incf	___awdiv@divisor+1,f,c
  1525  000928  0E01               	movlw	1
  1526  00092A  6E70               	movwf	___awdiv@sign,c
  1527  00092C                     l333:
  1528  00092C  FFFF               	dw	65535	; assembler added errata NOP
  1529  00092E  AE6C               	btfss	___awdiv@dividend+1,7,c
  1530  000930  D006               	goto	l334
  1531  000932  6C6B               	negf	___awdiv@dividend,c
  1532  000934  1E6C               	comf	___awdiv@dividend+1,f,c
  1533  000936  B0D8               	btfsc	status,0,c
  1534  000938  2A6C               	incf	___awdiv@dividend+1,f,c
  1535  00093A  0E01               	movlw	1
  1536  00093C  1A70               	xorwf	___awdiv@sign,f,c
  1537  00093E                     l334:
  1538  00093E  FFFF               	dw	65535	; assembler added errata NOP
  1539  000940  0E00               	movlw	0
  1540  000942  6E72               	movwf	___awdiv@quotient+1,c
  1541  000944  0E00               	movlw	0
  1542  000946  6E71               	movwf	___awdiv@quotient,c
  1543  000948  506D               	movf	___awdiv@divisor,w,c
  1544  00094A  106E               	iorwf	___awdiv@divisor+1,w,c
  1545  00094C  B4D8               	btfsc	status,2,c
  1546  00094E  D020               	goto	l341
  1547  000950  0E01               	movlw	1
  1548  000952  6E6F               	movwf	___awdiv@counter,c
  1549  000954  D005               	goto	l336
  1550  000956  FFFF               	dw	65535	; assembler added errata NOP
  1551  000958  90D8               	bcf	status,0,c
  1552  00095A  366D               	rlcf	___awdiv@divisor,f,c
  1553  00095C  366E               	rlcf	___awdiv@divisor+1,f,c
  1554  00095E  2A6F               	incf	___awdiv@counter,f,c
  1555  000960                     l336:
  1556  000960  FFFF               	dw	65535	; assembler added errata NOP
  1557  000962  AE6E               	btfss	___awdiv@divisor+1,7,c
  1558  000964  D7F8               	goto	l337
  1559  000966                     u300:
  1560  000966  FFFF               	dw	65535	; assembler added errata NOP
  1561  000968  90D8               	bcf	status,0,c
  1562  00096A  3671               	rlcf	___awdiv@quotient,f,c
  1563  00096C  3672               	rlcf	___awdiv@quotient+1,f,c
  1564  00096E  506D               	movf	___awdiv@divisor,w,c
  1565  000970  5C6B               	subwf	___awdiv@dividend,w,c
  1566  000972  506E               	movf	___awdiv@divisor+1,w,c
  1567  000974  586C               	subwfb	___awdiv@dividend+1,w,c
  1568  000976  A0D8               	btfss	status,0,c
  1569  000978  D005               	goto	l340
  1570  00097A  506D               	movf	___awdiv@divisor,w,c
  1571  00097C  5E6B               	subwf	___awdiv@dividend,f,c
  1572  00097E  506E               	movf	___awdiv@divisor+1,w,c
  1573  000980  5A6C               	subwfb	___awdiv@dividend+1,f,c
  1574  000982  8071               	bsf	___awdiv@quotient,0,c
  1575  000984                     l340:
  1576  000984  FFFF               	dw	65535	; assembler added errata NOP
  1577  000986  90D8               	bcf	status,0,c
  1578  000988  326E               	rrcf	___awdiv@divisor+1,f,c
  1579  00098A  326D               	rrcf	___awdiv@divisor,f,c
  1580  00098C  2E6F               	decfsz	___awdiv@counter,f,c
  1581  00098E  D7EB               	goto	u300
  1582  000990                     l341:
  1583  000990  FFFF               	dw	65535	; assembler added errata NOP
  1584  000992  5070               	movf	___awdiv@sign,w,c
  1585  000994  B4D8               	btfsc	status,2,c
  1586  000996  D004               	goto	l342
  1587  000998  6C71               	negf	___awdiv@quotient,c
  1588  00099A  1E72               	comf	___awdiv@quotient+1,f,c
  1589  00099C  B0D8               	btfsc	status,0,c
  1590  00099E  2A72               	incf	___awdiv@quotient+1,f,c
  1591  0009A0                     l342:
  1592  0009A0  FFFF               	dw	65535	; assembler added errata NOP
  1593  0009A2  C071  F06B         	movff	___awdiv@quotient,?___awdiv
  1594  0009A6  C072  F06C         	movff	___awdiv@quotient+1,?___awdiv+1
  1595  0009AA  0012               	return		;funcret
  1596  0009AC  FFFF               	dw	65535	; errata NOP
  1597  0009AE                     __end_of___awdiv:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           tblptrh	equ	0xFF7
  1601                           tblptrl	equ	0xFF6
  1602                           tablat	equ	0xFF5
  1603                           prodh	equ	0xFF4
  1604                           prodl	equ	0xFF3
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1l	equ	0xFE1
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _Initialize_PIC *****************
  1612 ;; Defined at:
  1613 ;;		line 262 in file "Lab3.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1627 ;;      Params:         0       0       0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    1
  1634 ;; This function calls:
  1635 ;;		_Initialize_LCD
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text7
  1642  000CBC                     __ptext7:
  1643                           	opt stack 0
  1644  000CBC                     _Initialize_PIC:
  1645                           	opt stack 0
  1646  000CBC  FFFF               	dw	65535	; assembler added errata NOP
  1647                           
  1648                           ;Lab3.c: 266: ADCON1 = 0b10001110;
  1649                           
  1650                           ;incstack = 0
  1651  000CBE  0E8E               	movlw	142
  1652  000CC0  6EC1               	movwf	4033,c	;volatile
  1653                           
  1654                           ;Lab3.c: 267: TRISA = 0b11100001;
  1655  000CC2  0EE1               	movlw	225
  1656  000CC4  6E92               	movwf	3986,c	;volatile
  1657                           
  1658                           ;Lab3.c: 268: TRISB = 0b11011100;
  1659  000CC6  0EDC               	movlw	220
  1660  000CC8  6E93               	movwf	3987,c	;volatile
  1661                           
  1662                           ;Lab3.c: 269: TRISC = 0b11010000;
  1663  000CCA  0ED0               	movlw	208
  1664  000CCC  6E94               	movwf	3988,c	;volatile
  1665                           
  1666                           ;Lab3.c: 270: TRISD = 0b00001111;
  1667  000CCE  0E0F               	movlw	15
  1668  000CD0  6E95               	movwf	3989,c	;volatile
  1669                           
  1670                           ;Lab3.c: 271: TRISE = 0b00000000;
  1671  000CD2  0E00               	movlw	0
  1672  000CD4  6E96               	movwf	3990,c	;volatile
  1673                           
  1674                           ;Lab3.c: 272: PORTA = 0b00010000;
  1675  000CD6  0E10               	movlw	16
  1676  000CD8  6E80               	movwf	3968,c	;volatile
  1677                           
  1678                           ;Lab3.c: 273: PORTAbits.RA3 = 0;
  1679  000CDA  9680               	bcf	3968,3,c	;volatile
  1680                           
  1681                           ;Lab3.c: 274: PORTAbits.RA2 = 0;
  1682  000CDC  9480               	bcf	3968,2,c	;volatile
  1683                           
  1684                           ;Lab3.c: 275: PORTAbits.RA1 = 0;
  1685  000CDE  9280               	bcf	3968,1,c	;volatile
  1686                           
  1687                           ;Lab3.c: 276: Initialize_LCD();
  1688  000CE0  ECD7  F004         	call	_Initialize_LCD	;wreg free
  1689  000CE4  0012               	return		;funcret
  1690  000CE6  FFFF               	dw	65535	; errata NOP
  1691  000CE8                     __end_of_Initialize_PIC:
  1692                           	opt stack 0
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1l	equ	0xFE1
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _Initialize_LCD *****************
  1706 ;; Defined at:
  1707 ;;		line 287 in file "Lab3.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  tempPtr         2    2[COMRAM] PTR unsigned char 
  1712 ;;		 -> LCDstr(8), 
  1713 ;;  currentChar     1    4[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1723 ;;      Params:         0       0       0       0       0       0       0
  1724 ;;      Locals:         3       0       0       0       0       0       0
  1725 ;;      Temps:          2       0       0       0       0       0       0
  1726 ;;      Totals:         5       0       0       0       0       0       0
  1727 ;;Total ram usage:        5 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; This function calls:
  1730 ;;		Nothing
  1731 ;; This function is called by:
  1732 ;;		_Initialize_PIC
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text8
  1737  0009AE                     __ptext8:
  1738                           	opt stack 0
  1739  0009AE                     _Initialize_LCD:
  1740                           	opt stack 0
  1741  0009AE  FFFF               	dw	65535	; assembler added errata NOP
  1742                           
  1743                           ;Lab3.c: 289: char currentChar;
  1744                           ;Lab3.c: 290: char *tempPtr;
  1745                           ;Lab3.c: 292: _delay((unsigned long)((100)*(10000000/4000.0)));
  1746                           
  1747                           ;incstack = 0
  1748  0009B0  0E01               	movlw	1
  1749  0009B2  6E6C               	movwf	(??_Initialize_LCD+1)& (0+255),c
  1750  0009B4  0EF4               	movlw	244
  1751  0009B6  6E6B               	movwf	??_Initialize_LCD& (0+255),c
  1752  0009B8  0EA8               	movlw	168
  1753  0009BA                     u467:
  1754  0009BA  FFFF               	dw	65535	; errata NOP
  1755  0009BC  2EE8               	decfsz	wreg,f,c
  1756  0009BE  D7FD               	bra	u467
  1757  0009C0  2E6B               	decfsz	??_Initialize_LCD& (0+255),f,c
  1758  0009C2  D7FB               	bra	u467
  1759  0009C4  2E6C               	decfsz	(??_Initialize_LCD+1)& (0+255),f,c
  1760  0009C6  D7F9               	bra	u467
  1761  0009C8  D000               	nop2	
  1762                           
  1763                           ;Lab3.c: 294: PORTEbits.RE0 = 0;
  1764  0009CA  9084               	bcf	3972,0,c	;volatile
  1765                           
  1766                           ;Lab3.c: 295: tempPtr = LCDstr;
  1767  0009CC  0E15               	movlw	low _LCDstr
  1768  0009CE  6E6D               	movwf	Initialize_LCD@tempPtr,c
  1769  0009D0  0E06               	movlw	high _LCDstr
  1770  0009D2  6E6E               	movwf	Initialize_LCD@tempPtr+1,c
  1771                           
  1772                           ;Lab3.c: 297: while (*tempPtr)
  1773  0009D4  D026               	goto	l153
  1774  0009D6  FFFF               	dw	65535	; assembler added errata NOP
  1775                           
  1776                           ;Lab3.c: 298: {
  1777                           ;Lab3.c: 299: currentChar = *tempPtr;
  1778  0009D8  C06D  FFF6         	movff	Initialize_LCD@tempPtr,tblptrl
  1779  0009DC  C06E  FFF7         	movff	Initialize_LCD@tempPtr+1,tblptrh
  1780  0009E0                     	if	0	;tblptru may be non-zero
  1781  0009E0                     	endif
  1782  0009E0                     	if	0	;tblptru may be non-zero
  1783  0009E0                     	endif
  1784  0009E0  0008               	tblrd		*
  1785  0009E2  FFFF               	dw	65535	; errata NOP
  1786  0009E4  CFF5 F06F          	movff	tablat,Initialize_LCD@currentChar
  1787                           
  1788                           ;Lab3.c: 300: PORTEbits.RE1 = 1;
  1789  0009E8  8284               	bsf	3972,1,c	;volatile
  1790                           
  1791                           ;Lab3.c: 301: PORTD = currentChar;
  1792  0009EA  C06F  FF83         	movff	Initialize_LCD@currentChar,3971	;volatile
  1793                           
  1794                           ;Lab3.c: 302: PORTEbits.RE1 = 0;
  1795  0009EE  9284               	bcf	3972,1,c	;volatile
  1796                           
  1797                           ;Lab3.c: 303: _delay((unsigned long)((10)*(10000000/4000.0)));
  1798  0009F0  0E19               	movlw	25
  1799  0009F2  6E6B               	movwf	??_Initialize_LCD& (0+255),c
  1800  0009F4  0E5D               	movlw	93
  1801  0009F6                     u477:
  1802  0009F6  FFFF               	dw	65535	; errata NOP
  1803  0009F8  2EE8               	decfsz	wreg,f,c
  1804  0009FA  D7FD               	bra	u477
  1805  0009FC  2E6B               	decfsz	??_Initialize_LCD& (0+255),f,c
  1806  0009FE  D7FB               	bra	u477
  1807                           
  1808                           ;Lab3.c: 304: currentChar <<= 4;
  1809  000A00  3A6F               	swapf	Initialize_LCD@currentChar,f,c
  1810  000A02  0EF0               	movlw	240
  1811  000A04  166F               	andwf	Initialize_LCD@currentChar,f,c
  1812                           
  1813                           ;Lab3.c: 305: PORTEbits.RE1 = 1;
  1814  000A06  8284               	bsf	3972,1,c	;volatile
  1815                           
  1816                           ;Lab3.c: 306: PORTD = currentChar;
  1817  000A08  C06F  FF83         	movff	Initialize_LCD@currentChar,3971	;volatile
  1818                           
  1819                           ;Lab3.c: 307: PORTEbits.RE1 = 0;
  1820  000A0C  9284               	bcf	3972,1,c	;volatile
  1821                           
  1822                           ;Lab3.c: 308: _delay((unsigned long)((10)*(10000000/4000.0)));
  1823  000A0E  0E19               	movlw	25
  1824  000A10  6E6B               	movwf	??_Initialize_LCD& (0+255),c
  1825  000A12  0E5D               	movlw	93
  1826  000A14                     u487:
  1827  000A14  FFFF               	dw	65535	; errata NOP
  1828  000A16  2EE8               	decfsz	wreg,f,c
  1829  000A18  D7FD               	bra	u487
  1830  000A1A  2E6B               	decfsz	??_Initialize_LCD& (0+255),f,c
  1831  000A1C  D7FB               	bra	u487
  1832                           
  1833                           ;Lab3.c: 309: tempPtr++;
  1834  000A1E  4A6D               	infsnz	Initialize_LCD@tempPtr,f,c
  1835  000A20  2A6E               	incf	Initialize_LCD@tempPtr+1,f,c
  1836  000A22                     l153:
  1837  000A22  FFFF               	dw	65535	; assembler added errata NOP
  1838  000A24  C06D  FFF6         	movff	Initialize_LCD@tempPtr,tblptrl
  1839  000A28  C06E  FFF7         	movff	Initialize_LCD@tempPtr+1,tblptrh
  1840  000A2C                     	if	0	;tblptru may be non-zero
  1841  000A2C                     	endif
  1842  000A2C                     	if	0	;tblptru may be non-zero
  1843  000A2C                     	endif
  1844  000A2C  0008               	tblrd		*
  1845  000A2E  FFFF               	dw	65535	; errata NOP
  1846  000A30  50F5               	movf	tablat,w,c
  1847  000A32  0900               	iorlw	0
  1848  000A34  B4D8               	btfsc	status,2,c
  1849  000A36  0012               	return		;funcret
  1850  000A38  FFFF               	dw	65535	; assembler added errata NOP
  1851  000A3A  D7CD               	goto	l154
  1852  000A3C  FFFF               	dw	65535	; errata NOP
  1853  000A3E                     __end_of_Initialize_LCD:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           status	equ	0xFD8
  1866                           
  1867 ;; *************** function _AND *****************
  1868 ;; Defined at:
  1869 ;;		line 192 in file "Lab3.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;		None
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;		None
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1883 ;;      Params:         0       0       0       0       0       0       0
  1884 ;;      Locals:         0       0       0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0
  1886 ;;      Totals:         0       0       0       0       0       0       0
  1887 ;;Total ram usage:        0 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		_Print_To_LCD
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text9
  1898  000BA0                     __ptext9:
  1899                           	opt stack 0
  1900  000BA0                     _AND:
  1901                           	opt stack 0
  1902  000BA0  FFFF               	dw	65535	; assembler added errata NOP
  1903                           
  1904                           ;Lab3.c: 194: B3 = B3 & C3;
  1905                           
  1906                           ;incstack = 0
  1907  000BA2  5066               	movf	_B3,w,c
  1908  000BA4  1462               	andwf	_C3,w,c
  1909  000BA6  6E66               	movwf	_B3,c
  1910                           
  1911                           ;Lab3.c: 195: B2 = B2 & C2;
  1912  000BA8  5065               	movf	_B2,w,c
  1913  000BAA  1461               	andwf	_C2,w,c
  1914  000BAC  6E65               	movwf	_B2,c
  1915                           
  1916                           ;Lab3.c: 196: B1 = B1 & C1;
  1917  000BAE  5064               	movf	_B1,w,c
  1918  000BB0  1460               	andwf	_C1,w,c
  1919  000BB2  6E64               	movwf	_B1,c
  1920                           
  1921                           ;Lab3.c: 197: B0 = B0 & C0;
  1922  000BB4  5063               	movf	_B0,w,c
  1923  000BB6  145F               	andwf	_C0,w,c
  1924  000BB8  6E63               	movwf	_B0,c
  1925                           
  1926                           ;Lab3.c: 199: B3 += 48;
  1927  000BBA  0E30               	movlw	48
  1928  000BBC  2666               	addwf	_B3,f,c
  1929                           
  1930                           ;Lab3.c: 200: B2 += 48;
  1931  000BBE  0E30               	movlw	48
  1932  000BC0  2665               	addwf	_B2,f,c
  1933                           
  1934                           ;Lab3.c: 201: B1 += 48;
  1935  000BC2  0E30               	movlw	48
  1936  000BC4  2664               	addwf	_B1,f,c
  1937                           
  1938                           ;Lab3.c: 202: B0 += 48;
  1939  000BC6  0E30               	movlw	48
  1940  000BC8  2663               	addwf	_B0,f,c
  1941                           
  1942                           ;Lab3.c: 204: addlow[2] = B3;
  1943  000BCA  C066  F035         	movff	_B3,_addlow+2
  1944                           
  1945                           ;Lab3.c: 205: addlow[3] = B2;
  1946  000BCE  C065  F036         	movff	_B2,_addlow+3
  1947                           
  1948                           ;Lab3.c: 206: addlow[4] = B1;
  1949  000BD2  C064  F037         	movff	_B1,_addlow+4
  1950                           
  1951                           ;Lab3.c: 207: addlow[5] = B0;
  1952  000BD6  C063  F038         	movff	_B0,_addlow+5
  1953                           
  1954                           ;Lab3.c: 209: Print_To_LCD(and_lcd);
  1955  000BDA  0E15               	movlw	low _and_lcd
  1956  000BDC  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1957  000BDE  0E00               	movlw	high _and_lcd
  1958  000BE0  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1959  000BE2  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1960                           
  1961                           ;Lab3.c: 210: Print_To_LCD(addlow);
  1962  000BE6  0E33               	movlw	low _addlow
  1963  000BE8  6E6B               	movwf	Print_To_LCD@tempPtr,c
  1964  000BEA  0E00               	movlw	high _addlow
  1965  000BEC  6E6C               	movwf	Print_To_LCD@tempPtr+1,c
  1966  000BEE  EC1F  F005         	call	_Print_To_LCD	;wreg free
  1967  000BF2  0012               	return		;funcret
  1968  000BF4  FFFF               	dw	65535	; errata NOP
  1969  000BF6                     __end_of_AND:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodh	equ	0xFF4
  1976                           prodl	equ	0xFF3
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _Print_To_LCD *****************
  1984 ;; Defined at:
  1985 ;;		line 325 in file "Lab3.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  tempPtr         2    0[COMRAM] PTR const unsigned char 
  1988 ;;		 -> mult_lcd(10), multlow(10), not_lcd(10), notlow(10), 
  1989 ;;		 -> and_lcd(10), sub(10), sublow(10), add(10), 
  1990 ;;		 -> addlow(10), Clear2(10), Clear1(10), 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  currentChar     1    3[COMRAM] unsigned char 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2002 ;;      Params:         2       0       0       0       0       0       0
  2003 ;;      Locals:         1       0       0       0       0       0       0
  2004 ;;      Temps:          1       0       0       0       0       0       0
  2005 ;;      Totals:         4       0       0       0       0       0       0
  2006 ;;Total ram usage:        4 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;;		_SUB
  2013 ;;		_AND
  2014 ;;		_NOT
  2015 ;;		_MULT
  2016 ;;		_ADD
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text10
  2021  000A3E                     __ptext10:
  2022                           	opt stack 0
  2023  000A3E                     _Print_To_LCD:
  2024                           	opt stack 0
  2025  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  2026                           
  2027                           ;Lab3.c: 327: char currentChar;
  2028                           ;Lab3.c: 328: PORTEbits.RE0 = 0;
  2029                           
  2030                           ;incstack = 0
  2031  000A40  9084               	bcf	3972,0,c	;volatile
  2032                           
  2033                           ;Lab3.c: 330: while (*tempPtr)
  2034  000A42  D029               	goto	l159
  2035  000A44  FFFF               	dw	65535	; assembler added errata NOP
  2036                           
  2037                           ;Lab3.c: 331: {
  2038                           ;Lab3.c: 332: currentChar = *tempPtr;
  2039  000A46  C06B  FFF6         	movff	Print_To_LCD@tempPtr,tblptrl
  2040  000A4A  C06C  FFF7         	movff	Print_To_LCD@tempPtr+1,tblptrh
  2041  000A4E  6AF8               	clrf	tblptru,c
  2042  000A50  0E05               	movlw	(high __ramtop+-1)
  2043  000A52  64F7               	cpfsgt	tblptrh,c
  2044  000A54  D004               	bra	u247
  2045  000A56  0008               	tblrd		*
  2046  000A58  FFFF               	dw	65535	; errata NOP
  2047  000A5A  50F5               	movf	tablat,w,c
  2048  000A5C  D005               	bra	u240
  2049  000A5E                     u247:
  2050  000A5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2051  000A62  CFF7 FFEA          	movff	tblptrh,fsr0h
  2052  000A66  50EF               	movf	indf0,w,c
  2053  000A68                     u240:
  2054  000A68  6E6E               	movwf	Print_To_LCD@currentChar,c
  2055                           
  2056                           ;Lab3.c: 333: PORTEbits.RE1 = 1;
  2057  000A6A  8284               	bsf	3972,1,c	;volatile
  2058                           
  2059                           ;Lab3.c: 334: PORTD = currentChar;
  2060  000A6C  C06E  FF83         	movff	Print_To_LCD@currentChar,3971	;volatile
  2061                           
  2062                           ;Lab3.c: 335: PORTEbits.RE1 = 0;
  2063  000A70  9284               	bcf	3972,1,c	;volatile
  2064                           
  2065                           ;Lab3.c: 336: currentChar <<= 4;
  2066  000A72  3A6E               	swapf	Print_To_LCD@currentChar,f,c
  2067  000A74  0EF0               	movlw	240
  2068  000A76  166E               	andwf	Print_To_LCD@currentChar,f,c
  2069                           
  2070                           ;Lab3.c: 337: PORTEbits.RE1 = 1;
  2071  000A78  8284               	bsf	3972,1,c	;volatile
  2072                           
  2073                           ;Lab3.c: 338: PORTD = currentChar;
  2074  000A7A  C06E  FF83         	movff	Print_To_LCD@currentChar,3971	;volatile
  2075                           
  2076                           ;Lab3.c: 339: PORTEbits.RE1 = 0;
  2077  000A7E  9284               	bcf	3972,1,c	;volatile
  2078                           
  2079                           ;Lab3.c: 340: _delay((unsigned long)((10)*(10000000/4000.0)));
  2080  000A80  0E19               	movlw	25
  2081  000A82  6E6D               	movwf	??_Print_To_LCD& (0+255),c
  2082  000A84  0E5D               	movlw	93
  2083  000A86                     u497:
  2084  000A86  FFFF               	dw	65535	; errata NOP
  2085  000A88  2EE8               	decfsz	wreg,f,c
  2086  000A8A  D7FD               	bra	u497
  2087  000A8C  2E6D               	decfsz	??_Print_To_LCD& (0+255),f,c
  2088  000A8E  D7FB               	bra	u497
  2089                           
  2090                           ;Lab3.c: 341: PORTEbits.RE0 = 1;
  2091  000A90  8084               	bsf	3972,0,c	;volatile
  2092                           
  2093                           ;Lab3.c: 342: tempPtr++;
  2094  000A92  4A6B               	infsnz	Print_To_LCD@tempPtr,f,c
  2095  000A94  2A6C               	incf	Print_To_LCD@tempPtr+1,f,c
  2096  000A96                     l159:
  2097  000A96  FFFF               	dw	65535	; assembler added errata NOP
  2098  000A98  C06B  FFF6         	movff	Print_To_LCD@tempPtr,tblptrl
  2099  000A9C  C06C  FFF7         	movff	Print_To_LCD@tempPtr+1,tblptrh
  2100  000AA0  6AF8               	clrf	tblptru,c
  2101  000AA2  0E05               	movlw	(high __ramtop+-1)
  2102  000AA4  64F7               	cpfsgt	tblptrh,c
  2103  000AA6  D004               	bra	u257
  2104  000AA8  0008               	tblrd		*
  2105  000AAA  FFFF               	dw	65535	; errata NOP
  2106  000AAC  50F5               	movf	tablat,w,c
  2107  000AAE  D005               	bra	u250
  2108  000AB0                     u257:
  2109  000AB0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2110  000AB4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2111  000AB8  50EF               	movf	indf0,w,c
  2112  000ABA                     u250:
  2113  000ABA  0900               	iorlw	0
  2114  000ABC  B4D8               	btfsc	status,2,c
  2115  000ABE  0012               	return		;funcret
  2116  000AC0  FFFF               	dw	65535	; assembler added errata NOP
  2117  000AC2  D7C0               	goto	l160
  2118  000AC4  FFFF               	dw	65535	; errata NOP
  2119  000AC6                     __end_of_Print_To_LCD:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           indf0	equ	0xFEF
  2128                           postinc0	equ	0xFEE
  2129                           fsr0h	equ	0xFEA
  2130                           fsr0l	equ	0xFE9
  2131                           wreg	equ	0xFE8
  2132                           postdec1	equ	0xFE5
  2133                           fsr1l	equ	0xFE1
  2134                           status	equ	0xFD8
  2135                           tblptru	equ	0xFF8
  2136                           tblptrh	equ	0xFF7
  2137                           tblptrl	equ	0xFF6
  2138                           tablat	equ	0xFF5
  2139                           prodh	equ	0xFF4
  2140                           prodl	equ	0xFF3
  2141                           indf0	equ	0xFEF
  2142                           postinc0	equ	0xFEE
  2143                           fsr0h	equ	0xFEA
  2144                           fsr0l	equ	0xFE9
  2145                           wreg	equ	0xFE8
  2146                           postdec1	equ	0xFE5
  2147                           fsr1l	equ	0xFE1
  2148                           status	equ	0xFD8
  2149                           
  2150                           	psect	rparam
  2151  0000                     tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           indf0	equ	0xFEF
  2158                           postinc0	equ	0xFEE
  2159                           fsr0h	equ	0xFEA
  2160                           fsr0l	equ	0xFE9
  2161                           wreg	equ	0xFE8
  2162                           postdec1	equ	0xFE5
  2163                           fsr1l	equ	0xFE1
  2164                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    28
    Data        120
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     12     118
    BANK0           128      0      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Print_To_LCD@tempPtr	PTR const unsigned char  size(2) Largest target is 10
		 -> mult_lcd(BANK0[10]), multlow(COMRAM[10]), not_lcd(BANK0[10]), notlow(COMRAM[10]), 
		 -> and_lcd(COMRAM[10]), sub(COMRAM[10]), sublow(COMRAM[10]), add(COMRAM[10]), 
		 -> addlow(COMRAM[10]), Clear2(CODE[10]), Clear1(CODE[10]), 

    Initialize_LCD@tempPtr	PTR unsigned char  size(2) Largest target is 8
		 -> LCDstr(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_SUB
    _SUB->___awdiv
    _NOT->_Print_To_LCD
    _MULT->___awdiv
    _Initialize_PIC->_Initialize_LCD
    _AND->_Print_To_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9466
                                             10 COMRAM     2     2      0
                                _AND
                     _Initialize_PIC
                               _MULT
                                _NOT
                       _Print_To_LCD
                                _SUB
 ---------------------------------------------------------------------------------
 (1) _SUB                                                  2     2      0    2967
                                              8 COMRAM     2     2      0
                       _Print_To_LCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _NOT                                                  0     0      0    1003
                       _Print_To_LCD
 ---------------------------------------------------------------------------------
 (1) _MULT                                                 0     0      0    3430
                       _Print_To_LCD
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1060
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Initialize_PIC                                       0     0      0      60
                     _Initialize_LCD
 ---------------------------------------------------------------------------------
 (2) _Initialize_LCD                                       5     5      0      60
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _AND                                                  0     0      0    1003
                       _Print_To_LCD
 ---------------------------------------------------------------------------------
 (2) _Print_To_LCD                                         4     2      2    1003
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AND
     _Print_To_LCD
   _Initialize_PIC
     _Initialize_LCD
   _MULT
     _Print_To_LCD
     ___awdiv
     ___awmod
     ___wmul
   _NOT
     _Print_To_LCD
   _Print_To_LCD
   _SUB
     _Print_To_LCD
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      32       5       39.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F      C      76       1       92.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      15        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Mar 06 15:28:50 2018

                                                         _B0 0063  
                                                         _B1 0064  
                                                         _B2 0065  
                                                         _C0 005F  
                                                         _B3 0066  
                                                         _C1 0060  
                                                         _C2 0061  
                                                         _C3 0062  
                                               ___awdiv@sign 0070  
                                        ___wmul@multiplicand 006D  
                                                __CFG_OSC$HS 000000  
                                                        l121 0644  
                                                        l122 0710  
                                                        l124 0724  
                                                        l126 0738  
                                                        l160 0A44  
                                                        l136 0818  
                                                        l153 0A22  
                                                        l137 0826  
                                                        l154 09D6  
                                                        l340 0984  
                                                        l341 0990  
                                                        l333 092C  
                                                        l342 09A0  
                                                        l334 093E  
                                                        l350 0AFA  
                                                        l159 0A96  
                                                        l336 0960  
                                                        l337 0956  
                                                        l353 0B20  
                                                        l354 0B2C  
                                                        l346 0ADC  
                                                        l355 0B3C  
                                                        l347 0AEA  
                                                        l349 0B04  
                                                        _AND 0BA0  
                                                        u300 0966  
                                                        u240 0A68  
                                                        u250 0ABA  
                                                        u247 0A5E  
                                                        u360 0B0A  
                                                        u257 0AB0  
                                                        u467 09BA  
                                                        u477 09F6  
                                                        u487 0A14  
                                                        u497 0A86  
                                                        _NOT 0BF6  
                                                        _SUB 0740  
                                                        _SWA 0068  
                                                        _SWB 0067  
                                               __CFG_BOR$OFF 000000  
                                                        _add 003D  
                                                        _and 0053  
                                                        _neg 0059  
                                                        _rem 0047  
                                                        _not 0051  
                                                        _sub 0029  
                                                        _sum 005D  
                                               ___awmod@sign 0070  
                                                        wreg 000FE8  
                                                       ?_AND 006B  
                                               __CFG_LVP$OFF 000000  
                                                       ?_NOT 006B  
                                                       ?_SUB 006B  
                                               __CFG_WDT$OFF 000000  
                                                       _MULT 0844  
                                               __CFG_STVR$ON 000000  
                                                       _main 061E  
                                                       _hund 004D  
                                                       _tens 005B  
                                                       _mult 004F  
                                                       fsr0h 000FEA  
                                                       indf0 000FEF  
                                                       fsr0l 000FE9  
                                                       fsr1l 000FE1  
                                                       prodh 000FF4  
                                                       prodl 000FF3  
                                                       start 0002  
                                               ___param_bank 000000  
                                                      ??_AND 006F  
                                                      ??_NOT 006F  
                                                      ??_SUB 0073  
                                                      ?_MULT 006B  
                                              __CFG_OSCS$OFF 000000  
                                                      ?_main 006B  
                                            __end_of___awdiv 09AE  
                                            __end_of___awmod 0B4A  
                                            ___awdiv@divisor 006D  
                                            ___awdiv@counter 006F  
                                                      _PORTA 000F80  
                                                      _PORTD 000F83  
                                                      _TRISA 000F92  
                                                      _TRISB 000F93  
                                                      _TRISC 000F94  
                                                      _TRISD 000F95  
                                                      _TRISE 000F96  
                                              __CFG_PWRT$OFF 000000  
                                                      _Str_1 0094  
                                                      _Str_2 008A  
                                                      _rem_n 0055  
                                                      _minus 0069  
                                                      tablat 000FF5  
                                  Initialize_LCD@currentChar 006F  
                                                      status 000FD8  
                                               __end_of_MULT 0916  
                                            __initialization 0B4A  
                                    __size_of_Initialize_LCD 0090  
                                    __size_of_Initialize_PIC 002C  
                                               __end_of_main 0740  
                                                     ??_MULT 0073  
                                                     ??_main 0075  
                                              __activetblptr 000002  
                                            __CFG_CCP2MUX$ON 000000  
                                                     _ADCON1 000FC1  
                                           ___awdiv@dividend 006B  
                                                     _LCDstr 0615  
                                                     _Clear1 060B  
                                                     _Clear2 0601  
                                                     _addlow 0033  
                                                     ___wmul 0CE8  
                                                  ??___awdiv 006F  
                                                  ??___awmod 006F  
                                                     _andlow 0080  
                                                     clear_0 0B90  
                                           ___awdiv@quotient 0071  
                                            ___awmod@divisor 006D  
                                                     _tens_n 0057  
                                                     _notlow 000B  
                                            ___awmod@counter 006F  
                                                     _sublow 001F  
                                               __pdataCOMRAM 0001  
                                        Print_To_LCD@tempPtr 006B  
                                               __mediumconst 0000  
                                                     tblptrh 000FF7  
                                                     tblptrl 000FF6  
                                                     tblptru 000FF8  
                                                 __accesstop 0080  
                                    __end_of__initialization 0B96  
                                              ___rparam_used 000001  
                                             __pcstackCOMRAM 006B  
                                               __pidataBANK0 0C8A  
                                             _Initialize_LCD 09AE  
                                             _Initialize_PIC 0CBC  
                                                    ?___wmul 006B  
                                     __end_of_Initialize_LCD 0A3E  
                                     __end_of_Initialize_PIC 0CE8  
                                                    __Hparam 0000  
                                                    __Lparam 0000  
                                              ?_Print_To_LCD 006B  
                                                    ___awdiv 0916  
                                                    ___awmod 0AC6  
                                            __size_of___wmul 002A  
                                               __psmallconst 0600  
                                                    _and_lcd 0015  
                                                    __pcinit 0B4A  
                                                    __ramtop 0600  
                                                    __ptext0 061E  
                                                    __ptext1 0740  
                                                    __ptext2 0BF6  
                                                    __ptext3 0844  
                                                    __ptext4 0CE8  
                                                    __ptext5 0AC6  
                                                    __ptext6 0916  
                                                    __ptext7 0CBC  
                                                    __ptext8 09AE  
                                                    __ptext9 0BA0  
                                               __size_of_AND 0056  
                                               __size_of_NOT 004E  
                                               __size_of_SUB 0104  
                                           ___awmod@dividend 006B  
                                                    _not_lcd 00A8  
                                                    _multlow 0001  
                                       end_of_initialization 0B96  
                                              __Lmediumconst 0000  
                                            ?_Initialize_LCD 006B  
                                            ?_Initialize_PIC 006B  
                                             ??_Print_To_LCD 006D  
                                                    postdec1 000FE5  
                                                    postinc0 000FEE  
                                                  _PORTAbits 000F80  
                                                  _PORTBbits 000F81  
                                                  _PORTCbits 000F82  
                                                  _PORTEbits 000F84  
                                    Print_To_LCD@currentChar 006E  
                                             __end_of_LCDstr 061D  
                                             __end_of_Clear1 0615  
                                             __end_of_Clear2 060B  
                                             __end_of___wmul 0D12  
                                              __pidataCOMRAM 0C44  
                                        start_initialization 0B4A  
                                                __end_of_AND 0BF6  
                                                __end_of_NOT 0C44  
                                                __end_of_SUB 0844  
                                                   ??___wmul 006F  
                                                __pdataBANK0 0080  
                                                __pbssCOMRAM 0047  
                                       __end_of_Print_To_LCD 0AC6  
                                                   ?___awdiv 006B  
                                                   ?___awmod 006B  
                                                __smallconst 0600  
                                           ??_Initialize_LCD 006B  
                                           ??_Initialize_PIC 0070  
                                             ___wmul@product 006F  
                                          ___wmul@multiplier 006B  
                                                   _Bdecimal 004B  
                                                   _Cdecimal 0049  
                                                  copy_data0 0B5E  
                                                  copy_data1 0B7E  
                                      Initialize_LCD@tempPtr 006D  
                                                   __Hrparam 0000  
                                                   __Lrparam 0000  
                                           __size_of___awdiv 0098  
                                           __size_of___awmod 0084  
                                      __size_of_Print_To_LCD 0088  
                                                   __ptext10 0A3E  
                                              __size_of_MULT 00D2  
                                              __size_of_main 0122  
                                               _Print_To_LCD 0A3E  
                                                   _mult_lcd 009E  
