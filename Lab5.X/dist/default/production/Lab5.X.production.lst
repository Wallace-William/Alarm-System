

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Apr 10 15:10:19 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.44
    38                           ; Generated 14/09/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F452 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataBANK0
    73  001B26                     __pidataBANK0:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _Str_Test
    77  001B26  80                 	db	128
    78  001B27  49                 	db	73
    79  001B28  74                 	db	116
    80  001B29  20                 	db	32
    81  001B2A  57                 	db	87
    82  001B2B  6F                 	db	111
    83  001B2C  72                 	db	114
    84  001B2D  6B                 	db	107
    85  001B2E  73                 	db	115
    86  001B2F  00                 	db	0
    87                           
    88                           ;initializer for _Str_2
    89  001B30  C0                 	db	192
    90  001B31  20                 	db	32
    91  001B32  20                 	db	32
    92  001B33  20                 	db	32
    93  001B34  20                 	db	32
    94  001B35  20                 	db	32
    95  001B36  20                 	db	32
    96  001B37  20                 	db	32
    97  001B38  20                 	db	32
    98  001B39  00                 	db	0
    99                           
   100                           ;initializer for _Str_1
   101  001B3A  80                 	db	128
   102  001B3B  20                 	db	32
   103  001B3C  20                 	db	32
   104  001B3D  20                 	db	32
   105  001B3E  20                 	db	32
   106  001B3F  20                 	db	32
   107  001B40  20                 	db	32
   108  001B41  20                 	db	32
   109  001B42  20                 	db	32
   110  001B43  00                 	db	0
   111                           
   112                           	psect	smallconst
   113  000600                     __psmallconst:
   114                           	opt stack 0
   115  000600  00                 	db	0
   116  000601                     sin@coeff_a:
   117                           	opt stack 0
   118  000601  F4                 	db	244
   119  000602  4A                 	db	74
   120  000603  48                 	db	72
   121  000604  95                 	db	149
   122  000605  95                 	db	149
   123  000606  C7                 	db	199
   124  000607  C1                 	db	193
   125  000608  DC                 	db	220
   126  000609  45                 	db	69
   127  00060A  DC                 	db	220
   128  00060B  6D                 	db	109
   129  00060C  C3                 	db	195
   130  00060D  B3                 	db	179
   131  00060E  33                 	db	51
   132  00060F  40                 	db	64
   133  000610                     __end_ofsin@coeff_a:
   134                           	opt stack 0
   135  000610                     sin@coeff_b:
   136                           	opt stack 0
   137  000610  34                 	db	52
   138  000611  01                 	db	1
   139  000612  48                 	db	72
   140  000613  9D                 	db	157
   141  000614  B0                 	db	176
   142  000615  45                 	db	69
   143  000616  00                 	db	0
   144  000617  DA                 	db	218
   145  000618  42                 	db	66
   146  000619  00                 	db	0
   147  00061A  80                 	db	128
   148  00061B  3F                 	db	63
   149  00061C                     __end_ofsin@coeff_b:
   150                           	opt stack 0
   151  00061C                     _Clear2:
   152                           	opt stack 0
   153  00061C  C0                 	db	192
   154  00061D  20                 	db	32
   155  00061E  20                 	db	32
   156  00061F  20                 	db	32
   157  000620  20                 	db	32
   158  000621  20                 	db	32
   159  000622  20                 	db	32
   160  000623  20                 	db	32
   161  000624  20                 	db	32
   162  000625  00                 	db	0
   163  000626                     __end_of_Clear2:
   164                           	opt stack 0
   165  000626                     _Clear1:
   166                           	opt stack 0
   167  000626  80                 	db	128
   168  000627  20                 	db	32
   169  000628  20                 	db	32
   170  000629  20                 	db	32
   171  00062A  20                 	db	32
   172  00062B  20                 	db	32
   173  00062C  20                 	db	32
   174  00062D  20                 	db	32
   175  00062E  20                 	db	32
   176  00062F  00                 	db	0
   177  000630                     __end_of_Clear1:
   178                           	opt stack 0
   179  000630                     _LCDstr:
   180                           	opt stack 0
   181  000630  33                 	db	51
   182  000631  32                 	db	50
   183  000632  28                 	db	40
   184  000633  01                 	db	1
   185  000634  0C                 	db	12
   186  000635  06                 	db	6
   187  000636  00                 	db	0
   188  000637  00                 	db	0
   189  000638                     __end_of_LCDstr:
   190                           	opt stack 0
   191  0000                     _PORTD	set	3971
   192  0000                     _PORTEbits	set	3972
   193  0000                     _PORTAbits	set	3968
   194  0000                     _PORTA	set	3968
   195  0000                     _TRISE	set	3990
   196  0000                     _TRISD	set	3989
   197  0000                     _TRISC	set	3988
   198  0000                     _TRISB	set	3987
   199  0000                     _TRISA	set	3986
   200  0000                     _SSPSTATbits	set	4039
   201  0000                     _SSPBUF	set	4041
   202  0000                     _PORTCbits	set	3970
   203  0000                     _ADRESH	set	4036
   204  0000                     _ADRESL	set	4035
   205  0000                     _ADCON0bits	set	4034
   206  0000                     _ADCON1	set	4033
   207  0000                     _ADCON0	set	4034
   208  0000                     _SSPCON1	set	4038
   209  0000                     _SSPSTAT	set	4039
   210  0000                     _TRISCbits	set	3988
   211  0000                     _TRISAbits	set	3986
   212  0000                     _TRISEbits	set	3990
   213                           
   214                           ; #config settings
   215  000638  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  001A36                     __pcinit:
   219                           	opt stack 0
   220  001A36                     start_initialization:
   221                           	opt stack 0
   222  001A36                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (30 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  001A36  0E26               	movlw	low __pidataBANK0
   228  001A38  6EF6               	movwf	tblptrl,c
   229  001A3A  0E1B               	movlw	high __pidataBANK0
   230  001A3C  6EF7               	movwf	tblptrh,c
   231  001A3E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  001A40  6EF8               	movwf	tblptru,c
   233  001A42  EE00  F080         	lfsr	0,__pdataBANK0
   234  001A46  EE10 F01E          	lfsr	1,30
   235  001A4A                     copy_data0:
   236  001A4A  0009               	tblrd		*+
   237  001A4C  CFF5 FFEE          	movff	tablat,postinc0
   238  001A50  50E5               	movf	postdec1,w,c
   239  001A52  50E1               	movf	fsr1l,w,c
   240  001A54  E1FA               	bnz	copy_data0
   241                           
   242                           ; Clear objects allocated to BANK0 (24 bytes)
   243  001A56  EE00  F09E         	lfsr	0,__pbssBANK0
   244  001A5A  0E18               	movlw	24
   245  001A5C                     clear_0:
   246  001A5C  6AEE               	clrf	postinc0,c
   247  001A5E  06E8               	decf	wreg,f,c
   248  001A60  E1FD               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to COMRAM (39 bytes)
   251  001A62  EE00  F057         	lfsr	0,__pbssCOMRAM
   252  001A66  0E27               	movlw	39
   253  001A68                     clear_1:
   254  001A68  6AEE               	clrf	postinc0,c
   255  001A6A  06E8               	decf	wreg,f,c
   256  001A6C  E1FD               	bnz	clear_1
   257  001A6E                     end_of_initialization:
   258                           	opt stack 0
   259  001A6E                     __end_of__initialization:
   260                           	opt stack 0
   261  001A6E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  001A70  6EF8               	movwf	tblptru,c
   263  001A72  0100               	movlb	0
   264  001A74  EF3C  F00D         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	bssCOMRAM
   275  000057                     __pbssCOMRAM:
   276                           	opt stack 0
   277  000057                     _hund:
   278                           	opt stack 0
   279  000057                     	ds	4
   280  00005B                     _voltage_5k:
   281                           	opt stack 0
   282  00005B                     	ds	4
   283  00005F                     _voltage_ext:
   284                           	opt stack 0
   285  00005F                     	ds	4
   286  000063                     _voltage:
   287                           	opt stack 0
   288  000063                     	ds	4
   289  000067                     _decimal:
   290                           	opt stack 0
   291  000067                     	ds	4
   292  00006B                     _time:
   293                           	opt stack 0
   294  00006B                     	ds	3
   295  00006E                     _dataByte:
   296                           	opt stack 0
   297  00006E                     	ds	3
   298  000071                     _errno:
   299                           	opt stack 0
   300  000071                     	ds	2
   301  000073                     _fullAD:
   302                           	opt stack 0
   303  000073                     	ds	2
   304  000075                     _adHigh_5k:
   305                           	opt stack 0
   306  000075                     	ds	2
   307  000077                     _adLow_5k:
   308                           	opt stack 0
   309  000077                     	ds	2
   310  000079                     _adHigh:
   311                           	opt stack 0
   312  000079                     	ds	2
   313  00007B                     _adLow:
   314                           	opt stack 0
   315  00007B                     	ds	2
   316  00007D                     _controlByte:
   317                           	opt stack 0
   318  00007D                     	ds	1
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec1	equ	0xFE5
   326                           fsr1l	equ	0xFE1
   327                           
   328                           	psect	bssBANK0
   329  00009E                     __pbssBANK0:
   330                           	opt stack 0
   331  00009E                     _rem_1:
   332                           	opt stack 0
   333  00009E                     	ds	4
   334  0000A2                     _tens_1:
   335                           	opt stack 0
   336  0000A2                     	ds	4
   337  0000A6                     _rem:
   338                           	opt stack 0
   339  0000A6                     	ds	4
   340  0000AA                     _tens:
   341                           	opt stack 0
   342  0000AA                     	ds	4
   343  0000AE                     _decimal_5k:
   344                           	opt stack 0
   345  0000AE                     	ds	4
   346  0000B2                     _voltage_int:
   347                           	opt stack 0
   348  0000B2                     	ds	4
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           postdec1	equ	0xFE5
   356                           fsr1l	equ	0xFE1
   357                           
   358                           	psect	dataBANK0
   359  000080                     __pdataBANK0:
   360                           	opt stack 0
   361  000080                     _Str_Test:
   362                           	opt stack 0
   363  000080                     	ds	10
   364  00008A                     _Str_2:
   365                           	opt stack 0
   366  00008A                     	ds	10
   367  000094                     _Str_1:
   368                           	opt stack 0
   369  000094                     	ds	10
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           postdec1	equ	0xFE5
   377                           fsr1l	equ	0xFE1
   378                           
   379                           	psect	cstackCOMRAM
   380  000001                     __pcstackCOMRAM:
   381                           	opt stack 0
   382  000001                     ??_Initialize_LCD:
   383  000001                     ?___wmul:
   384                           	opt stack 0
   385  000001                     ?___ftpack:
   386                           	opt stack 0
   387  000001                     ?___ftneg:
   388                           	opt stack 0
   389  000001                     ?___lmul:
   390                           	opt stack 0
   391  000001                     ?___almod:
   392                           	opt stack 0
   393  000001                     ?___fttol:
   394                           	opt stack 0
   395  000001                     Print_To_LCD@tempPtr:
   396                           	opt stack 0
   397  000001                     ___wmul@multiplier:
   398                           	opt stack 0
   399  000001                     ___ftpack@arg:
   400                           	opt stack 0
   401  000001                     ___ftge@ff1:
   402                           	opt stack 0
   403  000001                     ___ftneg@f1:
   404                           	opt stack 0
   405  000001                     ___fttol@f1:
   406                           	opt stack 0
   407  000001                     frexp@value:
   408                           	opt stack 0
   409  000001                     ___lmul@multiplier:
   410                           	opt stack 0
   411  000001                     ___almod@dividend:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x0
   415  000001                     	ds	2
   416  000003                     ??_Print_To_LCD:
   417  000003                     Initialize_LCD@tempPtr:
   418                           	opt stack 0
   419  000003                     ___wmul@multiplicand:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x2
   423  000003                     	ds	1
   424  000004                     Print_To_LCD@currentChar:
   425                           	opt stack 0
   426  000004                     ___ftpack@exp:
   427                           	opt stack 0
   428  000004                     frexp@eptr:
   429                           	opt stack 0
   430  000004                     ___ftge@ff2:
   431                           	opt stack 0
   432                           
   433                           ; 3 bytes @ 0x3
   434  000004                     	ds	1
   435  000005                     ??___fttol:
   436  000005                     Initialize_LCD@currentChar:
   437                           	opt stack 0
   438  000005                     ___ftpack@sign:
   439                           	opt stack 0
   440  000005                     ___wmul@product:
   441                           	opt stack 0
   442  000005                     ___lmul@multiplicand:
   443                           	opt stack 0
   444  000005                     ___almod@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x4
   448  000005                     	ds	1
   449  000006                     ??___ftpack:
   450  000006                     ??_frexp:
   451                           
   452                           ; 1 bytes @ 0x5
   453  000006                     	ds	1
   454  000007                     ??___ftge:
   455                           
   456                           ; 1 bytes @ 0x6
   457  000007                     	ds	2
   458  000009                     ?___ftadd:
   459                           	opt stack 0
   460  000009                     ___almod@counter:
   461                           	opt stack 0
   462  000009                     ___ftadd@f1:
   463                           	opt stack 0
   464  000009                     ___lmul@product:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x8
   468  000009                     	ds	1
   469  00000A                     ___almod@sign:
   470                           	opt stack 0
   471  00000A                     ___fttol@sign1:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x9
   475  00000A                     	ds	1
   476  00000B                     ___fttol@lval:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0xA
   480  00000B                     	ds	1
   481  00000C                     ___ftadd@f2:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0xB
   485  00000C                     	ds	1
   486  00000D                     ?___aldiv:
   487                           	opt stack 0
   488  00000D                     ___aldiv@dividend:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0xC
   492  00000D                     	ds	2
   493  00000F                     ??___ftadd:
   494  00000F                     ___fttol@exp1:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0xE
   498  00000F                     	ds	1
   499  000010                     ?___altoft:
   500                           	opt stack 0
   501  000010                     ___altoft@c:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0xF
   505  000010                     	ds	1
   506  000011                     ___aldiv@divisor:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x10
   510  000011                     	ds	1
   511  000012                     ___ftadd@sign:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x11
   515  000012                     	ds	1
   516  000013                     ___ftadd@exp2:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x12
   520  000013                     	ds	1
   521  000014                     ??___altoft:
   522  000014                     ___ftadd@exp1:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x13
   526  000014                     	ds	1
   527  000015                     ?___ftdiv:
   528                           	opt stack 0
   529  000015                     ___aldiv@counter:
   530                           	opt stack 0
   531  000015                     ___ftdiv@f1:
   532                           	opt stack 0
   533                           
   534                           ; 3 bytes @ 0x14
   535  000015                     	ds	1
   536  000016                     ___aldiv@sign:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x15
   540  000016                     	ds	1
   541  000017                     ___aldiv@quotient:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0x16
   545  000017                     	ds	1
   546  000018                     ___altoft@exp:
   547                           	opt stack 0
   548  000018                     ___ftdiv@f2:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x17
   552  000018                     	ds	1
   553  000019                     ___altoft@sign:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x18
   557  000019                     	ds	1
   558  00001A                     ?_floor:
   559                           	opt stack 0
   560  00001A                     floor@x:
   561                           	opt stack 0
   562                           
   563                           ; 3 bytes @ 0x19
   564  00001A                     	ds	1
   565  00001B                     ??___ftdiv:
   566                           
   567                           ; 1 bytes @ 0x1A
   568  00001B                     	ds	2
   569  00001D                     floor@i:
   570                           	opt stack 0
   571                           
   572                           ; 3 bytes @ 0x1C
   573  00001D                     	ds	1
   574  00001E                     ___ftdiv@cntr:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x1D
   578  00001E                     	ds	1
   579  00001F                     ___ftdiv@f3:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x1E
   583  00001F                     	ds	1
   584  000020                     floor@expon:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x1F
   588  000020                     	ds	2
   589  000022                     ?___ftsub:
   590                           	opt stack 0
   591  000022                     ___ftdiv@exp:
   592                           	opt stack 0
   593  000022                     ___ftsub@f1:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x21
   597  000022                     	ds	1
   598  000023                     ___ftdiv@sign:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x22
   602  000023                     	ds	1
   603  000024                     ?___ftmul:
   604                           	opt stack 0
   605  000024                     ___ftmul@f1:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x23
   609  000024                     	ds	1
   610  000025                     ___ftsub@f2:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x24
   614  000025                     	ds	2
   615  000027                     ___ftmul@f2:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x26
   619  000027                     	ds	1
   620  000028                     
   621                           ; 1 bytes @ 0x27
   622  000028                     	ds	2
   623  00002A                     ??___ftmul:
   624                           
   625                           ; 1 bytes @ 0x29
   626  00002A                     	ds	3
   627  00002D                     ___ftmul@exp:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x2C
   631  00002D                     	ds	1
   632  00002E                     ___ftmul@f3_as_product:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x2D
   636  00002E                     	ds	3
   637  000031                     ___ftmul@cntr:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x30
   641  000031                     	ds	1
   642  000032                     ___ftmul@sign:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x31
   646  000032                     	ds	1
   647  000033                     ?_eval_poly:
   648                           	opt stack 0
   649  000033                     eval_poly@x:
   650                           	opt stack 0
   651                           
   652                           ; 3 bytes @ 0x32
   653  000033                     	ds	3
   654  000036                     eval_poly@d:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x35
   658  000036                     	ds	2
   659  000038                     eval_poly@n:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x37
   663  000038                     	ds	2
   664  00003A                     ??_eval_poly:
   665                           
   666                           ; 1 bytes @ 0x39
   667  00003A                     	ds	2
   668  00003C                     eval_poly@res:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x3B
   672  00003C                     	ds	3
   673  00003F                     ?_sin:
   674                           	opt stack 0
   675  00003F                     sin@f:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x3E
   679  00003F                     	ds	3
   680  000042                     sin@y:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x41
   684  000042                     	ds	3
   685  000045                     _sin$1276:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x44
   689  000045                     	ds	3
   690  000048                     sin@x2:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x47
   694  000048                     	ds	3
   695  00004B                     sin@sgn:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x4A
   699  00004B                     	ds	1
   700  00004C                     ??_DAC:
   701                           
   702                           ; 1 bytes @ 0x4B
   703  00004C                     	ds	2
   704  00004E                     _DAC$1273:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x4D
   708  00004E                     	ds	3
   709  000051                     _DAC$1274:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x50
   713  000051                     	ds	3
   714  000054                     _DAC$1275:
   715                           	opt stack 0
   716                           
   717                           ; 3 bytes @ 0x53
   718  000054                     	ds	3
   719  000057                     tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1l	equ	0xFE1
   727                           
   728                           ; 1 bytes @ 0x56
   729 ;;
   730 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   731 ;;
   732 ;; *************** function _main *****************
   733 ;; Defined at:
   734 ;;		line 67 in file "Lab5.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         0       0       0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0
   751 ;;      Totals:         0       0       0       0       0       0       0
   752 ;;Total ram usage:        0 bytes
   753 ;; Hardware stack levels required when called:    5
   754 ;; This function calls:
   755 ;;		_DAC
   756 ;;		_Initialize_PIC
   757 ;;		_Print_To_LCD
   758 ;; This function is called by:
   759 ;;		Startup code after reset
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text0
   764  001A78                     __ptext0:
   765                           	opt stack 0
   766  001A78                     _main:
   767                           	opt stack 0
   768  001A78  FFFF               	dw	65535	; assembler added errata NOP
   769                           
   770                           ;Lab5.c: 69: Initialize_PIC();
   771                           
   772                           ;incstack = 0
   773  001A7A  EC53  F00D         	call	_Initialize_PIC	;wreg free
   774                           
   775                           ;Lab5.c: 70: Print_To_LCD(Clear1);
   776  001A7E  0E26               	movlw	low _Clear1
   777  001A80  6E01               	movwf	Print_To_LCD@tempPtr,c
   778  001A82  0E06               	movlw	high _Clear1
   779  001A84  6E02               	movwf	Print_To_LCD@tempPtr+1,c
   780  001A86  EC03  F00C         	call	_Print_To_LCD	;wreg free
   781                           
   782                           ;Lab5.c: 71: Print_To_LCD(Clear2);
   783  001A8A  0E1C               	movlw	low _Clear2
   784  001A8C  6E01               	movwf	Print_To_LCD@tempPtr,c
   785  001A8E  0E06               	movlw	high _Clear2
   786  001A90  6E02               	movwf	Print_To_LCD@tempPtr+1,c
   787  001A92  EC03  F00C         	call	_Print_To_LCD	;wreg free
   788                           
   789                           ;Lab5.c: 74: TRISEbits.RE2 = 1;
   790  001A96  8496               	bsf	3990,2,c	;volatile
   791                           
   792                           ;Lab5.c: 75: TRISAbits.TRISA5 = 1;
   793  001A98  8A92               	bsf	3986,5,c	;volatile
   794                           
   795                           ;Lab5.c: 77: TRISCbits.RC5 = 0;
   796  001A9A  9A94               	bcf	3988,5,c	;volatile
   797                           
   798                           ;Lab5.c: 78: TRISCbits.RC0 = 0;
   799  001A9C  9094               	bcf	3988,0,c	;volatile
   800  001A9E  FFFF               	dw	65535	; assembler added errata NOP
   801                           
   802                           ;Lab5.c: 83: {
   803                           ;Lab5.c: 84: DAC();
   804  001AA0  EC1D  F003         	call	_DAC	;wreg free
   805  001AA4  D7FC               	goto	l111
   806  001AA6                     __end_of_main:
   807                           	opt stack 0
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           postdec1	equ	0xFE5
   815                           fsr1l	equ	0xFE1
   816                           
   817 ;; *************** function _Initialize_PIC *****************
   818 ;; Defined at:
   819 ;;		line 207 in file "Lab5.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   833 ;;      Params:         0       0       0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    1
   840 ;; This function calls:
   841 ;;		_Initialize_LCD
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text1
   848  001AA6                     __ptext1:
   849                           	opt stack 0
   850  001AA6                     _Initialize_PIC:
   851                           	opt stack 0
   852  001AA6  FFFF               	dw	65535	; assembler added errata NOP
   853                           
   854                           ;Lab5.c: 211: ADCON1 = 0b10001110;
   855                           
   856                           ;incstack = 0
   857  001AA8  0E8E               	movlw	142
   858  001AAA  6EC1               	movwf	4033,c	;volatile
   859                           
   860                           ;Lab5.c: 212: TRISA = 0b11100001;
   861  001AAC  0EE1               	movlw	225
   862  001AAE  6E92               	movwf	3986,c	;volatile
   863                           
   864                           ;Lab5.c: 213: TRISB = 0b11011100;
   865  001AB0  0EDC               	movlw	220
   866  001AB2  6E93               	movwf	3987,c	;volatile
   867                           
   868                           ;Lab5.c: 214: TRISC = 0b11010000;
   869  001AB4  0ED0               	movlw	208
   870  001AB6  6E94               	movwf	3988,c	;volatile
   871                           
   872                           ;Lab5.c: 215: TRISD = 0b00001111;
   873  001AB8  0E0F               	movlw	15
   874  001ABA  6E95               	movwf	3989,c	;volatile
   875                           
   876                           ;Lab5.c: 216: TRISE = 0b00000000;
   877  001ABC  0E00               	movlw	0
   878  001ABE  6E96               	movwf	3990,c	;volatile
   879                           
   880                           ;Lab5.c: 217: PORTA = 0b00010000;
   881  001AC0  0E10               	movlw	16
   882  001AC2  6E80               	movwf	3968,c	;volatile
   883                           
   884                           ;Lab5.c: 218: PORTAbits.RA3 = 0;
   885  001AC4  9680               	bcf	3968,3,c	;volatile
   886                           
   887                           ;Lab5.c: 219: PORTAbits.RA2 = 0;
   888  001AC6  9480               	bcf	3968,2,c	;volatile
   889                           
   890                           ;Lab5.c: 220: PORTAbits.RA1 = 0;
   891  001AC8  9280               	bcf	3968,1,c	;volatile
   892                           
   893                           ;Lab5.c: 221: Initialize_LCD();
   894  001ACA  ECBB  F00B         	call	_Initialize_LCD	;wreg free
   895  001ACE  0012               	return		;funcret
   896  001AD0  FFFF               	dw	65535	; errata NOP
   897  001AD2                     __end_of_Initialize_PIC:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           fsr1l	equ	0xFE1
   907                           
   908 ;; *************** function _Initialize_LCD *****************
   909 ;; Defined at:
   910 ;;		line 232 in file "Lab5.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  tempPtr         2    2[COMRAM] PTR unsigned char 
   915 ;;		 -> LCDstr(8), 
   916 ;;  currentChar     1    4[COMRAM] unsigned char 
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   926 ;;      Params:         0       0       0       0       0       0       0
   927 ;;      Locals:         3       0       0       0       0       0       0
   928 ;;      Temps:          2       0       0       0       0       0       0
   929 ;;      Totals:         5       0       0       0       0       0       0
   930 ;;Total ram usage:        5 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_Initialize_PIC
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text2
   940  001776                     __ptext2:
   941                           	opt stack 0
   942  001776                     _Initialize_LCD:
   943                           	opt stack 0
   944  001776  FFFF               	dw	65535	; assembler added errata NOP
   945                           
   946                           ;Lab5.c: 234: char currentChar;
   947                           ;Lab5.c: 235: char *tempPtr;
   948                           ;Lab5.c: 237: _delay((unsigned long)((100)*(10000000/4000.0)));
   949                           
   950                           ;incstack = 0
   951  001778  0E01               	movlw	1
   952  00177A  6E02               	movwf	(??_Initialize_LCD+1)& (0+255),c
   953  00177C  0EF4               	movlw	244
   954  00177E  6E01               	movwf	??_Initialize_LCD& (0+255),c
   955  001780  0EA8               	movlw	168
   956  001782                     u1847:
   957  001782  FFFF               	dw	65535	; errata NOP
   958  001784  2EE8               	decfsz	wreg,f,c
   959  001786  D7FD               	bra	u1847
   960  001788  2E01               	decfsz	??_Initialize_LCD& (0+255),f,c
   961  00178A  D7FB               	bra	u1847
   962  00178C  2E02               	decfsz	(??_Initialize_LCD+1)& (0+255),f,c
   963  00178E  D7F9               	bra	u1847
   964  001790  D000               	nop2	
   965                           
   966                           ;Lab5.c: 239: PORTEbits.RE0 = 0;
   967  001792  9084               	bcf	3972,0,c	;volatile
   968                           
   969                           ;Lab5.c: 240: tempPtr = LCDstr;
   970  001794  0E30               	movlw	low _LCDstr
   971  001796  6E03               	movwf	Initialize_LCD@tempPtr,c
   972  001798  0E06               	movlw	high _LCDstr
   973  00179A  6E04               	movwf	Initialize_LCD@tempPtr+1,c
   974                           
   975                           ;Lab5.c: 242: while (*tempPtr)
   976  00179C  D026               	goto	l137
   977  00179E  FFFF               	dw	65535	; assembler added errata NOP
   978                           
   979                           ;Lab5.c: 243: {
   980                           ;Lab5.c: 244: currentChar = *tempPtr;
   981  0017A0  C003  FFF6         	movff	Initialize_LCD@tempPtr,tblptrl
   982  0017A4  C004  FFF7         	movff	Initialize_LCD@tempPtr+1,tblptrh
   983  0017A8                     	if	0	;tblptru may be non-zero
   984  0017A8                     	endif
   985  0017A8                     	if	0	;tblptru may be non-zero
   986  0017A8                     	endif
   987  0017A8  0008               	tblrd		*
   988  0017AA  FFFF               	dw	65535	; errata NOP
   989  0017AC  CFF5 F005          	movff	tablat,Initialize_LCD@currentChar
   990                           
   991                           ;Lab5.c: 245: PORTEbits.RE1 = 1;
   992  0017B0  8284               	bsf	3972,1,c	;volatile
   993                           
   994                           ;Lab5.c: 246: PORTD = currentChar;
   995  0017B2  C005  FF83         	movff	Initialize_LCD@currentChar,3971	;volatile
   996                           
   997                           ;Lab5.c: 247: PORTEbits.RE1 = 0;
   998  0017B6  9284               	bcf	3972,1,c	;volatile
   999                           
  1000                           ;Lab5.c: 248: _delay((unsigned long)((10)*(10000000/4000.0)));
  1001  0017B8  0E19               	movlw	25
  1002  0017BA  6E01               	movwf	??_Initialize_LCD& (0+255),c
  1003  0017BC  0E5D               	movlw	93
  1004  0017BE                     u1857:
  1005  0017BE  FFFF               	dw	65535	; errata NOP
  1006  0017C0  2EE8               	decfsz	wreg,f,c
  1007  0017C2  D7FD               	bra	u1857
  1008  0017C4  2E01               	decfsz	??_Initialize_LCD& (0+255),f,c
  1009  0017C6  D7FB               	bra	u1857
  1010                           
  1011                           ;Lab5.c: 249: currentChar <<= 4;
  1012  0017C8  3A05               	swapf	Initialize_LCD@currentChar,f,c
  1013  0017CA  0EF0               	movlw	240
  1014  0017CC  1605               	andwf	Initialize_LCD@currentChar,f,c
  1015                           
  1016                           ;Lab5.c: 250: PORTEbits.RE1 = 1;
  1017  0017CE  8284               	bsf	3972,1,c	;volatile
  1018                           
  1019                           ;Lab5.c: 251: PORTD = currentChar;
  1020  0017D0  C005  FF83         	movff	Initialize_LCD@currentChar,3971	;volatile
  1021                           
  1022                           ;Lab5.c: 252: PORTEbits.RE1 = 0;
  1023  0017D4  9284               	bcf	3972,1,c	;volatile
  1024                           
  1025                           ;Lab5.c: 253: _delay((unsigned long)((10)*(10000000/4000.0)));
  1026  0017D6  0E19               	movlw	25
  1027  0017D8  6E01               	movwf	??_Initialize_LCD& (0+255),c
  1028  0017DA  0E5D               	movlw	93
  1029  0017DC                     u1867:
  1030  0017DC  FFFF               	dw	65535	; errata NOP
  1031  0017DE  2EE8               	decfsz	wreg,f,c
  1032  0017E0  D7FD               	bra	u1867
  1033  0017E2  2E01               	decfsz	??_Initialize_LCD& (0+255),f,c
  1034  0017E4  D7FB               	bra	u1867
  1035                           
  1036                           ;Lab5.c: 254: tempPtr++;
  1037  0017E6  4A03               	infsnz	Initialize_LCD@tempPtr,f,c
  1038  0017E8  2A04               	incf	Initialize_LCD@tempPtr+1,f,c
  1039  0017EA                     l137:
  1040  0017EA  FFFF               	dw	65535	; assembler added errata NOP
  1041  0017EC  C003  FFF6         	movff	Initialize_LCD@tempPtr,tblptrl
  1042  0017F0  C004  FFF7         	movff	Initialize_LCD@tempPtr+1,tblptrh
  1043  0017F4                     	if	0	;tblptru may be non-zero
  1044  0017F4                     	endif
  1045  0017F4                     	if	0	;tblptru may be non-zero
  1046  0017F4                     	endif
  1047  0017F4  0008               	tblrd		*
  1048  0017F6  FFFF               	dw	65535	; errata NOP
  1049  0017F8  50F5               	movf	tablat,w,c
  1050  0017FA  0900               	iorlw	0
  1051  0017FC  B4D8               	btfsc	status,2,c
  1052  0017FE  0012               	return		;funcret
  1053  001800  FFFF               	dw	65535	; assembler added errata NOP
  1054  001802  D7CD               	goto	l138
  1055  001804  FFFF               	dw	65535	; errata NOP
  1056  001806                     __end_of_Initialize_LCD:
  1057                           	opt stack 0
  1058                           tblptru	equ	0xFF8
  1059                           tblptrh	equ	0xFF7
  1060                           tblptrl	equ	0xFF6
  1061                           tablat	equ	0xFF5
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           postdec1	equ	0xFE5
  1065                           fsr1l	equ	0xFE1
  1066                           status	equ	0xFD8
  1067                           
  1068 ;; *************** function _DAC *****************
  1069 ;; Defined at:
  1070 ;;		line 88 in file "Lab5.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1084 ;;      Params:         0       0       0       0       0       0       0
  1085 ;;      Locals:         9       0       0       0       0       0       0
  1086 ;;      Temps:          2       0       0       0       0       0       0
  1087 ;;      Totals:        11       0       0       0       0       0       0
  1088 ;;Total ram usage:       11 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    4
  1091 ;; This function calls:
  1092 ;;		_Print_To_LCD
  1093 ;;		___aldiv
  1094 ;;		___almod
  1095 ;;		___altoft
  1096 ;;		___ftadd
  1097 ;;		___ftdiv
  1098 ;;		___ftge
  1099 ;;		___ftmul
  1100 ;;		___fttol
  1101 ;;		___lmul
  1102 ;;		_sin
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108                           	psect	text3
  1109  00063A                     __ptext3:
  1110                           	opt stack 0
  1111  00063A                     _DAC:
  1112                           	opt stack 0
  1113  00063A  FFFF               	dw	65535	; assembler added errata NOP
  1114                           
  1115                           ;Lab5.c: 91: SSPSTAT = 0b11000000;
  1116                           
  1117                           ;incstack = 0
  1118  00063C  0EC0               	movlw	192
  1119  00063E  6EC7               	movwf	4039,c	;volatile
  1120                           
  1121                           ;Lab5.c: 92: SSPCON1 = 0b00100000;
  1122  000640  0E20               	movlw	32
  1123  000642  6EC6               	movwf	4038,c	;volatile
  1124                           
  1125                           ;Lab5.c: 94: ADCON0 = 0b00100001;
  1126  000644  0E21               	movlw	33
  1127  000646  6EC2               	movwf	4034,c	;volatile
  1128                           
  1129                           ;Lab5.c: 95: ADCON1 = 0b11000000;
  1130  000648  0EC0               	movlw	192
  1131  00064A  6EC1               	movwf	4033,c	;volatile
  1132                           
  1133                           ;Lab5.c: 97: _delay((unsigned long)((10)*(10000000/4000.0)));
  1134  00064C  0E19               	movlw	25
  1135  00064E  6E4C               	movwf	??_DAC& (0+255),c
  1136  000650  0E5D               	movlw	93
  1137  000652                     u1877:
  1138  000652  FFFF               	dw	65535	; errata NOP
  1139  000654  2EE8               	decfsz	wreg,f,c
  1140  000656  D7FD               	bra	u1877
  1141  000658  2E4C               	decfsz	??_DAC& (0+255),f,c
  1142  00065A  D7FB               	bra	u1877
  1143                           
  1144                           ;Lab5.c: 98: ADCON0bits.GO = 1;
  1145  00065C  84C2               	bsf	4034,2,c	;volatile
  1146                           
  1147                           ;Lab5.c: 99: _delay((unsigned long)((10)*(10000000/4000.0)));
  1148  00065E  0E19               	movlw	25
  1149  000660  6E4C               	movwf	??_DAC& (0+255),c
  1150  000662  0E5D               	movlw	93
  1151  000664                     u1887:
  1152  000664  FFFF               	dw	65535	; errata NOP
  1153  000666  2EE8               	decfsz	wreg,f,c
  1154  000668  D7FD               	bra	u1887
  1155  00066A  2E4C               	decfsz	??_DAC& (0+255),f,c
  1156  00066C  D7FB               	bra	u1887
  1157  00066E  FFFF               	dw	65535	; assembler added errata NOP
  1158  000670  B4C2               	btfsc	4034,2,c	;volatile
  1159  000672  D7FD               	goto	l118
  1160                           
  1161                           ;Lab5.c: 103: adLow = ADRESL;
  1162  000674  CFC3 F07B          	movff	4035,_adLow	;volatile
  1163  000678  6A7C               	clrf	_adLow+1,c
  1164                           
  1165                           ;Lab5.c: 104: adHigh = ADRESH;
  1166  00067A  CFC4 F079          	movff	4036,_adHigh	;volatile
  1167  00067E  6A7A               	clrf	_adHigh+1,c
  1168                           
  1169                           ;Lab5.c: 106: adHigh = adHigh << 8;
  1170  000680  5079               	movf	_adHigh,w,c
  1171  000682  6E7A               	movwf	_adHigh+1,c
  1172  000684  6A79               	clrf	_adHigh,c
  1173                           
  1174                           ;Lab5.c: 108: decimal = adLow + adHigh;
  1175  000686  5079               	movf	_adHigh,w,c
  1176  000688  247B               	addwf	_adLow,w,c
  1177  00068A  6E4C               	movwf	??_DAC& (0+255),c
  1178  00068C  507A               	movf	_adHigh+1,w,c
  1179  00068E  207C               	addwfc	_adLow+1,w,c
  1180  000690  6E4D               	movwf	(??_DAC+1)& (0+255),c
  1181  000692  C04C  F067         	movff	??_DAC,_decimal
  1182  000696  C04D  F068         	movff	??_DAC+1,_decimal+1
  1183  00069A  6A69               	clrf	_decimal+2,c
  1184  00069C  6A6A               	clrf	_decimal+3,c
  1185                           
  1186                           ;Lab5.c: 110: voltage = (decimal*98)/1023+2;
  1187  00069E  C067  F001         	movff	_decimal,___lmul@multiplier
  1188  0006A2  C068  F002         	movff	_decimal+1,___lmul@multiplier+1
  1189  0006A6  C069  F003         	movff	_decimal+2,___lmul@multiplier+2
  1190  0006AA  C06A  F004         	movff	_decimal+3,___lmul@multiplier+3
  1191  0006AE  0E62               	movlw	98
  1192  0006B0  6E05               	movwf	___lmul@multiplicand,c
  1193  0006B2  0E00               	movlw	0
  1194  0006B4  6E06               	movwf	___lmul@multiplicand+1,c
  1195  0006B6  0E00               	movlw	0
  1196  0006B8  6E07               	movwf	___lmul@multiplicand+2,c
  1197  0006BA  0E00               	movlw	0
  1198  0006BC  6E08               	movwf	___lmul@multiplicand+3,c
  1199  0006BE  ECC9  F00C         	call	___lmul	;wreg free
  1200  0006C2  C001  F00D         	movff	?___lmul,___aldiv@dividend
  1201  0006C6  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  1202  0006CA  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  1203  0006CE  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  1204  0006D2  0EFF               	movlw	255
  1205  0006D4  6E11               	movwf	___aldiv@divisor,c
  1206  0006D6  0E03               	movlw	3
  1207  0006D8  6E12               	movwf	___aldiv@divisor+1,c
  1208  0006DA  0E00               	movlw	0
  1209  0006DC  6E13               	movwf	___aldiv@divisor+2,c
  1210  0006DE  0E00               	movlw	0
  1211  0006E0  6E14               	movwf	___aldiv@divisor+3,c
  1212  0006E2  EC3B  F00A         	call	___aldiv	;wreg free
  1213  0006E6  0E02               	movlw	2
  1214  0006E8  240D               	addwf	?___aldiv,w,c
  1215  0006EA  6E63               	movwf	_voltage,c
  1216  0006EC  0E00               	movlw	0
  1217  0006EE  200E               	addwfc	?___aldiv+1,w,c
  1218  0006F0  6E64               	movwf	_voltage+1,c
  1219  0006F2  0E00               	movlw	0
  1220  0006F4  200F               	addwfc	?___aldiv+2,w,c
  1221  0006F6  6E65               	movwf	_voltage+2,c
  1222  0006F8  0E00               	movlw	0
  1223  0006FA  2010               	addwfc	?___aldiv+3,w,c
  1224  0006FC  6E66               	movwf	_voltage+3,c
  1225                           
  1226                           ;Lab5.c: 111: voltage_int = voltage;
  1227  0006FE  C063  F0B2         	movff	_voltage,_voltage_int
  1228  000702  C064  F0B3         	movff	_voltage+1,_voltage_int+1
  1229  000706  C065  F0B4         	movff	_voltage+2,_voltage_int+2
  1230  00070A  C066  F0B5         	movff	_voltage+3,_voltage_int+3
  1231                           
  1232                           ;Lab5.c: 113: hund = voltage / 100;
  1233  00070E  C063  F00D         	movff	_voltage,___aldiv@dividend
  1234  000712  C064  F00E         	movff	_voltage+1,___aldiv@dividend+1
  1235  000716  C065  F00F         	movff	_voltage+2,___aldiv@dividend+2
  1236  00071A  C066  F010         	movff	_voltage+3,___aldiv@dividend+3
  1237  00071E  0E64               	movlw	100
  1238  000720  6E11               	movwf	___aldiv@divisor,c
  1239  000722  0E00               	movlw	0
  1240  000724  6E12               	movwf	___aldiv@divisor+1,c
  1241  000726  0E00               	movlw	0
  1242  000728  6E13               	movwf	___aldiv@divisor+2,c
  1243  00072A  0E00               	movlw	0
  1244  00072C  6E14               	movwf	___aldiv@divisor+3,c
  1245  00072E  EC3B  F00A         	call	___aldiv	;wreg free
  1246  000732  C00D  F057         	movff	?___aldiv,_hund
  1247  000736  C00E  F058         	movff	?___aldiv+1,_hund+1
  1248  00073A  C00F  F059         	movff	?___aldiv+2,_hund+2
  1249  00073E  C010  F05A         	movff	?___aldiv+3,_hund+3
  1250                           
  1251                           ;Lab5.c: 114: voltage -= hund*100;
  1252  000742  C057  F001         	movff	_hund,___lmul@multiplier
  1253  000746  C058  F002         	movff	_hund+1,___lmul@multiplier+1
  1254  00074A  C059  F003         	movff	_hund+2,___lmul@multiplier+2
  1255  00074E  C05A  F004         	movff	_hund+3,___lmul@multiplier+3
  1256  000752  0E64               	movlw	100
  1257  000754  6E05               	movwf	___lmul@multiplicand,c
  1258  000756  0E00               	movlw	0
  1259  000758  6E06               	movwf	___lmul@multiplicand+1,c
  1260  00075A  0E00               	movlw	0
  1261  00075C  6E07               	movwf	___lmul@multiplicand+2,c
  1262  00075E  0E00               	movlw	0
  1263  000760  6E08               	movwf	___lmul@multiplicand+3,c
  1264  000762  ECC9  F00C         	call	___lmul	;wreg free
  1265  000766  5001               	movf	?___lmul,w,c
  1266  000768  5E63               	subwf	_voltage,f,c
  1267  00076A  5002               	movf	?___lmul+1,w,c
  1268  00076C  5A64               	subwfb	_voltage+1,f,c
  1269  00076E  5003               	movf	?___lmul+2,w,c
  1270  000770  5A65               	subwfb	_voltage+2,f,c
  1271  000772  5004               	movf	?___lmul+3,w,c
  1272  000774  5A66               	subwfb	_voltage+3,f,c
  1273                           
  1274                           ;Lab5.c: 115: tens_1 = voltage / 10;
  1275  000776  C063  F00D         	movff	_voltage,___aldiv@dividend
  1276  00077A  C064  F00E         	movff	_voltage+1,___aldiv@dividend+1
  1277  00077E  C065  F00F         	movff	_voltage+2,___aldiv@dividend+2
  1278  000782  C066  F010         	movff	_voltage+3,___aldiv@dividend+3
  1279  000786  0E0A               	movlw	10
  1280  000788  6E11               	movwf	___aldiv@divisor,c
  1281  00078A  0E00               	movlw	0
  1282  00078C  6E12               	movwf	___aldiv@divisor+1,c
  1283  00078E  0E00               	movlw	0
  1284  000790  6E13               	movwf	___aldiv@divisor+2,c
  1285  000792  0E00               	movlw	0
  1286  000794  6E14               	movwf	___aldiv@divisor+3,c
  1287  000796  EC3B  F00A         	call	___aldiv	;wreg free
  1288  00079A  C00D  F0A2         	movff	?___aldiv,_tens_1
  1289  00079E  C00E  F0A3         	movff	?___aldiv+1,_tens_1+1
  1290  0007A2  C00F  F0A4         	movff	?___aldiv+2,_tens_1+2
  1291  0007A6  C010  F0A5         	movff	?___aldiv+3,_tens_1+3
  1292                           
  1293                           ;Lab5.c: 116: rem_1 = voltage % 10;
  1294  0007AA  C063  F001         	movff	_voltage,___almod@dividend
  1295  0007AE  C064  F002         	movff	_voltage+1,___almod@dividend+1
  1296  0007B2  C065  F003         	movff	_voltage+2,___almod@dividend+2
  1297  0007B6  C066  F004         	movff	_voltage+3,___almod@dividend+3
  1298  0007BA  0E0A               	movlw	10
  1299  0007BC  6E05               	movwf	___almod@divisor,c
  1300  0007BE  0E00               	movlw	0
  1301  0007C0  6E06               	movwf	___almod@divisor+1,c
  1302  0007C2  0E00               	movlw	0
  1303  0007C4  6E07               	movwf	___almod@divisor+2,c
  1304  0007C6  0E00               	movlw	0
  1305  0007C8  6E08               	movwf	___almod@divisor+3,c
  1306  0007CA  EC0D  F00B         	call	___almod	;wreg free
  1307  0007CE  C001  F09E         	movff	?___almod,_rem_1
  1308  0007D2  C002  F09F         	movff	?___almod+1,_rem_1+1
  1309  0007D6  C003  F0A0         	movff	?___almod+2,_rem_1+2
  1310  0007DA  C004  F0A1         	movff	?___almod+3,_rem_1+3
  1311                           
  1312                           ;Lab5.c: 118: hund += 48;
  1313  0007DE  0E30               	movlw	48
  1314  0007E0  2657               	addwf	_hund,f,c
  1315  0007E2  0E00               	movlw	0
  1316  0007E4  2258               	addwfc	_hund+1,f,c
  1317  0007E6  2259               	addwfc	_hund+2,f,c
  1318  0007E8  225A               	addwfc	_hund+3,f,c
  1319                           
  1320                           ;Lab5.c: 119: tens_1 += 48;
  1321  0007EA  0E30               	movlw	48
  1322  0007EC  0100               	movlb	0	; () banked
  1323  0007EE  27A2               	addwf	_tens_1& (0+255),f,b
  1324  0007F0  0E00               	movlw	0
  1325  0007F2  23A3               	addwfc	(_tens_1+1)& (0+255),f,b
  1326  0007F4  23A4               	addwfc	(_tens_1+2)& (0+255),f,b
  1327  0007F6  23A5               	addwfc	(_tens_1+3)& (0+255),f,b
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;Lab5.c: 120: rem_1 += 48;
  1331  0007F8  0E30               	movlw	48
  1332  0007FA  279E               	addwf	_rem_1& (0+255),f,b
  1333  0007FC  0E00               	movlw	0
  1334  0007FE  239F               	addwfc	(_rem_1+1)& (0+255),f,b
  1335  000800  23A0               	addwfc	(_rem_1+2)& (0+255),f,b
  1336  000802  23A1               	addwfc	(_rem_1+3)& (0+255),f,b
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;Lab5.c: 122: Str_2[1] = 0x46;
  1340  000804  0E46               	movlw	70
  1341  000806  6F8B               	movwf	(_Str_2+1)& (0+255),b
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;Lab5.c: 123: Str_2[2] = 0x52;
  1345  000808  0E52               	movlw	82
  1346  00080A  6F8C               	movwf	(_Str_2+2)& (0+255),b
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;Lab5.c: 124: Str_2[3] = 0x45;
  1350  00080C  0E45               	movlw	69
  1351  00080E  6F8D               	movwf	(_Str_2+3)& (0+255),b
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;Lab5.c: 125: Str_2[4] = 0x51;
  1355  000810  0E51               	movlw	81
  1356  000812  6F8E               	movwf	(_Str_2+4)& (0+255),b
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;Lab5.c: 126: Str_2[6] = hund;
  1360  000814  C057  F090         	movff	_hund,_Str_2+6
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;Lab5.c: 127: Str_2[7] = tens_1;
  1364  000818  C0A2  F091         	movff	_tens_1,_Str_2+7
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;Lab5.c: 128: Str_2[8] = rem_1;
  1368  00081C  C09E  F092         	movff	_rem_1,_Str_2+8
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;Lab5.c: 130: ADCON1 = 0b10001110;
  1372  000820  0E8E               	movlw	142
  1373  000822  6EC1               	movwf	4033,c	;volatile
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;Lab5.c: 131: Print_To_LCD(Str_2);
  1377  000824  0E8A               	movlw	low _Str_2
  1378  000826  6E01               	movwf	Print_To_LCD@tempPtr,c
  1379  000828  0E00               	movlw	high _Str_2
  1380  00082A  6E02               	movwf	Print_To_LCD@tempPtr+1,c
  1381  00082C  EC03  F00C         	call	_Print_To_LCD	;wreg free
  1382                           
  1383                           ;Lab5.c: 133: _delay((unsigned long)((10)*(10000000/4000.0)));
  1384  000830  0E19               	movlw	25
  1385  000832  6E4C               	movwf	??_DAC& (0+255),c
  1386  000834  0E5D               	movlw	93
  1387  000836                     u1897:
  1388  000836  FFFF               	dw	65535	; errata NOP
  1389  000838  2EE8               	decfsz	wreg,f,c
  1390  00083A  D7FD               	bra	u1897
  1391  00083C  2E4C               	decfsz	??_DAC& (0+255),f,c
  1392  00083E  D7FB               	bra	u1897
  1393                           
  1394                           ;Lab5.c: 136: ADCON0 = 0b00111001;
  1395  000840  0E39               	movlw	57
  1396  000842  6EC2               	movwf	4034,c	;volatile
  1397                           
  1398                           ;Lab5.c: 137: ADCON1 = 0b11000010;
  1399  000844  0EC2               	movlw	194
  1400  000846  6EC1               	movwf	4033,c	;volatile
  1401                           
  1402                           ;Lab5.c: 139: _delay((unsigned long)((10)*(10000000/4000.0)));
  1403  000848  0E19               	movlw	25
  1404  00084A  6E4C               	movwf	??_DAC& (0+255),c
  1405  00084C  0E5D               	movlw	93
  1406  00084E                     u1907:
  1407  00084E  FFFF               	dw	65535	; errata NOP
  1408  000850  2EE8               	decfsz	wreg,f,c
  1409  000852  D7FD               	bra	u1907
  1410  000854  2E4C               	decfsz	??_DAC& (0+255),f,c
  1411  000856  D7FB               	bra	u1907
  1412                           
  1413                           ;Lab5.c: 140: ADCON0bits.GO = 1;
  1414  000858  84C2               	bsf	4034,2,c	;volatile
  1415                           
  1416                           ;Lab5.c: 141: _delay((unsigned long)((10)*(10000000/4000.0)));
  1417  00085A  0E19               	movlw	25
  1418  00085C  6E4C               	movwf	??_DAC& (0+255),c
  1419  00085E  0E5D               	movlw	93
  1420  000860                     u1917:
  1421  000860  FFFF               	dw	65535	; errata NOP
  1422  000862  2EE8               	decfsz	wreg,f,c
  1423  000864  D7FD               	bra	u1917
  1424  000866  2E4C               	decfsz	??_DAC& (0+255),f,c
  1425  000868  D7FB               	bra	u1917
  1426  00086A  FFFF               	dw	65535	; assembler added errata NOP
  1427  00086C  B4C2               	btfsc	4034,2,c	;volatile
  1428  00086E  D7FD               	goto	l121
  1429                           
  1430                           ;Lab5.c: 145: adLow_5k = ADRESL;
  1431  000870  CFC3 F077          	movff	4035,_adLow_5k	;volatile
  1432  000874  6A78               	clrf	_adLow_5k+1,c
  1433                           
  1434                           ;Lab5.c: 146: adHigh_5k = ADRESH;
  1435  000876  CFC4 F075          	movff	4036,_adHigh_5k	;volatile
  1436  00087A  6A76               	clrf	_adHigh_5k+1,c
  1437                           
  1438                           ;Lab5.c: 148: adHigh_5k = adHigh_5k << 8;
  1439  00087C  5075               	movf	_adHigh_5k,w,c
  1440  00087E  6E76               	movwf	_adHigh_5k+1,c
  1441  000880  6A75               	clrf	_adHigh_5k,c
  1442                           
  1443                           ;Lab5.c: 150: decimal_5k = adLow_5k + adHigh_5k;
  1444  000882  5075               	movf	_adHigh_5k,w,c
  1445  000884  2477               	addwf	_adLow_5k,w,c
  1446  000886  6E4C               	movwf	??_DAC& (0+255),c
  1447  000888  5076               	movf	_adHigh_5k+1,w,c
  1448  00088A  2078               	addwfc	_adLow_5k+1,w,c
  1449  00088C  6E4D               	movwf	(??_DAC+1)& (0+255),c
  1450  00088E  C04C  F0AE         	movff	??_DAC,_decimal_5k
  1451  000892  C04D  F0AF         	movff	??_DAC+1,_decimal_5k+1
  1452  000896  0100               	movlb	0	; () banked
  1453  000898  6BB0               	clrf	(_decimal_5k+2)& (0+255),b
  1454  00089A  6BB1               	clrf	(_decimal_5k+3)& (0+255),b
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;Lab5.c: 152: voltage_5k = (decimal_5k*50)/1023;
  1458  00089C  C0AE  F001         	movff	_decimal_5k,___lmul@multiplier
  1459  0008A0  C0AF  F002         	movff	_decimal_5k+1,___lmul@multiplier+1
  1460  0008A4  C0B0  F003         	movff	_decimal_5k+2,___lmul@multiplier+2
  1461  0008A8  C0B1  F004         	movff	_decimal_5k+3,___lmul@multiplier+3
  1462  0008AC  0E32               	movlw	50
  1463  0008AE  6E05               	movwf	___lmul@multiplicand,c
  1464  0008B0  0E00               	movlw	0
  1465  0008B2  6E06               	movwf	___lmul@multiplicand+1,c
  1466  0008B4  0E00               	movlw	0
  1467  0008B6  6E07               	movwf	___lmul@multiplicand+2,c
  1468  0008B8  0E00               	movlw	0
  1469  0008BA  6E08               	movwf	___lmul@multiplicand+3,c
  1470  0008BC  ECC9  F00C         	call	___lmul	;wreg free
  1471  0008C0  C001  F00D         	movff	?___lmul,___aldiv@dividend
  1472  0008C4  C002  F00E         	movff	?___lmul+1,___aldiv@dividend+1
  1473  0008C8  C003  F00F         	movff	?___lmul+2,___aldiv@dividend+2
  1474  0008CC  C004  F010         	movff	?___lmul+3,___aldiv@dividend+3
  1475  0008D0  0EFF               	movlw	255
  1476  0008D2  6E11               	movwf	___aldiv@divisor,c
  1477  0008D4  0E03               	movlw	3
  1478  0008D6  6E12               	movwf	___aldiv@divisor+1,c
  1479  0008D8  0E00               	movlw	0
  1480  0008DA  6E13               	movwf	___aldiv@divisor+2,c
  1481  0008DC  0E00               	movlw	0
  1482  0008DE  6E14               	movwf	___aldiv@divisor+3,c
  1483  0008E0  EC3B  F00A         	call	___aldiv	;wreg free
  1484  0008E4  C00D  F05B         	movff	?___aldiv,_voltage_5k
  1485  0008E8  C00E  F05C         	movff	?___aldiv+1,_voltage_5k+1
  1486  0008EC  C00F  F05D         	movff	?___aldiv+2,_voltage_5k+2
  1487  0008F0  C010  F05E         	movff	?___aldiv+3,_voltage_5k+3
  1488                           
  1489                           ;Lab5.c: 153: voltage_ext = voltage_5k;
  1490  0008F4  C05B  F05F         	movff	_voltage_5k,_voltage_ext
  1491  0008F8  C05C  F060         	movff	_voltage_5k+1,_voltage_ext+1
  1492  0008FC  C05D  F061         	movff	_voltage_5k+2,_voltage_ext+2
  1493  000900  C05E  F062         	movff	_voltage_5k+3,_voltage_ext+3
  1494                           
  1495                           ;Lab5.c: 155: tens = voltage_5k / 10;
  1496  000904  C05B  F00D         	movff	_voltage_5k,___aldiv@dividend
  1497  000908  C05C  F00E         	movff	_voltage_5k+1,___aldiv@dividend+1
  1498  00090C  C05D  F00F         	movff	_voltage_5k+2,___aldiv@dividend+2
  1499  000910  C05E  F010         	movff	_voltage_5k+3,___aldiv@dividend+3
  1500  000914  0E0A               	movlw	10
  1501  000916  6E11               	movwf	___aldiv@divisor,c
  1502  000918  0E00               	movlw	0
  1503  00091A  6E12               	movwf	___aldiv@divisor+1,c
  1504  00091C  0E00               	movlw	0
  1505  00091E  6E13               	movwf	___aldiv@divisor+2,c
  1506  000920  0E00               	movlw	0
  1507  000922  6E14               	movwf	___aldiv@divisor+3,c
  1508  000924  EC3B  F00A         	call	___aldiv	;wreg free
  1509  000928  C00D  F0AA         	movff	?___aldiv,_tens
  1510  00092C  C00E  F0AB         	movff	?___aldiv+1,_tens+1
  1511  000930  C00F  F0AC         	movff	?___aldiv+2,_tens+2
  1512  000934  C010  F0AD         	movff	?___aldiv+3,_tens+3
  1513                           
  1514                           ;Lab5.c: 156: rem = voltage_5k % 10;
  1515  000938  C05B  F001         	movff	_voltage_5k,___almod@dividend
  1516  00093C  C05C  F002         	movff	_voltage_5k+1,___almod@dividend+1
  1517  000940  C05D  F003         	movff	_voltage_5k+2,___almod@dividend+2
  1518  000944  C05E  F004         	movff	_voltage_5k+3,___almod@dividend+3
  1519  000948  0E0A               	movlw	10
  1520  00094A  6E05               	movwf	___almod@divisor,c
  1521  00094C  0E00               	movlw	0
  1522  00094E  6E06               	movwf	___almod@divisor+1,c
  1523  000950  0E00               	movlw	0
  1524  000952  6E07               	movwf	___almod@divisor+2,c
  1525  000954  0E00               	movlw	0
  1526  000956  6E08               	movwf	___almod@divisor+3,c
  1527  000958  EC0D  F00B         	call	___almod	;wreg free
  1528  00095C  C001  F0A6         	movff	?___almod,_rem
  1529  000960  C002  F0A7         	movff	?___almod+1,_rem+1
  1530  000964  C003  F0A8         	movff	?___almod+2,_rem+2
  1531  000968  C004  F0A9         	movff	?___almod+3,_rem+3
  1532                           
  1533                           ;Lab5.c: 158: tens += 48;
  1534  00096C  0E30               	movlw	48
  1535  00096E  0100               	movlb	0	; () banked
  1536  000970  27AA               	addwf	_tens& (0+255),f,b
  1537  000972  0E00               	movlw	0
  1538  000974  23AB               	addwfc	(_tens+1)& (0+255),f,b
  1539  000976  23AC               	addwfc	(_tens+2)& (0+255),f,b
  1540  000978  23AD               	addwfc	(_tens+3)& (0+255),f,b
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;Lab5.c: 159: rem += 48;
  1544  00097A  0E30               	movlw	48
  1545  00097C  27A6               	addwf	_rem& (0+255),f,b
  1546  00097E  0E00               	movlw	0
  1547  000980  23A7               	addwfc	(_rem+1)& (0+255),f,b
  1548  000982  23A8               	addwfc	(_rem+2)& (0+255),f,b
  1549  000984  23A9               	addwfc	(_rem+3)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;Lab5.c: 161: Str_1[1] = 0x41;
  1553  000986  0E41               	movlw	65
  1554  000988  6F95               	movwf	(_Str_1+1)& (0+255),b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;Lab5.c: 162: Str_1[2] = 0x4D;
  1558  00098A  0E4D               	movlw	77
  1559  00098C  6F96               	movwf	(_Str_1+2)& (0+255),b
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;Lab5.c: 163: Str_1[3] = 0x50;
  1563  00098E  0E50               	movlw	80
  1564  000990  6F97               	movwf	(_Str_1+3)& (0+255),b
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;Lab5.c: 164: Str_1[6] = tens;
  1568  000992  C0AA  F09A         	movff	_tens,_Str_1+6
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;Lab5.c: 165: Str_1[7] = 0x2E;
  1572  000996  0E2E               	movlw	46
  1573  000998  6F9B               	movwf	(_Str_1+7)& (0+255),b
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;Lab5.c: 166: Str_1[8] = rem;
  1577  00099A  C0A6  F09C         	movff	_rem,_Str_1+8
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;Lab5.c: 169: ADCON1 = 0b10001110;
  1581  00099E  0E8E               	movlw	142
  1582  0009A0  6EC1               	movwf	4033,c	;volatile
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;Lab5.c: 170: Print_To_LCD(Str_1);
  1586  0009A2  0E94               	movlw	low _Str_1
  1587  0009A4  6E01               	movwf	Print_To_LCD@tempPtr,c
  1588  0009A6  0E00               	movlw	high _Str_1
  1589  0009A8  6E02               	movwf	Print_To_LCD@tempPtr+1,c
  1590  0009AA  EC03  F00C         	call	_Print_To_LCD	;wreg free
  1591                           
  1592                           ;Lab5.c: 171: voltage_ext = voltage_ext/10;
  1593  0009AE  C05F  F00D         	movff	_voltage_ext,___aldiv@dividend
  1594  0009B2  C060  F00E         	movff	_voltage_ext+1,___aldiv@dividend+1
  1595  0009B6  C061  F00F         	movff	_voltage_ext+2,___aldiv@dividend+2
  1596  0009BA  C062  F010         	movff	_voltage_ext+3,___aldiv@dividend+3
  1597  0009BE  0E0A               	movlw	10
  1598  0009C0  6E11               	movwf	___aldiv@divisor,c
  1599  0009C2  0E00               	movlw	0
  1600  0009C4  6E12               	movwf	___aldiv@divisor+1,c
  1601  0009C6  0E00               	movlw	0
  1602  0009C8  6E13               	movwf	___aldiv@divisor+2,c
  1603  0009CA  0E00               	movlw	0
  1604  0009CC  6E14               	movwf	___aldiv@divisor+3,c
  1605  0009CE  EC3B  F00A         	call	___aldiv	;wreg free
  1606  0009D2  C00D  F05F         	movff	?___aldiv,_voltage_ext
  1607  0009D6  C00E  F060         	movff	?___aldiv+1,_voltage_ext+1
  1608  0009DA  C00F  F061         	movff	?___aldiv+2,_voltage_ext+2
  1609  0009DE  C010  F062         	movff	?___aldiv+3,_voltage_ext+3
  1610                           
  1611                           ;Lab5.c: 173: for (time = 0; time<1; time = time + 0.001)
  1612  0009E2  0E00               	movlw	0
  1613  0009E4  6E6B               	movwf	_time,c
  1614  0009E6  0E00               	movlw	0
  1615  0009E8  6E6C               	movwf	_time+1,c
  1616  0009EA  0E00               	movlw	0
  1617  0009EC  6E6D               	movwf	_time+2,c
  1618  0009EE  C06B  F001         	movff	_time,___ftge@ff1
  1619  0009F2  C06C  F002         	movff	_time+1,___ftge@ff1+1
  1620  0009F6  C06D  F003         	movff	_time+2,___ftge@ff1+2
  1621  0009FA  0E00               	movlw	0
  1622  0009FC  6E04               	movwf	___ftge@ff2,c
  1623  0009FE  0E80               	movlw	128
  1624  000A00  6E05               	movwf	___ftge@ff2+1,c
  1625  000A02  0E3F               	movlw	63
  1626  000A04  6E06               	movwf	___ftge@ff2+2,c
  1627  000A06  EC6D  F00B         	call	___ftge	;wreg free
  1628  000A0A  FFFF               	dw	65535	; assembler added errata NOP
  1629  000A0C  B0D8               	btfsc	status,0,c
  1630  000A0E  D0C9               	goto	u1830
  1631                           
  1632                           ;Lab5.c: 174: {
  1633                           ;Lab5.c: 175: PORTCbits.RC0 = 0;
  1634  000A10  9082               	bcf	3970,0,c	;volatile
  1635                           
  1636                           ;Lab5.c: 176: PORTCbits.RC5 = 1;
  1637  000A12  8A82               	bsf	3970,5,c	;volatile
  1638                           
  1639                           ;Lab5.c: 178: controlByte = 0b00100001;
  1640  000A14  0E21               	movlw	33
  1641  000A16  6E7D               	movwf	_controlByte,c
  1642                           
  1643                           ;Lab5.c: 180: SSPBUF = controlByte;
  1644  000A18  C07D  FFC9         	movff	_controlByte,4041	;volatile
  1645  000A1C  FFFF               	dw	65535	; assembler added errata NOP
  1646  000A1E  A0C7               	btfss	4039,0,c	;volatile
  1647  000A20  D7FD               	goto	l126
  1648                           
  1649                           ;Lab5.c: 184: dataByte = voltage_ext*sin(2*3.14159*voltage_int*time);
  1650  000A22  C06B  F027         	movff	_time,___ftmul@f2
  1651  000A26  C06C  F028         	movff	_time+1,___ftmul@f2+1
  1652  000A2A  C06D  F029         	movff	_time+2,___ftmul@f2+2
  1653  000A2E  C0B2  F010         	movff	_voltage_int,___altoft@c
  1654  000A32  C0B3  F011         	movff	_voltage_int+1,___altoft@c+1
  1655  000A36  C0B4  F012         	movff	_voltage_int+2,___altoft@c+2
  1656  000A3A  C0B5  F013         	movff	_voltage_int+3,___altoft@c+3
  1657  000A3E  EC89  F00C         	call	___altoft	;wreg free
  1658  000A42  C010  F024         	movff	?___altoft,___ftmul@f1
  1659  000A46  C011  F025         	movff	?___altoft+1,___ftmul@f1+1
  1660  000A4A  C012  F026         	movff	?___altoft+2,___ftmul@f1+2
  1661  000A4E  ECEF  F007         	call	___ftmul	;wreg free
  1662  000A52  C024  F04E         	movff	?___ftmul,_DAC$1273
  1663  000A56  C025  F04F         	movff	?___ftmul+1,_DAC$1273+1
  1664  000A5A  C026  F050         	movff	?___ftmul+2,_DAC$1273+2
  1665                           
  1666                           ;Lab5.c: 184: dataByte = voltage_ext*sin(2*3.14159*voltage_int*time);
  1667  000A5E  0E10               	movlw	16
  1668  000A60  6E27               	movwf	___ftmul@f2,c
  1669  000A62  0EC9               	movlw	201
  1670  000A64  6E28               	movwf	___ftmul@f2+1,c
  1671  000A66  0E40               	movlw	64
  1672  000A68  6E29               	movwf	___ftmul@f2+2,c
  1673  000A6A  C04E  F024         	movff	_DAC$1273,___ftmul@f1
  1674  000A6E  C04F  F025         	movff	_DAC$1273+1,___ftmul@f1+1
  1675  000A72  C050  F026         	movff	_DAC$1273+2,___ftmul@f1+2
  1676  000A76  ECEF  F007         	call	___ftmul	;wreg free
  1677  000A7A  C024  F051         	movff	?___ftmul,_DAC$1274
  1678  000A7E  C025  F052         	movff	?___ftmul+1,_DAC$1274+1
  1679  000A82  C026  F053         	movff	?___ftmul+2,_DAC$1274+2
  1680                           
  1681                           ;Lab5.c: 184: dataByte = voltage_ext*sin(2*3.14159*voltage_int*time);
  1682  000A86  C051  F03F         	movff	_DAC$1274,sin@f
  1683  000A8A  C052  F040         	movff	_DAC$1274+1,sin@f+1
  1684  000A8E  C053  F041         	movff	_DAC$1274+2,sin@f+2
  1685  000A92  ECD4  F005         	call	_sin	;wreg free
  1686  000A96  C03F  F054         	movff	?_sin,_DAC$1275
  1687  000A9A  C040  F055         	movff	?_sin+1,_DAC$1275+1
  1688  000A9E  C041  F056         	movff	?_sin+2,_DAC$1275+2
  1689                           
  1690                           ;Lab5.c: 184: dataByte = voltage_ext*sin(2*3.14159*voltage_int*time);
  1691  000AA2  C05F  F010         	movff	_voltage_ext,___altoft@c
  1692  000AA6  C060  F011         	movff	_voltage_ext+1,___altoft@c+1
  1693  000AAA  C061  F012         	movff	_voltage_ext+2,___altoft@c+2
  1694  000AAE  C062  F013         	movff	_voltage_ext+3,___altoft@c+3
  1695  000AB2  EC89  F00C         	call	___altoft	;wreg free
  1696  000AB6  C010  F024         	movff	?___altoft,___ftmul@f1
  1697  000ABA  C011  F025         	movff	?___altoft+1,___ftmul@f1+1
  1698  000ABE  C012  F026         	movff	?___altoft+2,___ftmul@f1+2
  1699  000AC2  C054  F027         	movff	_DAC$1275,___ftmul@f2
  1700  000AC6  C055  F028         	movff	_DAC$1275+1,___ftmul@f2+1
  1701  000ACA  C056  F029         	movff	_DAC$1275+2,___ftmul@f2+2
  1702  000ACE  ECEF  F007         	call	___ftmul	;wreg free
  1703  000AD2  C024  F06E         	movff	?___ftmul,_dataByte
  1704  000AD6  C025  F06F         	movff	?___ftmul+1,_dataByte+1
  1705  000ADA  C026  F070         	movff	?___ftmul+2,_dataByte+2
  1706                           
  1707                           ;Lab5.c: 187: dataByte = ((dataByte+5)/10)*255;
  1708  000ADE  0E00               	movlw	0
  1709  000AE0  6E18               	movwf	___ftdiv@f2,c
  1710  000AE2  0E20               	movlw	32
  1711  000AE4  6E19               	movwf	___ftdiv@f2+1,c
  1712  000AE6  0E41               	movlw	65
  1713  000AE8  6E1A               	movwf	___ftdiv@f2+2,c
  1714  000AEA  0E00               	movlw	0
  1715  000AEC  6E0C               	movwf	___ftadd@f2,c
  1716  000AEE  0EA0               	movlw	160
  1717  000AF0  6E0D               	movwf	___ftadd@f2+1,c
  1718  000AF2  0E40               	movlw	64
  1719  000AF4  6E0E               	movwf	___ftadd@f2+2,c
  1720  000AF6  C06E  F009         	movff	_dataByte,___ftadd@f1
  1721  000AFA  C06F  F00A         	movff	_dataByte+1,___ftadd@f1+1
  1722  000AFE  C070  F00B         	movff	_dataByte+2,___ftadd@f1+2
  1723  000B02  EC07  F007         	call	___ftadd	;wreg free
  1724  000B06  C009  F015         	movff	?___ftadd,___ftdiv@f1
  1725  000B0A  C00A  F016         	movff	?___ftadd+1,___ftdiv@f1+1
  1726  000B0E  C00B  F017         	movff	?___ftadd+2,___ftdiv@f1+2
  1727  000B12  ECC8  F009         	call	___ftdiv	;wreg free
  1728  000B16  C015  F024         	movff	?___ftdiv,___ftmul@f1
  1729  000B1A  C016  F025         	movff	?___ftdiv+1,___ftmul@f1+1
  1730  000B1E  C017  F026         	movff	?___ftdiv+2,___ftmul@f1+2
  1731  000B22  0E00               	movlw	0
  1732  000B24  6E27               	movwf	___ftmul@f2,c
  1733  000B26  0E7F               	movlw	127
  1734  000B28  6E28               	movwf	___ftmul@f2+1,c
  1735  000B2A  0E43               	movlw	67
  1736  000B2C  6E29               	movwf	___ftmul@f2+2,c
  1737  000B2E  ECEF  F007         	call	___ftmul	;wreg free
  1738  000B32  C024  F06E         	movff	?___ftmul,_dataByte
  1739  000B36  C025  F06F         	movff	?___ftmul+1,_dataByte+1
  1740  000B3A  C026  F070         	movff	?___ftmul+2,_dataByte+2
  1741                           
  1742                           ;Lab5.c: 189: SSPBUF = dataByte;
  1743  000B3E  C06E  F001         	movff	_dataByte,___fttol@f1
  1744  000B42  C06F  F002         	movff	_dataByte+1,___fttol@f1+1
  1745  000B46  C070  F003         	movff	_dataByte+2,___fttol@f1+2
  1746  000B4A  ECE1  F008         	call	___fttol	;wreg free
  1747  000B4E  5001               	movf	?___fttol,w,c
  1748  000B50  6EC9               	movwf	4041,c	;volatile
  1749  000B52  FFFF               	dw	65535	; assembler added errata NOP
  1750  000B54  A0C7               	btfss	4039,0,c	;volatile
  1751  000B56  D7FD               	goto	l129
  1752                           
  1753                           ;Lab5.c: 192: PORTCbits.RC0 = 1;
  1754  000B58  8082               	bsf	3970,0,c	;volatile
  1755                           
  1756                           ;Lab5.c: 193: PORTCbits.RC5 = 0;
  1757  000B5A  9A82               	bcf	3970,5,c	;volatile
  1758  000B5C  C06B  F009         	movff	_time,___ftadd@f1
  1759  000B60  C06C  F00A         	movff	_time+1,___ftadd@f1+1
  1760  000B64  C06D  F00B         	movff	_time+2,___ftadd@f1+2
  1761  000B68  0E12               	movlw	18
  1762  000B6A  6E0C               	movwf	___ftadd@f2,c
  1763  000B6C  0E83               	movlw	131
  1764  000B6E  6E0D               	movwf	___ftadd@f2+1,c
  1765  000B70  0E3A               	movlw	58
  1766  000B72  6E0E               	movwf	___ftadd@f2+2,c
  1767  000B74  EC07  F007         	call	___ftadd	;wreg free
  1768  000B78  C009  F06B         	movff	?___ftadd,_time
  1769  000B7C  C00A  F06C         	movff	?___ftadd+1,_time+1
  1770  000B80  C00B  F06D         	movff	?___ftadd+2,_time+2
  1771  000B84  C06B  F001         	movff	_time,___ftge@ff1
  1772  000B88  C06C  F002         	movff	_time+1,___ftge@ff1+1
  1773  000B8C  C06D  F003         	movff	_time+2,___ftge@ff1+2
  1774  000B90  0E00               	movlw	0
  1775  000B92  6E04               	movwf	___ftge@ff2,c
  1776  000B94  0E80               	movlw	128
  1777  000B96  6E05               	movwf	___ftge@ff2+1,c
  1778  000B98  0E3F               	movlw	63
  1779  000B9A  6E06               	movwf	___ftge@ff2+2,c
  1780  000B9C  EC6D  F00B         	call	___ftge	;wreg free
  1781  000BA0  D734               	goto	L1
  1782  000BA2                     u1830:
  1783  000BA2  FFFF               	dw	65535	; assembler added errata NOP
  1784  000BA4  0012               	return		;funcret
  1785  000BA6  FFFF               	dw	65535	; errata NOP
  1786  000BA8                     __end_of_DAC:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           postdec1	equ	0xFE5
  1795                           fsr1l	equ	0xFE1
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _sin *****************
  1799 ;; Defined at:
  1800 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sin.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  f               3   62[COMRAM] void 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  x2              3   71[COMRAM] void 
  1805 ;;  y               3   65[COMRAM] void 
  1806 ;;  sgn             1   74[COMRAM] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  3   62[COMRAM] unsigned char 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1816 ;;      Params:         3       0       0       0       0       0       0
  1817 ;;      Locals:        10       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0
  1819 ;;      Totals:        13       0       0       0       0       0       0
  1820 ;;Total ram usage:       13 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    3
  1823 ;; This function calls:
  1824 ;;		___ftadd
  1825 ;;		___ftdiv
  1826 ;;		___ftge
  1827 ;;		___ftmul
  1828 ;;		___ftneg
  1829 ;;		___ftsub
  1830 ;;		_eval_poly
  1831 ;;		_floor
  1832 ;; This function is called by:
  1833 ;;		_DAC
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text4
  1838  000BA8                     __ptext4:
  1839                           	opt stack 0
  1840  000BA8                     _sin:
  1841                           	opt stack 0
  1842  000BA8  FFFF               	dw	65535	; assembler added errata NOP
  1843                           
  1844                           ;incstack = 0
  1845  000BAA  0E00               	movlw	0
  1846  000BAC  6E4B               	movwf	sin@sgn,c
  1847  000BAE  AE41               	btfss	sin@f+2,7,c
  1848  000BB0  D010               	goto	l585
  1849  000BB2  C03F  F001         	movff	sin@f,___ftneg@f1
  1850  000BB6  C040  F002         	movff	sin@f+1,___ftneg@f1+1
  1851  000BBA  C041  F003         	movff	sin@f+2,___ftneg@f1+2
  1852  000BBE  EC7E  F00D         	call	___ftneg	;wreg free
  1853  000BC2  C001  F03F         	movff	?___ftneg,sin@f
  1854  000BC6  C002  F040         	movff	?___ftneg+1,sin@f+1
  1855  000BCA  C003  F041         	movff	?___ftneg+2,sin@f+2
  1856  000BCE  0E01               	movlw	1
  1857  000BD0  6E4B               	movwf	sin@sgn,c
  1858  000BD2                     l585:
  1859  000BD2  FFFF               	dw	65535	; assembler added errata NOP
  1860  000BD4  C03F  F024         	movff	sin@f,___ftmul@f1
  1861  000BD8  C040  F025         	movff	sin@f+1,___ftmul@f1+1
  1862  000BDC  C041  F026         	movff	sin@f+2,___ftmul@f1+2
  1863  000BE0  0EFA               	movlw	250
  1864  000BE2  6E27               	movwf	___ftmul@f2,c
  1865  000BE4  0E22               	movlw	34
  1866  000BE6  6E28               	movwf	___ftmul@f2+1,c
  1867  000BE8  0E3E               	movlw	62
  1868  000BEA  6E29               	movwf	___ftmul@f2+2,c
  1869  000BEC  ECEF  F007         	call	___ftmul	;wreg free
  1870  000BF0  C024  F03F         	movff	?___ftmul,sin@f
  1871  000BF4  C025  F040         	movff	?___ftmul+1,sin@f+1
  1872  000BF8  C026  F041         	movff	?___ftmul+2,sin@f+2
  1873  000BFC  C03F  F022         	movff	sin@f,___ftsub@f1
  1874  000C00  C040  F023         	movff	sin@f+1,___ftsub@f1+1
  1875  000C04  C041  F024         	movff	sin@f+2,___ftsub@f1+2
  1876  000C08  C03F  F01A         	movff	sin@f,floor@x
  1877  000C0C  C040  F01B         	movff	sin@f+1,floor@x+1
  1878  000C10  C041  F01C         	movff	sin@f+2,floor@x+2
  1879  000C14  EC6B  F008         	call	_floor	;wreg free
  1880  000C18  C01A  F025         	movff	?_floor,___ftsub@f2
  1881  000C1C  C01B  F026         	movff	?_floor+1,___ftsub@f2+1
  1882  000C20  C01C  F027         	movff	?_floor+2,___ftsub@f2+2
  1883  000C24  ECF8  F00C         	call	___ftsub	;wreg free
  1884  000C28  C022  F03F         	movff	?___ftsub,sin@f
  1885  000C2C  C023  F040         	movff	?___ftsub+1,sin@f+1
  1886  000C30  C024  F041         	movff	?___ftsub+2,sin@f+2
  1887  000C34  C03F  F024         	movff	sin@f,___ftmul@f1
  1888  000C38  C040  F025         	movff	sin@f+1,___ftmul@f1+1
  1889  000C3C  C041  F026         	movff	sin@f+2,___ftmul@f1+2
  1890  000C40  0E00               	movlw	0
  1891  000C42  6E27               	movwf	___ftmul@f2,c
  1892  000C44  0E80               	movlw	128
  1893  000C46  6E28               	movwf	___ftmul@f2+1,c
  1894  000C48  0E40               	movlw	64
  1895  000C4A  6E29               	movwf	___ftmul@f2+2,c
  1896  000C4C  ECEF  F007         	call	___ftmul	;wreg free
  1897  000C50  C024  F03F         	movff	?___ftmul,sin@f
  1898  000C54  C025  F040         	movff	?___ftmul+1,sin@f+1
  1899  000C58  C026  F041         	movff	?___ftmul+2,sin@f+2
  1900  000C5C  0E00               	movlw	0
  1901  000C5E  6E01               	movwf	___ftge@ff1,c
  1902  000C60  0E00               	movlw	0
  1903  000C62  6E02               	movwf	___ftge@ff1+1,c
  1904  000C64  0E40               	movlw	64
  1905  000C66  6E03               	movwf	___ftge@ff1+2,c
  1906  000C68  C03F  F004         	movff	sin@f,___ftge@ff2
  1907  000C6C  C040  F005         	movff	sin@f+1,___ftge@ff2+1
  1908  000C70  C041  F006         	movff	sin@f+2,___ftge@ff2+2
  1909  000C74  EC6D  F00B         	call	___ftge	;wreg free
  1910  000C78  B0D8               	btfsc	status,0,c
  1911  000C7A  D01D               	goto	l586
  1912  000C7C  C03F  F022         	movff	sin@f,___ftsub@f1
  1913  000C80  C040  F023         	movff	sin@f+1,___ftsub@f1+1
  1914  000C84  C041  F024         	movff	sin@f+2,___ftsub@f1+2
  1915  000C88  0E00               	movlw	0
  1916  000C8A  6E25               	movwf	___ftsub@f2,c
  1917  000C8C  0E00               	movlw	0
  1918  000C8E  6E26               	movwf	___ftsub@f2+1,c
  1919  000C90  0E40               	movlw	64
  1920  000C92  6E27               	movwf	___ftsub@f2+2,c
  1921  000C94  ECF8  F00C         	call	___ftsub	;wreg free
  1922  000C98  C022  F03F         	movff	?___ftsub,sin@f
  1923  000C9C  C023  F040         	movff	?___ftsub+1,sin@f+1
  1924  000CA0  C024  F041         	movff	?___ftsub+2,sin@f+2
  1925  000CA4  504B               	movf	sin@sgn,w,c
  1926  000CA6  A4D8               	btfss	status,2,c
  1927  000CA8  D002               	goto	u1600
  1928  000CAA  0E01               	movlw	1
  1929  000CAC  D002               	goto	u1610
  1930  000CAE                     u1600:
  1931  000CAE  FFFF               	dw	65535	; assembler added errata NOP
  1932  000CB0  0E00               	movlw	0
  1933  000CB2                     u1610:
  1934  000CB2  FFFF               	dw	65535	; assembler added errata NOP
  1935  000CB4  6E4B               	movwf	sin@sgn,c
  1936  000CB6                     l586:
  1937  000CB6  FFFF               	dw	65535	; assembler added errata NOP
  1938  000CB8  0E00               	movlw	0
  1939  000CBA  6E01               	movwf	___ftge@ff1,c
  1940  000CBC  0E80               	movlw	128
  1941  000CBE  6E02               	movwf	___ftge@ff1+1,c
  1942  000CC0  0E3F               	movlw	63
  1943  000CC2  6E03               	movwf	___ftge@ff1+2,c
  1944  000CC4  C03F  F004         	movff	sin@f,___ftge@ff2
  1945  000CC8  C040  F005         	movff	sin@f+1,___ftge@ff2+1
  1946  000CCC  C041  F006         	movff	sin@f+2,___ftge@ff2+2
  1947  000CD0  EC6D  F00B         	call	___ftge	;wreg free
  1948  000CD4  B0D8               	btfsc	status,0,c
  1949  000CD6  D01C               	goto	l587
  1950  000CD8  C03F  F001         	movff	sin@f,___ftneg@f1
  1951  000CDC  C040  F002         	movff	sin@f+1,___ftneg@f1+1
  1952  000CE0  C041  F003         	movff	sin@f+2,___ftneg@f1+2
  1953  000CE4  EC7E  F00D         	call	___ftneg	;wreg free
  1954  000CE8  C001  F009         	movff	?___ftneg,___ftadd@f1
  1955  000CEC  C002  F00A         	movff	?___ftneg+1,___ftadd@f1+1
  1956  000CF0  C003  F00B         	movff	?___ftneg+2,___ftadd@f1+2
  1957  000CF4  0E00               	movlw	0
  1958  000CF6  6E0C               	movwf	___ftadd@f2,c
  1959  000CF8  0E00               	movlw	0
  1960  000CFA  6E0D               	movwf	___ftadd@f2+1,c
  1961  000CFC  0E40               	movlw	64
  1962  000CFE  6E0E               	movwf	___ftadd@f2+2,c
  1963  000D00  EC07  F007         	call	___ftadd	;wreg free
  1964  000D04  C009  F03F         	movff	?___ftadd,sin@f
  1965  000D08  C00A  F040         	movff	?___ftadd+1,sin@f+1
  1966  000D0C  C00B  F041         	movff	?___ftadd+2,sin@f+2
  1967  000D10                     l587:
  1968  000D10  FFFF               	dw	65535	; assembler added errata NOP
  1969  000D12  C03F  F024         	movff	sin@f,___ftmul@f1
  1970  000D16  C040  F025         	movff	sin@f+1,___ftmul@f1+1
  1971  000D1A  C041  F026         	movff	sin@f+2,___ftmul@f1+2
  1972  000D1E  C03F  F027         	movff	sin@f,___ftmul@f2
  1973  000D22  C040  F028         	movff	sin@f+1,___ftmul@f2+1
  1974  000D26  C041  F029         	movff	sin@f+2,___ftmul@f2+2
  1975  000D2A  ECEF  F007         	call	___ftmul	;wreg free
  1976  000D2E  C024  F048         	movff	?___ftmul,sin@x2
  1977  000D32  C025  F049         	movff	?___ftmul+1,sin@x2+1
  1978  000D36  C026  F04A         	movff	?___ftmul+2,sin@x2+2
  1979  000D3A  C048  F033         	movff	sin@x2,eval_poly@x
  1980  000D3E  C049  F034         	movff	sin@x2+1,eval_poly@x+1
  1981  000D42  C04A  F035         	movff	sin@x2+2,eval_poly@x+2
  1982  000D46  0E10               	movlw	low sin@coeff_b
  1983  000D48  6E36               	movwf	eval_poly@d,c
  1984  000D4A  0E06               	movlw	high sin@coeff_b
  1985  000D4C  6E37               	movwf	eval_poly@d+1,c
  1986  000D4E  0E00               	movlw	0
  1987  000D50  6E39               	movwf	eval_poly@n+1,c
  1988  000D52  0E03               	movlw	3
  1989  000D54  6E38               	movwf	eval_poly@n,c
  1990  000D56  EC55  F009         	call	_eval_poly	;wreg free
  1991  000D5A  C033  F042         	movff	?_eval_poly,sin@y
  1992  000D5E  C034  F043         	movff	?_eval_poly+1,sin@y+1
  1993  000D62  C035  F044         	movff	?_eval_poly+2,sin@y+2
  1994  000D66  C042  F018         	movff	sin@y,___ftdiv@f2
  1995  000D6A  C043  F019         	movff	sin@y+1,___ftdiv@f2+1
  1996  000D6E  C044  F01A         	movff	sin@y+2,___ftdiv@f2+2
  1997  000D72  0E00               	movlw	0
  1998  000D74  6E39               	movwf	eval_poly@n+1,c
  1999  000D76  0E04               	movlw	4
  2000  000D78  6E38               	movwf	eval_poly@n,c
  2001  000D7A  0E01               	movlw	low sin@coeff_a
  2002  000D7C  6E36               	movwf	eval_poly@d,c
  2003  000D7E  0E06               	movlw	high sin@coeff_a
  2004  000D80  6E37               	movwf	eval_poly@d+1,c
  2005  000D82  C048  F033         	movff	sin@x2,eval_poly@x
  2006  000D86  C049  F034         	movff	sin@x2+1,eval_poly@x+1
  2007  000D8A  C04A  F035         	movff	sin@x2+2,eval_poly@x+2
  2008  000D8E  EC55  F009         	call	_eval_poly	;wreg free
  2009  000D92  C033  F015         	movff	?_eval_poly,___ftdiv@f1
  2010  000D96  C034  F016         	movff	?_eval_poly+1,___ftdiv@f1+1
  2011  000D9A  C035  F017         	movff	?_eval_poly+2,___ftdiv@f1+2
  2012  000D9E  ECC8  F009         	call	___ftdiv	;wreg free
  2013  000DA2  C015  F045         	movff	?___ftdiv,_sin$1276
  2014  000DA6  C016  F046         	movff	?___ftdiv+1,_sin$1276+1
  2015  000DAA  C017  F047         	movff	?___ftdiv+2,_sin$1276+2
  2016  000DAE  C03F  F024         	movff	sin@f,___ftmul@f1
  2017  000DB2  C040  F025         	movff	sin@f+1,___ftmul@f1+1
  2018  000DB6  C041  F026         	movff	sin@f+2,___ftmul@f1+2
  2019  000DBA  C045  F027         	movff	_sin$1276,___ftmul@f2
  2020  000DBE  C046  F028         	movff	_sin$1276+1,___ftmul@f2+1
  2021  000DC2  C047  F029         	movff	_sin$1276+2,___ftmul@f2+2
  2022  000DC6  ECEF  F007         	call	___ftmul	;wreg free
  2023  000DCA  C024  F03F         	movff	?___ftmul,sin@f
  2024  000DCE  C025  F040         	movff	?___ftmul+1,sin@f+1
  2025  000DD2  C026  F041         	movff	?___ftmul+2,sin@f+2
  2026  000DD6  504B               	movf	sin@sgn,w,c
  2027  000DD8  B4D8               	btfsc	status,2,c
  2028  000DDA  D00F               	goto	l588
  2029  000DDC  C03F  F001         	movff	sin@f,___ftneg@f1
  2030  000DE0  C040  F002         	movff	sin@f+1,___ftneg@f1+1
  2031  000DE4  C041  F003         	movff	sin@f+2,___ftneg@f1+2
  2032  000DE8  EC7E  F00D         	call	___ftneg	;wreg free
  2033  000DEC  C001  F03F         	movff	?___ftneg,?_sin
  2034  000DF0  C002  F040         	movff	?___ftneg+1,?_sin+1
  2035  000DF4  C003  F041         	movff	?___ftneg+2,?_sin+2
  2036  000DF8  D007               	goto	l589
  2037  000DFA                     l588:
  2038  000DFA  FFFF               	dw	65535	; assembler added errata NOP
  2039  000DFC  C03F  F03F         	movff	sin@f,?_sin
  2040  000E00  C040  F040         	movff	sin@f+1,?_sin+1
  2041  000E04  C041  F041         	movff	sin@f+2,?_sin+2
  2042  000E08                     l589:
  2043  000E08  FFFF               	dw	65535	; assembler added errata NOP
  2044  000E0A  0012               	return		;funcret
  2045  000E0C  FFFF               	dw	65535	; errata NOP
  2046  000E0E                     __end_of_sin:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           tblptrh	equ	0xFF7
  2050                           tblptrl	equ	0xFF6
  2051                           tablat	equ	0xFF5
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1l	equ	0xFE1
  2056                           status	equ	0xFD8
  2057                           
  2058 ;; *************** function _floor *****************
  2059 ;; Defined at:
  2060 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  x               3   25[COMRAM] unsigned char 
  2063 ;; Auto vars:     Size  Location     Type
  2064 ;;  i               3   28[COMRAM] unsigned char 
  2065 ;;  expon           2   31[COMRAM] int 
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  3   25[COMRAM] int 
  2068 ;; Registers used:
  2069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2075 ;;      Params:         3       0       0       0       0       0       0
  2076 ;;      Locals:         5       0       0       0       0       0       0
  2077 ;;      Temps:          0       0       0       0       0       0       0
  2078 ;;      Totals:         8       0       0       0       0       0       0
  2079 ;;Total ram usage:        8 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    2
  2082 ;; This function calls:
  2083 ;;		___altoft
  2084 ;;		___ftadd
  2085 ;;		___ftge
  2086 ;;		___fttol
  2087 ;;		_frexp
  2088 ;; This function is called by:
  2089 ;;		_sin
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text5
  2094  0010D6                     __ptext5:
  2095                           	opt stack 0
  2096  0010D6                     _floor:
  2097                           	opt stack 0
  2098  0010D6  FFFF               	dw	65535	; assembler added errata NOP
  2099                           
  2100                           ;incstack = 0
  2101  0010D8  C01A  F001         	movff	floor@x,frexp@value
  2102  0010DC  C01B  F002         	movff	floor@x+1,frexp@value+1
  2103  0010E0  C01C  F003         	movff	floor@x+2,frexp@value+2
  2104  0010E4  0E20               	movlw	low floor@expon
  2105  0010E6  6E04               	movwf	frexp@eptr,c
  2106  0010E8  0E00               	movlw	high floor@expon
  2107  0010EA  6E05               	movwf	frexp@eptr+1,c
  2108  0010EC  EC47  F00C         	call	_frexp	;wreg free
  2109  0010F0  AE21               	btfss	floor@expon+1,7,c
  2110  0010F2  D011               	goto	l739
  2111  0010F4  AE1C               	btfss	floor@x+2,7,c
  2112  0010F6  D006               	goto	l740
  2113  0010F8  0E00               	movlw	0
  2114  0010FA  6E1A               	movwf	?_floor,c
  2115  0010FC  0E80               	movlw	128
  2116  0010FE  6E1B               	movwf	?_floor+1,c
  2117  001100  0EBF               	movlw	191
  2118  001102  D006               	goto	L2
  2119  001104                     l740:
  2120  001104  FFFF               	dw	65535	; assembler added errata NOP
  2121  001106  0E00               	movlw	0
  2122  001108  6E1A               	movwf	?_floor,c
  2123  00110A  0E00               	movlw	0
  2124  00110C  6E1B               	movwf	?_floor+1,c
  2125  00110E  0E00               	movlw	0
  2126  001110                     L2:
  2127  001110  FFFF               	dw	65535	; assembler added errata NOP
  2128  001112  6E1C               	movwf	?_floor+2,c
  2129  001114  D053               	goto	l741
  2130  001116                     l739:
  2131  001116  FFFF               	dw	65535	; assembler added errata NOP
  2132  001118  5021               	movf	floor@expon+1,w,c
  2133  00111A  E104               	bnz	u1520
  2134  00111C  0E15               	movlw	21
  2135  00111E  5C20               	subwf	floor@expon,w,c
  2136  001120  A0D8               	btfss	status,0,c
  2137  001122  D007               	goto	l742
  2138  001124                     u1520:
  2139  001124  C01A  F01A         	movff	floor@x,?_floor
  2140  001128  C01B  F01B         	movff	floor@x+1,?_floor+1
  2141  00112C  C01C  F01C         	movff	floor@x+2,?_floor+2
  2142  001130  D045               	goto	l741
  2143  001132                     l742:
  2144  001132  FFFF               	dw	65535	; assembler added errata NOP
  2145  001134  C01A  F001         	movff	floor@x,___fttol@f1
  2146  001138  C01B  F002         	movff	floor@x+1,___fttol@f1+1
  2147  00113C  C01C  F003         	movff	floor@x+2,___fttol@f1+2
  2148  001140  ECE1  F008         	call	___fttol	;wreg free
  2149  001144  C001  F010         	movff	?___fttol,___altoft@c
  2150  001148  C002  F011         	movff	?___fttol+1,___altoft@c+1
  2151  00114C  C003  F012         	movff	?___fttol+2,___altoft@c+2
  2152  001150  C004  F013         	movff	?___fttol+3,___altoft@c+3
  2153  001154  EC89  F00C         	call	___altoft	;wreg free
  2154  001158  C010  F01D         	movff	?___altoft,floor@i
  2155  00115C  C011  F01E         	movff	?___altoft+1,floor@i+1
  2156  001160  C012  F01F         	movff	?___altoft+2,floor@i+2
  2157  001164  C01A  F001         	movff	floor@x,___ftge@ff1
  2158  001168  C01B  F002         	movff	floor@x+1,___ftge@ff1+1
  2159  00116C  C01C  F003         	movff	floor@x+2,___ftge@ff1+2
  2160  001170  C01D  F004         	movff	floor@i,___ftge@ff2
  2161  001174  C01E  F005         	movff	floor@i+1,___ftge@ff2+1
  2162  001178  C01F  F006         	movff	floor@i+2,___ftge@ff2+2
  2163  00117C  EC6D  F00B         	call	___ftge	;wreg free
  2164  001180  B0D8               	btfsc	status,0,c
  2165  001182  D015               	goto	l743
  2166  001184  C01D  F009         	movff	floor@i,___ftadd@f1
  2167  001188  C01E  F00A         	movff	floor@i+1,___ftadd@f1+1
  2168  00118C  C01F  F00B         	movff	floor@i+2,___ftadd@f1+2
  2169  001190  0E00               	movlw	0
  2170  001192  6E0C               	movwf	___ftadd@f2,c
  2171  001194  0E80               	movlw	128
  2172  001196  6E0D               	movwf	___ftadd@f2+1,c
  2173  001198  0EBF               	movlw	191
  2174  00119A  6E0E               	movwf	___ftadd@f2+2,c
  2175  00119C  EC07  F007         	call	___ftadd	;wreg free
  2176  0011A0  C009  F01A         	movff	?___ftadd,?_floor
  2177  0011A4  C00A  F01B         	movff	?___ftadd+1,?_floor+1
  2178  0011A8  C00B  F01C         	movff	?___ftadd+2,?_floor+2
  2179  0011AC  D007               	goto	l741
  2180  0011AE                     l743:
  2181  0011AE  FFFF               	dw	65535	; assembler added errata NOP
  2182  0011B0  C01D  F01A         	movff	floor@i,?_floor
  2183  0011B4  C01E  F01B         	movff	floor@i+1,?_floor+1
  2184  0011B8  C01F  F01C         	movff	floor@i+2,?_floor+2
  2185  0011BC                     l741:
  2186  0011BC  FFFF               	dw	65535	; assembler added errata NOP
  2187  0011BE  0012               	return		;funcret
  2188  0011C0  FFFF               	dw	65535	; errata NOP
  2189  0011C2                     __end_of_floor:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           postdec1	equ	0xFE5
  2198                           fsr1l	equ	0xFE1
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _frexp *****************
  2202 ;; Defined at:
  2203 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  value           3    0[COMRAM] int 
  2206 ;;  eptr            2    3[COMRAM] PTR int 
  2207 ;;		 -> floor@expon(2), 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  3    0[COMRAM] PTR int 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2219 ;;      Params:         5       0       0       0       0       0       0
  2220 ;;      Locals:         0       0       0       0       0       0       0
  2221 ;;      Temps:          2       0       0       0       0       0       0
  2222 ;;      Totals:         7       0       0       0       0       0       0
  2223 ;;Total ram usage:        7 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_floor
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text6
  2233  00188E                     __ptext6:
  2234                           	opt stack 0
  2235  00188E                     _frexp:
  2236                           	opt stack 0
  2237  00188E  FFFF               	dw	65535	; assembler added errata NOP
  2238                           
  2239                           ;incstack = 0
  2240  001890  5001               	movf	frexp@value,w,c
  2241  001892  1002               	iorwf	frexp@value+1,w,c
  2242  001894  1003               	iorwf	frexp@value+2,w,c
  2243  001896  A4D8               	btfss	status,2,c
  2244  001898  D009               	goto	l748
  2245  00189A  C004  FFD9         	movff	frexp@eptr,fsr2l
  2246  00189E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2247  0018A2  0E00               	movlw	0
  2248  0018A4  6EDE               	movwf	postinc2,c
  2249  0018A6  0E00               	movlw	0
  2250  0018A8  6EDD               	movwf	postdec2,c
  2251                           
  2252                           ;	Return value of _frexp is never used
  2253  0018AA  D030               	goto	l1763
  2254  0018AC                     l748:
  2255  0018AC  FFFF               	dw	65535	; assembler added errata NOP
  2256  0018AE  5003               	movf	frexp@value+2,w,c
  2257  0018B0  0B7F               	andlw	127
  2258  0018B2  6E06               	movwf	??_frexp& (0+255),c
  2259  0018B4  6A07               	clrf	(??_frexp+1)& (0+255),c
  2260  0018B6  90D8               	bcf	status,0,c
  2261  0018B8  3606               	rlcf	??_frexp,f,c
  2262  0018BA  3607               	rlcf	??_frexp+1,f,c
  2263  0018BC  C004  FFD9         	movff	frexp@eptr,fsr2l
  2264  0018C0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2265  0018C4  C006  FFDE         	movff	??_frexp,postinc2
  2266  0018C8  C007  FFDD         	movff	??_frexp+1,postdec2
  2267  0018CC  AE02               	btfss	frexp@value+1,7,c
  2268  0018CE  D003               	goto	u1420
  2269  0018D0  6A06               	clrf	??_frexp& (0+255),c
  2270  0018D2  2A06               	incf	??_frexp& (0+255),f,c
  2271  0018D4  D002               	goto	u1428
  2272  0018D6                     u1420:
  2273  0018D6  FFFF               	dw	65535	; assembler added errata NOP
  2274  0018D8  6A06               	clrf	??_frexp& (0+255),c
  2275  0018DA                     u1428:
  2276  0018DA  FFFF               	dw	65535	; assembler added errata NOP
  2277  0018DC  5006               	movf	??_frexp,w,c
  2278  0018DE  C004  FFD9         	movff	frexp@eptr,fsr2l
  2279  0018E2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2280  0018E6  12DE               	iorwf	postinc2,f,c
  2281  0018E8  0E00               	movlw	0
  2282  0018EA  12DD               	iorwf	postdec2,f,c
  2283  0018EC  C004  FFD9         	movff	frexp@eptr,fsr2l
  2284  0018F0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2285  0018F4  0E82               	movlw	130
  2286  0018F6  26DE               	addwf	postinc2,f,c
  2287  0018F8  0EFF               	movlw	255
  2288  0018FA  22DD               	addwfc	postdec2,f,c
  2289  0018FC  8003               	bsf	frexp@value+2,0,c
  2290  0018FE  8203               	bsf	frexp@value+2,1,c
  2291  001900  8403               	bsf	frexp@value+2,2,c
  2292  001902  8603               	bsf	frexp@value+2,3,c
  2293  001904  8803               	bsf	frexp@value+2,4,c
  2294  001906  8A03               	bsf	frexp@value+2,5,c
  2295  001908  9C03               	bcf	frexp@value+2,6,c
  2296  00190A  9E02               	bcf	frexp@value+1,7,c
  2297  00190C                     l1763:
  2298  00190C  FFFF               	dw	65535	; assembler added errata NOP
  2299                           
  2300                           ;	Return value of _frexp is never used
  2301  00190E  0012               	return		;funcret
  2302  001910  FFFF               	dw	65535	; errata NOP
  2303  001912                     __end_of_frexp:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319 ;; *************** function ___fttol *****************
  2320 ;; Defined at:
  2321 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  f1              3    0[COMRAM] float 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  lval            4   10[COMRAM] unsigned long 
  2326 ;;  exp1            1   14[COMRAM] unsigned char 
  2327 ;;  sign1           1    9[COMRAM] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  4    0[COMRAM] long 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2337 ;;      Params:         4       0       0       0       0       0       0
  2338 ;;      Locals:         6       0       0       0       0       0       0
  2339 ;;      Temps:          5       0       0       0       0       0       0
  2340 ;;      Totals:        15       0       0       0       0       0       0
  2341 ;;Total ram usage:       15 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; This function calls:
  2344 ;;		Nothing
  2345 ;; This function is called by:
  2346 ;;		_DAC
  2347 ;;		_floor
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text7
  2352  0011C2                     __ptext7:
  2353                           	opt stack 0
  2354  0011C2                     ___fttol:
  2355                           	opt stack 0
  2356  0011C2  FFFF               	dw	65535	; assembler added errata NOP
  2357                           
  2358                           ;incstack = 0
  2359  0011C4  C003  F005         	movff	___fttol@f1+2,??___fttol
  2360  0011C8  6A06               	clrf	(??___fttol+1)& (0+255),c
  2361  0011CA  6A07               	clrf	(??___fttol+2)& (0+255),c
  2362  0011CC  3402               	rlcf	___fttol@f1+1,w,c
  2363  0011CE  3605               	rlcf	??___fttol& (0+255),f,c
  2364  0011D0  E301               	bnc	u1331
  2365  0011D2  8006               	bsf	(??___fttol+1)& (0+255),0,c
  2366  0011D4                     u1331:
  2367  0011D4  5005               	movf	??___fttol,w,c
  2368  0011D6  6E0F               	movwf	___fttol@exp1,c
  2369  0011D8  500F               	movf	___fttol@exp1,w,c
  2370  0011DA  B4D8               	btfsc	status,2,c
  2371  0011DC  D039               	goto	u1380
  2372  0011DE  0E17               	movlw	23
  2373  0011E0  6E05               	movwf	??___fttol& (0+255),c
  2374  0011E2  C001  F006         	movff	___fttol@f1,??___fttol+1
  2375  0011E6  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  2376  0011EA  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  2377  0011EE  2805               	incf	??___fttol,w,c
  2378  0011F0  6E09               	movwf	(??___fttol+4)& (0+255),c
  2379  0011F2  D005               	goto	u1350
  2380  0011F4                     u1355:
  2381  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  2382  0011F6  90D8               	bcf	status,0,c
  2383  0011F8  3208               	rrcf	??___fttol+3,f,c
  2384  0011FA  3207               	rrcf	??___fttol+2,f,c
  2385  0011FC  3206               	rrcf	??___fttol+1,f,c
  2386  0011FE                     u1350:
  2387  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  2388  001200  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  2389  001202  D7F8               	goto	u1355
  2390  001204  5006               	movf	??___fttol+1,w,c
  2391  001206  6E0A               	movwf	___fttol@sign1,c
  2392  001208  8E02               	bsf	___fttol@f1+1,7,c
  2393  00120A  0EFF               	movlw	255
  2394  00120C  1601               	andwf	___fttol@f1,f,c
  2395  00120E  0EFF               	movlw	255
  2396  001210  1602               	andwf	___fttol@f1+1,f,c
  2397  001212  0E00               	movlw	0
  2398  001214  1603               	andwf	___fttol@f1+2,f,c
  2399  001216  5001               	movf	___fttol@f1,w,c
  2400  001218  6E0B               	movwf	___fttol@lval,c
  2401  00121A  5002               	movf	___fttol@f1+1,w,c
  2402  00121C  6E0C               	movwf	___fttol@lval+1,c
  2403  00121E  5003               	movf	___fttol@f1+2,w,c
  2404  001220  6E0D               	movwf	___fttol@lval+2,c
  2405  001222  6A0E               	clrf	___fttol@lval+3,c
  2406  001224  0E8E               	movlw	142
  2407  001226  5E0F               	subwf	___fttol@exp1,f,c
  2408  001228  AE0F               	btfss	___fttol@exp1,7,c
  2409  00122A  D00E               	goto	l466
  2410  00122C  500F               	movf	___fttol@exp1,w,c
  2411  00122E  0A80               	xorlw	128
  2412  001230  0F8F               	addlw	143
  2413  001232  A0D8               	btfss	status,0,c
  2414  001234  D00D               	goto	u1380
  2415  001236  FFFF               	dw	65535	; assembler added errata NOP
  2416  001238  90D8               	bcf	status,0,c
  2417  00123A  320E               	rrcf	___fttol@lval+3,f,c
  2418  00123C  320D               	rrcf	___fttol@lval+2,f,c
  2419  00123E  320C               	rrcf	___fttol@lval+1,f,c
  2420  001240  320B               	rrcf	___fttol@lval,f,c
  2421  001242  3E0F               	incfsz	___fttol@exp1,f,c
  2422  001244  D7F8               	goto	l467
  2423  001246  D019               	goto	u1390
  2424  001248                     l466:
  2425  001248  FFFF               	dw	65535	; assembler added errata NOP
  2426  00124A  0E17               	movlw	23
  2427  00124C  640F               	cpfsgt	___fttol@exp1,c
  2428  00124E  D011               	goto	l472
  2429  001250                     u1380:
  2430  001250  FFFF               	dw	65535	; assembler added errata NOP
  2431  001252  0E00               	movlw	0
  2432  001254  6E01               	movwf	?___fttol,c
  2433  001256  0E00               	movlw	0
  2434  001258  6E02               	movwf	?___fttol+1,c
  2435  00125A  0E00               	movlw	0
  2436  00125C  6E03               	movwf	?___fttol+2,c
  2437  00125E  0E00               	movlw	0
  2438  001260  6E04               	movwf	?___fttol+3,c
  2439  001262  D020               	goto	l1747
  2440  001264  FFFF               	dw	65535	; assembler added errata NOP
  2441  001266  90D8               	bcf	status,0,c
  2442  001268  360B               	rlcf	___fttol@lval,f,c
  2443  00126A  360C               	rlcf	___fttol@lval+1,f,c
  2444  00126C  360D               	rlcf	___fttol@lval+2,f,c
  2445  00126E  360E               	rlcf	___fttol@lval+3,f,c
  2446  001270  060F               	decf	___fttol@exp1,f,c
  2447  001272                     l472:
  2448  001272  FFFF               	dw	65535	; assembler added errata NOP
  2449  001274  500F               	movf	___fttol@exp1,w,c
  2450  001276  A4D8               	btfss	status,2,c
  2451  001278  D7F5               	goto	l473
  2452  00127A                     u1390:
  2453  00127A  FFFF               	dw	65535	; assembler added errata NOP
  2454  00127C  500A               	movf	___fttol@sign1,w,c
  2455  00127E  B4D8               	btfsc	status,2,c
  2456  001280  D008               	goto	l475
  2457  001282  1E0E               	comf	___fttol@lval+3,f,c
  2458  001284  1E0D               	comf	___fttol@lval+2,f,c
  2459  001286  1E0C               	comf	___fttol@lval+1,f,c
  2460  001288  6C0B               	negf	___fttol@lval,c
  2461  00128A  0E00               	movlw	0
  2462  00128C  220C               	addwfc	___fttol@lval+1,f,c
  2463  00128E  220D               	addwfc	___fttol@lval+2,f,c
  2464  001290  220E               	addwfc	___fttol@lval+3,f,c
  2465  001292                     l475:
  2466  001292  FFFF               	dw	65535	; assembler added errata NOP
  2467  001294  C00B  F001         	movff	___fttol@lval,?___fttol
  2468  001298  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  2469  00129C  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  2470  0012A0  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  2471  0012A4                     l1747:
  2472  0012A4  FFFF               	dw	65535	; assembler added errata NOP
  2473  0012A6  0012               	return		;funcret
  2474  0012A8  FFFF               	dw	65535	; errata NOP
  2475  0012AA                     __end_of___fttol:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1l	equ	0xFE1
  2485                           postinc2	equ	0xFDE
  2486                           postdec2	equ	0xFDD
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function ___ftge *****************
  2492 ;; Defined at:
  2493 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  ff1             3    0[COMRAM] float 
  2496 ;;  ff2             3    3[COMRAM] float 
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;		None               void
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2508 ;;      Params:         6       0       0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0       0       0
  2510 ;;      Temps:          3       0       0       0       0       0       0
  2511 ;;      Totals:         9       0       0       0       0       0       0
  2512 ;;Total ram usage:        9 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_DAC
  2518 ;;		_sin
  2519 ;;		_floor
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           	psect	text8
  2524  0016DA                     __ptext8:
  2525                           	opt stack 0
  2526  0016DA                     ___ftge:
  2527                           	opt stack 0
  2528  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ;incstack = 0
  2531  0016DC  AE03               	btfss	___ftge@ff1+2,7,c
  2532  0016DE  D016               	goto	l436
  2533  0016E0  C001  F007         	movff	___ftge@ff1,??___ftge
  2534  0016E4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2535  0016E8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2536  0016EC  1E07               	comf	??___ftge,f,c
  2537  0016EE  1E08               	comf	??___ftge+1,f,c
  2538  0016F0  1E09               	comf	??___ftge+2,f,c
  2539  0016F2  2A07               	incf	??___ftge,f,c
  2540  0016F4  0E00               	movlw	0
  2541  0016F6  2208               	addwfc	??___ftge+1,f,c
  2542  0016F8  2209               	addwfc	??___ftge+2,f,c
  2543  0016FA  0E00               	movlw	0
  2544  0016FC  2407               	addwf	??___ftge,w,c
  2545  0016FE  6E01               	movwf	___ftge@ff1,c
  2546  001700  0E00               	movlw	0
  2547  001702  2008               	addwfc	??___ftge+1,w,c
  2548  001704  6E02               	movwf	___ftge@ff1+1,c
  2549  001706  0E80               	movlw	128
  2550  001708  2009               	addwfc	??___ftge+2,w,c
  2551  00170A  6E03               	movwf	___ftge@ff1+2,c
  2552  00170C                     l436:
  2553  00170C  FFFF               	dw	65535	; assembler added errata NOP
  2554  00170E  AE06               	btfss	___ftge@ff2+2,7,c
  2555  001710  D016               	goto	l437
  2556  001712  C004  F007         	movff	___ftge@ff2,??___ftge
  2557  001716  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2558  00171A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2559  00171E  1E07               	comf	??___ftge,f,c
  2560  001720  1E08               	comf	??___ftge+1,f,c
  2561  001722  1E09               	comf	??___ftge+2,f,c
  2562  001724  2A07               	incf	??___ftge,f,c
  2563  001726  0E00               	movlw	0
  2564  001728  2208               	addwfc	??___ftge+1,f,c
  2565  00172A  2209               	addwfc	??___ftge+2,f,c
  2566  00172C  0E00               	movlw	0
  2567  00172E  2407               	addwf	??___ftge,w,c
  2568  001730  6E04               	movwf	___ftge@ff2,c
  2569  001732  0E00               	movlw	0
  2570  001734  2008               	addwfc	??___ftge+1,w,c
  2571  001736  6E05               	movwf	___ftge@ff2+1,c
  2572  001738  0E80               	movlw	128
  2573  00173A  2009               	addwfc	??___ftge+2,w,c
  2574  00173C  6E06               	movwf	___ftge@ff2+2,c
  2575  00173E                     l437:
  2576  00173E  FFFF               	dw	65535	; assembler added errata NOP
  2577  001740  0E00               	movlw	0
  2578  001742  1A01               	xorwf	___ftge@ff1,f,c
  2579  001744  0E00               	movlw	0
  2580  001746  1A02               	xorwf	___ftge@ff1+1,f,c
  2581  001748  0E80               	movlw	128
  2582  00174A  1A03               	xorwf	___ftge@ff1+2,f,c
  2583  00174C  0E00               	movlw	0
  2584  00174E  1A04               	xorwf	___ftge@ff2,f,c
  2585  001750  0E00               	movlw	0
  2586  001752  1A05               	xorwf	___ftge@ff2+1,f,c
  2587  001754  0E80               	movlw	128
  2588  001756  1A06               	xorwf	___ftge@ff2+2,f,c
  2589  001758  5004               	movf	___ftge@ff2,w,c
  2590  00175A  5C01               	subwf	___ftge@ff1,w,c
  2591  00175C  5005               	movf	___ftge@ff2+1,w,c
  2592  00175E  5802               	subwfb	___ftge@ff1+1,w,c
  2593  001760  5006               	movf	___ftge@ff2+2,w,c
  2594  001762  5803               	subwfb	___ftge@ff1+2,w,c
  2595  001764  B0D8               	btfsc	status,0,c
  2596  001766  D002               	goto	l1505
  2597  001768  90D8               	bcf	status,0,c
  2598  00176A  D002               	goto	l1507
  2599  00176C                     l1505:
  2600  00176C  FFFF               	dw	65535	; assembler added errata NOP
  2601  00176E  80D8               	bsf	status,0,c
  2602  001770                     l1507:
  2603  001770  FFFF               	dw	65535	; assembler added errata NOP
  2604  001772  0012               	return		;funcret
  2605  001774  FFFF               	dw	65535	; errata NOP
  2606  001776                     __end_of___ftge:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           postinc0	equ	0xFEE
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1l	equ	0xFE1
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           
  2622 ;; *************** function ___altoft *****************
  2623 ;; Defined at:
  2624 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  c               4   15[COMRAM] long 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  sign            1   24[COMRAM] unsigned char 
  2629 ;;  exp             1   23[COMRAM] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  3   15[COMRAM] float 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2, status,0, cstack
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2639 ;;      Params:         4       0       0       0       0       0       0
  2640 ;;      Locals:         2       0       0       0       0       0       0
  2641 ;;      Temps:          4       0       0       0       0       0       0
  2642 ;;      Totals:        10       0       0       0       0       0       0
  2643 ;;Total ram usage:       10 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    1
  2646 ;; This function calls:
  2647 ;;		___ftpack
  2648 ;; This function is called by:
  2649 ;;		_DAC
  2650 ;;		_floor
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text9
  2655  001912                     __ptext9:
  2656                           	opt stack 0
  2657  001912                     ___altoft:
  2658                           	opt stack 0
  2659  001912  FFFF               	dw	65535	; assembler added errata NOP
  2660                           
  2661                           ;incstack = 0
  2662  001914  0E00               	movlw	0
  2663  001916  6E19               	movwf	___altoft@sign,c
  2664  001918  0E8E               	movlw	142
  2665  00191A  6E18               	movwf	___altoft@exp,c
  2666  00191C  AE13               	btfss	___altoft@c+3,7,c
  2667  00191E  D012               	goto	l234
  2668  001920  1E13               	comf	___altoft@c+3,f,c
  2669  001922  1E12               	comf	___altoft@c+2,f,c
  2670  001924  1E11               	comf	___altoft@c+1,f,c
  2671  001926  6C10               	negf	___altoft@c,c
  2672  001928  0E00               	movlw	0
  2673  00192A  2211               	addwfc	___altoft@c+1,f,c
  2674  00192C  2212               	addwfc	___altoft@c+2,f,c
  2675  00192E  2213               	addwfc	___altoft@c+3,f,c
  2676  001930  0E01               	movlw	1
  2677  001932  6E19               	movwf	___altoft@sign,c
  2678  001934  D007               	goto	l234
  2679  001936  FFFF               	dw	65535	; assembler added errata NOP
  2680  001938  90D8               	bcf	status,0,c
  2681  00193A  3213               	rrcf	___altoft@c+3,f,c
  2682  00193C  3212               	rrcf	___altoft@c+2,f,c
  2683  00193E  3211               	rrcf	___altoft@c+1,f,c
  2684  001940  3210               	rrcf	___altoft@c,f,c
  2685  001942  2A18               	incf	___altoft@exp,f,c
  2686  001944                     l234:
  2687  001944  FFFF               	dw	65535	; assembler added errata NOP
  2688  001946  0E00               	movlw	0
  2689  001948  1410               	andwf	___altoft@c,w,c
  2690  00194A  6E14               	movwf	??___altoft& (0+255),c
  2691  00194C  0E00               	movlw	0
  2692  00194E  1411               	andwf	___altoft@c+1,w,c
  2693  001950  6E15               	movwf	(??___altoft+1)& (0+255),c
  2694  001952  0E00               	movlw	0
  2695  001954  1412               	andwf	___altoft@c+2,w,c
  2696  001956  6E16               	movwf	(??___altoft+2)& (0+255),c
  2697  001958  0EFF               	movlw	255
  2698  00195A  1413               	andwf	___altoft@c+3,w,c
  2699  00195C  6E17               	movwf	(??___altoft+3)& (0+255),c
  2700  00195E  5014               	movf	??___altoft,w,c
  2701  001960  1015               	iorwf	??___altoft+1,w,c
  2702  001962  1016               	iorwf	??___altoft+2,w,c
  2703  001964  1017               	iorwf	??___altoft+3,w,c
  2704  001966  A4D8               	btfss	status,2,c
  2705  001968  D7E6               	goto	l235
  2706  00196A  C010  F001         	movff	___altoft@c,___ftpack@arg
  2707  00196E  C011  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2708  001972  C012  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2709  001976  C018  F004         	movff	___altoft@exp,___ftpack@exp
  2710  00197A  C019  F005         	movff	___altoft@sign,___ftpack@sign
  2711  00197E  ECAB  F00A         	call	___ftpack	;wreg free
  2712  001982  C001  F010         	movff	?___ftpack,?___altoft
  2713  001986  C002  F011         	movff	?___ftpack+1,?___altoft+1
  2714  00198A  C003  F012         	movff	?___ftpack+2,?___altoft+2
  2715  00198E  0012               	return		;funcret
  2716  001990  FFFF               	dw	65535	; errata NOP
  2717  001992                     __end_of___altoft:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           postinc0	equ	0xFEE
  2724                           wreg	equ	0xFE8
  2725                           postdec1	equ	0xFE5
  2726                           fsr1l	equ	0xFE1
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           fsr2h	equ	0xFDA
  2730                           fsr2l	equ	0xFD9
  2731                           status	equ	0xFD8
  2732                           
  2733 ;; *************** function _eval_poly *****************
  2734 ;; Defined at:
  2735 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  x               3   50[COMRAM] float 
  2738 ;;  d               2   53[COMRAM] PTR const 
  2739 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  2740 ;;  n               2   55[COMRAM] int 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  res             3   59[COMRAM] int 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  3   50[COMRAM] int 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2752 ;;      Params:         7       0       0       0       0       0       0
  2753 ;;      Locals:         3       0       0       0       0       0       0
  2754 ;;      Temps:          2       0       0       0       0       0       0
  2755 ;;      Totals:        12       0       0       0       0       0       0
  2756 ;;Total ram usage:       12 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    2
  2759 ;; This function calls:
  2760 ;;		___ftadd
  2761 ;;		___ftmul
  2762 ;;		___wmul
  2763 ;; This function is called by:
  2764 ;;		_sin
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text10
  2769  0012AA                     __ptext10:
  2770                           	opt stack 0
  2771  0012AA                     _eval_poly:
  2772                           	opt stack 0
  2773  0012AA  FFFF               	dw	65535	; assembler added errata NOP
  2774                           
  2775                           ;incstack = 0
  2776  0012AC  C038  F001         	movff	eval_poly@n,___wmul@multiplier
  2777  0012B0  C039  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  2778  0012B4  0E00               	movlw	0
  2779  0012B6  6E04               	movwf	___wmul@multiplicand+1,c
  2780  0012B8  0E03               	movlw	3
  2781  0012BA  6E03               	movwf	___wmul@multiplicand,c
  2782  0012BC  EC69  F00D         	call	___wmul	;wreg free
  2783  0012C0  C036  F03A         	movff	eval_poly@d,??_eval_poly
  2784  0012C4  C037  F03B         	movff	eval_poly@d+1,??_eval_poly+1
  2785  0012C8  5001               	movf	?___wmul,w,c
  2786  0012CA  263A               	addwf	??_eval_poly,f,c
  2787  0012CC  5002               	movf	?___wmul+1,w,c
  2788  0012CE  223B               	addwfc	??_eval_poly+1,f,c
  2789  0012D0  C03A  FFF6         	movff	??_eval_poly,tblptrl
  2790  0012D4  C03B  FFF7         	movff	??_eval_poly+1,tblptrh
  2791  0012D8                     	if	0	;tblptru may be non-zero
  2792  0012D8                     	endif
  2793  0012D8                     	if	0	;tblptru may be non-zero
  2794  0012D8                     	endif
  2795  0012D8  0009               	tblrd		*+
  2796  0012DA  FFFF               	dw	65535	; errata NOP
  2797  0012DC  CFF5 F03C          	movff	tablat,eval_poly@res
  2798  0012E0  0009               	tblrd		*+
  2799  0012E2  FFFF               	dw	65535	; errata NOP
  2800  0012E4  CFF5 F03D          	movff	tablat,eval_poly@res+1
  2801  0012E8  000A               	tblrd		*-
  2802  0012EA  FFFF               	dw	65535	; errata NOP
  2803  0012EC  CFF5 F03E          	movff	tablat,eval_poly@res+2
  2804  0012F0  D042               	goto	l731
  2805  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  2806  0012F4  C03C  F027         	movff	eval_poly@res,___ftmul@f2
  2807  0012F8  C03D  F028         	movff	eval_poly@res+1,___ftmul@f2+1
  2808  0012FC  C03E  F029         	movff	eval_poly@res+2,___ftmul@f2+2
  2809  001300  C033  F024         	movff	eval_poly@x,___ftmul@f1
  2810  001304  C034  F025         	movff	eval_poly@x+1,___ftmul@f1+1
  2811  001308  C035  F026         	movff	eval_poly@x+2,___ftmul@f1+2
  2812  00130C  ECEF  F007         	call	___ftmul	;wreg free
  2813  001310  C024  F009         	movff	?___ftmul,___ftadd@f1
  2814  001314  C025  F00A         	movff	?___ftmul+1,___ftadd@f1+1
  2815  001318  C026  F00B         	movff	?___ftmul+2,___ftadd@f1+2
  2816  00131C  0E00               	movlw	0
  2817  00131E  6E04               	movwf	___wmul@multiplicand+1,c
  2818  001320  0E03               	movlw	3
  2819  001322  6E03               	movwf	___wmul@multiplicand,c
  2820  001324  0638               	decf	eval_poly@n,f,c
  2821  001326  A0D8               	btfss	status,0,c
  2822  001328  0639               	decf	eval_poly@n+1,f,c
  2823  00132A  C038  F001         	movff	eval_poly@n,___wmul@multiplier
  2824  00132E  C039  F002         	movff	eval_poly@n+1,___wmul@multiplier+1
  2825  001332  EC69  F00D         	call	___wmul	;wreg free
  2826  001336  C036  F03A         	movff	eval_poly@d,??_eval_poly
  2827  00133A  C037  F03B         	movff	eval_poly@d+1,??_eval_poly+1
  2828  00133E  5001               	movf	?___wmul,w,c
  2829  001340  263A               	addwf	??_eval_poly,f,c
  2830  001342  5002               	movf	?___wmul+1,w,c
  2831  001344  223B               	addwfc	??_eval_poly+1,f,c
  2832  001346  C03A  FFF6         	movff	??_eval_poly,tblptrl
  2833  00134A  C03B  FFF7         	movff	??_eval_poly+1,tblptrh
  2834  00134E                     	if	0	;tblptru may be non-zero
  2835  00134E                     	endif
  2836  00134E                     	if	0	;tblptru may be non-zero
  2837  00134E                     	endif
  2838  00134E  0009               	tblrd		*+
  2839  001350  FFFF               	dw	65535	; errata NOP
  2840  001352  CFF5 F00C          	movff	tablat,___ftadd@f2
  2841  001356  0009               	tblrd		*+
  2842  001358  FFFF               	dw	65535	; errata NOP
  2843  00135A  CFF5 F00D          	movff	tablat,___ftadd@f2+1
  2844  00135E  000A               	tblrd		*-
  2845  001360  FFFF               	dw	65535	; errata NOP
  2846  001362  CFF5 F00E          	movff	tablat,___ftadd@f2+2
  2847  001366  EC07  F007         	call	___ftadd	;wreg free
  2848  00136A  C009  F03C         	movff	?___ftadd,eval_poly@res
  2849  00136E  C00A  F03D         	movff	?___ftadd+1,eval_poly@res+1
  2850  001372  C00B  F03E         	movff	?___ftadd+2,eval_poly@res+2
  2851  001376                     l731:
  2852  001376  FFFF               	dw	65535	; assembler added errata NOP
  2853  001378  5038               	movf	eval_poly@n,w,c
  2854  00137A  1039               	iorwf	eval_poly@n+1,w,c
  2855  00137C  A4D8               	btfss	status,2,c
  2856  00137E  D7B9               	goto	l732
  2857  001380  C03C  F033         	movff	eval_poly@res,?_eval_poly
  2858  001384  C03D  F034         	movff	eval_poly@res+1,?_eval_poly+1
  2859  001388  C03E  F035         	movff	eval_poly@res+2,?_eval_poly+2
  2860  00138C  0012               	return		;funcret
  2861  00138E  FFFF               	dw	65535	; errata NOP
  2862  001390                     __end_of_eval_poly:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           postinc0	equ	0xFEE
  2869                           wreg	equ	0xFE8
  2870                           postdec1	equ	0xFE5
  2871                           fsr1l	equ	0xFE1
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function ___wmul *****************
  2879 ;; Defined at:
  2880 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  multiplier      2    0[COMRAM] unsigned int 
  2883 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  product         2    4[COMRAM] unsigned int 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  2    0[COMRAM] unsigned int 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0, prodl, prodh
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2895 ;;      Params:         4       0       0       0       0       0       0
  2896 ;;      Locals:         2       0       0       0       0       0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0
  2898 ;;      Totals:         6       0       0       0       0       0       0
  2899 ;;Total ram usage:        6 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_eval_poly
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text11
  2909  001AD2                     __ptext11:
  2910                           	opt stack 0
  2911  001AD2                     ___wmul:
  2912                           	opt stack 0
  2913  001AD2  FFFF               	dw	65535	; assembler added errata NOP
  2914                           
  2915                           ;incstack = 0
  2916  001AD4  5001               	movf	___wmul@multiplier,w,c
  2917  001AD6  0203               	mulwf	___wmul@multiplicand,c
  2918  001AD8  CFF3 F005          	movff	prodl,___wmul@product
  2919  001ADC  CFF4 F006          	movff	prodh,___wmul@product+1
  2920  001AE0  5001               	movf	___wmul@multiplier,w,c
  2921  001AE2  0204               	mulwf	___wmul@multiplicand+1,c
  2922  001AE4  50F3               	movf	prodl,w,c
  2923  001AE6  2606               	addwf	___wmul@product+1,f,c
  2924  001AE8  5002               	movf	___wmul@multiplier+1,w,c
  2925  001AEA  0203               	mulwf	___wmul@multiplicand,c
  2926  001AEC  50F3               	movf	prodl,w,c
  2927  001AEE  2606               	addwf	___wmul@product+1,f,c
  2928  001AF0  C005  F001         	movff	___wmul@product,?___wmul
  2929  001AF4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2930  001AF8  0012               	return		;funcret
  2931  001AFA  FFFF               	dw	65535	; errata NOP
  2932  001AFC                     __end_of___wmul:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function ___ftmul *****************
  2951 ;; Defined at:
  2952 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  f1              3   35[COMRAM] float 
  2955 ;;  f2              3   38[COMRAM] float 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  f3_as_produc    3   45[COMRAM] unsigned um
  2958 ;;  sign            1   49[COMRAM] unsigned char 
  2959 ;;  cntr            1   48[COMRAM] unsigned char 
  2960 ;;  exp             1   44[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  3   35[COMRAM] float 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2970 ;;      Params:         6       0       0       0       0       0       0
  2971 ;;      Locals:         6       0       0       0       0       0       0
  2972 ;;      Temps:          3       0       0       0       0       0       0
  2973 ;;      Totals:        15       0       0       0       0       0       0
  2974 ;;Total ram usage:       15 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    1
  2977 ;; This function calls:
  2978 ;;		___ftpack
  2979 ;; This function is called by:
  2980 ;;		_DAC
  2981 ;;		_sin
  2982 ;;		_eval_poly
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text12
  2987  000FDE                     __ptext12:
  2988                           	opt stack 0
  2989  000FDE                     ___ftmul:
  2990                           	opt stack 0
  2991  000FDE  FFFF               	dw	65535	; assembler added errata NOP
  2992                           
  2993                           ;incstack = 0
  2994  000FE0  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  2995  000FE4  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  2996  000FE6  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  2997  000FE8  3425               	rlcf	___ftmul@f1+1,w,c
  2998  000FEA  362A               	rlcf	??___ftmul& (0+255),f,c
  2999  000FEC  E301               	bnc	u1241
  3000  000FEE  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3001  000FF0                     u1241:
  3002  000FF0  502A               	movf	??___ftmul,w,c
  3003  000FF2  6E2D               	movwf	___ftmul@exp,c
  3004  000FF4  502D               	movf	___ftmul@exp,w,c
  3005  000FF6  B4D8               	btfsc	status,2,c
  3006  000FF8  D00D               	goto	u1270
  3007  000FFA  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  3008  000FFE  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  3009  001000  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  3010  001002  3428               	rlcf	___ftmul@f2+1,w,c
  3011  001004  362A               	rlcf	??___ftmul& (0+255),f,c
  3012  001006  E301               	bnc	u1261
  3013  001008  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  3014  00100A                     u1261:
  3015  00100A  502A               	movf	??___ftmul,w,c
  3016  00100C  6E32               	movwf	___ftmul@sign,c
  3017  00100E  5032               	movf	___ftmul@sign,w,c
  3018  001010  A4D8               	btfss	status,2,c
  3019  001012  D008               	goto	l445
  3020  001014                     u1270:
  3021  001014  FFFF               	dw	65535	; assembler added errata NOP
  3022  001016  0E00               	movlw	0
  3023  001018  6E24               	movwf	?___ftmul,c
  3024  00101A  0E00               	movlw	0
  3025  00101C  6E25               	movwf	?___ftmul+1,c
  3026  00101E  0E00               	movlw	0
  3027  001020  6E26               	movwf	?___ftmul+2,c
  3028  001022  D056               	goto	l1683
  3029  001024                     l445:
  3030  001024  FFFF               	dw	65535	; assembler added errata NOP
  3031  001026  5032               	movf	___ftmul@sign,w,c
  3032  001028  0F7B               	addlw	123
  3033  00102A  262D               	addwf	___ftmul@exp,f,c
  3034  00102C  C026  F032         	movff	___ftmul@f1+2,___ftmul@sign
  3035  001030  5029               	movf	___ftmul@f2+2,w,c
  3036  001032  1A32               	xorwf	___ftmul@sign,f,c
  3037  001034  0E80               	movlw	128
  3038  001036  1632               	andwf	___ftmul@sign,f,c
  3039  001038  8E25               	bsf	___ftmul@f1+1,7,c
  3040  00103A  8E28               	bsf	___ftmul@f2+1,7,c
  3041  00103C  0EFF               	movlw	255
  3042  00103E  1627               	andwf	___ftmul@f2,f,c
  3043  001040  0EFF               	movlw	255
  3044  001042  1628               	andwf	___ftmul@f2+1,f,c
  3045  001044  0E00               	movlw	0
  3046  001046  1629               	andwf	___ftmul@f2+2,f,c
  3047  001048  0E00               	movlw	0
  3048  00104A  6E2E               	movwf	___ftmul@f3_as_product,c
  3049  00104C  0E00               	movlw	0
  3050  00104E  6E2F               	movwf	___ftmul@f3_as_product+1,c
  3051  001050  0E00               	movlw	0
  3052  001052  6E30               	movwf	___ftmul@f3_as_product+2,c
  3053  001054  0E07               	movlw	7
  3054  001056  6E31               	movwf	___ftmul@cntr,c
  3055  001058  FFFF               	dw	65535	; assembler added errata NOP
  3056  00105A  A024               	btfss	___ftmul@f1,0,c
  3057  00105C  D006               	goto	l447
  3058  00105E  5027               	movf	___ftmul@f2,w,c
  3059  001060  262E               	addwf	___ftmul@f3_as_product,f,c
  3060  001062  5028               	movf	___ftmul@f2+1,w,c
  3061  001064  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3062  001066  5029               	movf	___ftmul@f2+2,w,c
  3063  001068  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3064  00106A                     l447:
  3065  00106A  FFFF               	dw	65535	; assembler added errata NOP
  3066  00106C  90D8               	bcf	status,0,c
  3067  00106E  3226               	rrcf	___ftmul@f1+2,f,c
  3068  001070  3225               	rrcf	___ftmul@f1+1,f,c
  3069  001072  3224               	rrcf	___ftmul@f1,f,c
  3070  001074  90D8               	bcf	status,0,c
  3071  001076  3627               	rlcf	___ftmul@f2,f,c
  3072  001078  3628               	rlcf	___ftmul@f2+1,f,c
  3073  00107A  3629               	rlcf	___ftmul@f2+2,f,c
  3074  00107C  2E31               	decfsz	___ftmul@cntr,f,c
  3075  00107E  D7EC               	goto	l446
  3076  001080  0E09               	movlw	9
  3077  001082  6E31               	movwf	___ftmul@cntr,c
  3078  001084  FFFF               	dw	65535	; assembler added errata NOP
  3079  001086  A024               	btfss	___ftmul@f1,0,c
  3080  001088  D006               	goto	l450
  3081  00108A  5027               	movf	___ftmul@f2,w,c
  3082  00108C  262E               	addwf	___ftmul@f3_as_product,f,c
  3083  00108E  5028               	movf	___ftmul@f2+1,w,c
  3084  001090  222F               	addwfc	___ftmul@f3_as_product+1,f,c
  3085  001092  5029               	movf	___ftmul@f2+2,w,c
  3086  001094  2230               	addwfc	___ftmul@f3_as_product+2,f,c
  3087  001096                     l450:
  3088  001096  FFFF               	dw	65535	; assembler added errata NOP
  3089  001098  90D8               	bcf	status,0,c
  3090  00109A  3226               	rrcf	___ftmul@f1+2,f,c
  3091  00109C  3225               	rrcf	___ftmul@f1+1,f,c
  3092  00109E  3224               	rrcf	___ftmul@f1,f,c
  3093  0010A0  90D8               	bcf	status,0,c
  3094  0010A2  3230               	rrcf	___ftmul@f3_as_product+2,f,c
  3095  0010A4  322F               	rrcf	___ftmul@f3_as_product+1,f,c
  3096  0010A6  322E               	rrcf	___ftmul@f3_as_product,f,c
  3097  0010A8  2E31               	decfsz	___ftmul@cntr,f,c
  3098  0010AA  D7EC               	goto	l449
  3099  0010AC  C02E  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3100  0010B0  C02F  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3101  0010B4  C030  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3102  0010B8  C02D  F004         	movff	___ftmul@exp,___ftpack@exp
  3103  0010BC  C032  F005         	movff	___ftmul@sign,___ftpack@sign
  3104  0010C0  ECAB  F00A         	call	___ftpack	;wreg free
  3105  0010C4  C001  F024         	movff	?___ftpack,?___ftmul
  3106  0010C8  C002  F025         	movff	?___ftpack+1,?___ftmul+1
  3107  0010CC  C003  F026         	movff	?___ftpack+2,?___ftmul+2
  3108  0010D0                     l1683:
  3109  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  3110  0010D2  0012               	return		;funcret
  3111  0010D4  FFFF               	dw	65535	; errata NOP
  3112  0010D6                     __end_of___ftmul:
  3113                           	opt stack 0
  3114                           tblptru	equ	0xFF8
  3115                           tblptrh	equ	0xFF7
  3116                           tblptrl	equ	0xFF6
  3117                           tablat	equ	0xFF5
  3118                           prodh	equ	0xFF4
  3119                           prodl	equ	0xFF3
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           fsr1l	equ	0xFE1
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function ___ftsub *****************
  3131 ;; Defined at:
  3132 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  f1              3   33[COMRAM] float 
  3135 ;;  f2              3   36[COMRAM] float 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  3   33[COMRAM] float 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         6       0       0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0
  3150 ;;      Totals:         6       0       0       0       0       0       0
  3151 ;;Total ram usage:        6 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    2
  3154 ;; This function calls:
  3155 ;;		___ftadd
  3156 ;; This function is called by:
  3157 ;;		_sin
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text13
  3162  0019F0                     __ptext13:
  3163                           	opt stack 0
  3164  0019F0                     ___ftsub:
  3165                           	opt stack 0
  3166  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  3167                           
  3168                           ;incstack = 0
  3169  0019F2  5025               	movf	___ftsub@f2,w,c
  3170  0019F4  1026               	iorwf	___ftsub@f2+1,w,c
  3171  0019F6  1027               	iorwf	___ftsub@f2+2,w,c
  3172  0019F8  B4D8               	btfsc	status,2,c
  3173  0019FA  D006               	goto	l460
  3174  0019FC  0E00               	movlw	0
  3175  0019FE  1A25               	xorwf	___ftsub@f2,f,c
  3176  001A00  0E00               	movlw	0
  3177  001A02  1A26               	xorwf	___ftsub@f2+1,f,c
  3178  001A04  0E80               	movlw	128
  3179  001A06  1A27               	xorwf	___ftsub@f2+2,f,c
  3180  001A08                     l460:
  3181  001A08  FFFF               	dw	65535	; assembler added errata NOP
  3182  001A0A  C022  F009         	movff	___ftsub@f1,___ftadd@f1
  3183  001A0E  C023  F00A         	movff	___ftsub@f1+1,___ftadd@f1+1
  3184  001A12  C024  F00B         	movff	___ftsub@f1+2,___ftadd@f1+2
  3185  001A16  C025  F00C         	movff	___ftsub@f2,___ftadd@f2
  3186  001A1A  C026  F00D         	movff	___ftsub@f2+1,___ftadd@f2+1
  3187  001A1E  C027  F00E         	movff	___ftsub@f2+2,___ftadd@f2+2
  3188  001A22  EC07  F007         	call	___ftadd	;wreg free
  3189  001A26  C009  F022         	movff	?___ftadd,?___ftsub
  3190  001A2A  C00A  F023         	movff	?___ftadd+1,?___ftsub+1
  3191  001A2E  C00B  F024         	movff	?___ftadd+2,?___ftsub+2
  3192  001A32  0012               	return		;funcret
  3193  001A34  FFFF               	dw	65535	; errata NOP
  3194  001A36                     __end_of___ftsub:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1l	equ	0xFE1
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function ___ftadd *****************
  3213 ;; Defined at:
  3214 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  f1              3    8[COMRAM] float 
  3217 ;;  f2              3   11[COMRAM] float 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  exp1            1   19[COMRAM] unsigned char 
  3220 ;;  exp2            1   18[COMRAM] unsigned char 
  3221 ;;  sign            1   17[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  3    8[COMRAM] float 
  3224 ;; Registers used:
  3225 ;;		wreg, status,2, status,0, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         6       0       0       0       0       0       0
  3232 ;;      Locals:         3       0       0       0       0       0       0
  3233 ;;      Temps:          3       0       0       0       0       0       0
  3234 ;;      Totals:        12       0       0       0       0       0       0
  3235 ;;Total ram usage:       12 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    1
  3238 ;; This function calls:
  3239 ;;		___ftpack
  3240 ;; This function is called by:
  3241 ;;		_DAC
  3242 ;;		___ftsub
  3243 ;;		_sin
  3244 ;;		_eval_poly
  3245 ;;		_floor
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text14
  3250  000E0E                     __ptext14:
  3251                           	opt stack 0
  3252  000E0E                     ___ftadd:
  3253                           	opt stack 0
  3254  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  3255                           
  3256                           ;incstack = 0
  3257  000E10  C00B  F00F         	movff	___ftadd@f1+2,??___ftadd
  3258  000E14  6A10               	clrf	(??___ftadd+1)& (0+255),c
  3259  000E16  6A11               	clrf	(??___ftadd+2)& (0+255),c
  3260  000E18  340A               	rlcf	___ftadd@f1+1,w,c
  3261  000E1A  360F               	rlcf	??___ftadd& (0+255),f,c
  3262  000E1C  E301               	bnc	u1031
  3263  000E1E  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  3264  000E20                     u1031:
  3265  000E20  500F               	movf	??___ftadd,w,c
  3266  000E22  6E14               	movwf	___ftadd@exp1,c
  3267  000E24  C00E  F00F         	movff	___ftadd@f2+2,??___ftadd
  3268  000E28  6A10               	clrf	(??___ftadd+1)& (0+255),c
  3269  000E2A  6A11               	clrf	(??___ftadd+2)& (0+255),c
  3270  000E2C  340D               	rlcf	___ftadd@f2+1,w,c
  3271  000E2E  360F               	rlcf	??___ftadd& (0+255),f,c
  3272  000E30  E301               	bnc	u1041
  3273  000E32  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  3274  000E34                     u1041:
  3275  000E34  500F               	movf	??___ftadd,w,c
  3276  000E36  6E13               	movwf	___ftadd@exp2,c
  3277  000E38  5014               	movf	___ftadd@exp1,w,c
  3278  000E3A  B4D8               	btfsc	status,2,c
  3279  000E3C  D00B               	goto	u1070
  3280  000E3E  5013               	movf	___ftadd@exp2,w,c
  3281  000E40  5C14               	subwf	___ftadd@exp1,w,c
  3282  000E42  B0D8               	btfsc	status,0,c
  3283  000E44  D00F               	goto	l395
  3284  000E46  5014               	movf	___ftadd@exp1,w,c
  3285  000E48  0800               	sublw	0
  3286  000E4A  2413               	addwf	___ftadd@exp2,w,c
  3287  000E4C  6E0F               	movwf	??___ftadd& (0+255),c
  3288  000E4E  0E18               	movlw	24
  3289  000E50  640F               	cpfsgt	??___ftadd,c
  3290  000E52  D008               	goto	l395
  3291  000E54                     u1070:
  3292  000E54  FFFF               	dw	65535	; assembler added errata NOP
  3293  000E56  C00C  F009         	movff	___ftadd@f2,?___ftadd
  3294  000E5A  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  3295  000E5E  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  3296  000E62  D0BA               	goto	l1635
  3297  000E64                     l395:
  3298  000E64  FFFF               	dw	65535	; assembler added errata NOP
  3299  000E66  5013               	movf	___ftadd@exp2,w,c
  3300  000E68  B4D8               	btfsc	status,2,c
  3301  000E6A  D00B               	goto	u1100
  3302  000E6C  5014               	movf	___ftadd@exp1,w,c
  3303  000E6E  5C13               	subwf	___ftadd@exp2,w,c
  3304  000E70  B0D8               	btfsc	status,0,c
  3305  000E72  D00F               	goto	l399
  3306  000E74  5013               	movf	___ftadd@exp2,w,c
  3307  000E76  0800               	sublw	0
  3308  000E78  2414               	addwf	___ftadd@exp1,w,c
  3309  000E7A  6E0F               	movwf	??___ftadd& (0+255),c
  3310  000E7C  0E18               	movlw	24
  3311  000E7E  640F               	cpfsgt	??___ftadd,c
  3312  000E80  D008               	goto	l399
  3313  000E82                     u1100:
  3314  000E82  FFFF               	dw	65535	; assembler added errata NOP
  3315  000E84  C009  F009         	movff	___ftadd@f1,?___ftadd
  3316  000E88  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  3317  000E8C  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  3318  000E90  D0A3               	goto	l1635
  3319  000E92                     l399:
  3320  000E92  FFFF               	dw	65535	; assembler added errata NOP
  3321  000E94  0E06               	movlw	6
  3322  000E96  6E12               	movwf	___ftadd@sign,c
  3323  000E98  BE0B               	btfsc	___ftadd@f1+2,7,c
  3324  000E9A  8E12               	bsf	___ftadd@sign,7,c
  3325  000E9C  BE0E               	btfsc	___ftadd@f2+2,7,c
  3326  000E9E  8C12               	bsf	___ftadd@sign,6,c
  3327  000EA0  8E0A               	bsf	___ftadd@f1+1,7,c
  3328  000EA2  0EFF               	movlw	255
  3329  000EA4  1609               	andwf	___ftadd@f1,f,c
  3330  000EA6  0EFF               	movlw	255
  3331  000EA8  160A               	andwf	___ftadd@f1+1,f,c
  3332  000EAA  0E00               	movlw	0
  3333  000EAC  160B               	andwf	___ftadd@f1+2,f,c
  3334  000EAE  8E0D               	bsf	___ftadd@f2+1,7,c
  3335  000EB0  0EFF               	movlw	255
  3336  000EB2  160C               	andwf	___ftadd@f2,f,c
  3337  000EB4  0EFF               	movlw	255
  3338  000EB6  160D               	andwf	___ftadd@f2+1,f,c
  3339  000EB8  0E00               	movlw	0
  3340  000EBA  160E               	andwf	___ftadd@f2+2,f,c
  3341  000EBC  5013               	movf	___ftadd@exp2,w,c
  3342  000EBE  5C14               	subwf	___ftadd@exp1,w,c
  3343  000EC0  B0D8               	btfsc	status,0,c
  3344  000EC2  D01E               	goto	l404
  3345  000EC4                     u1130:
  3346  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  3347  000EC6  90D8               	bcf	status,0,c
  3348  000EC8  360C               	rlcf	___ftadd@f2,f,c
  3349  000ECA  360D               	rlcf	___ftadd@f2+1,f,c
  3350  000ECC  360E               	rlcf	___ftadd@f2+2,f,c
  3351  000ECE  0613               	decf	___ftadd@exp2,f,c
  3352  000ED0  5014               	movf	___ftadd@exp1,w,c
  3353  000ED2  1813               	xorwf	___ftadd@exp2,w,c
  3354  000ED4  B4D8               	btfsc	status,2,c
  3355  000ED6  D00E               	goto	l409
  3356  000ED8  0612               	decf	___ftadd@sign,f,c
  3357  000EDA  C012  F00F         	movff	___ftadd@sign,??___ftadd
  3358  000EDE  0E07               	movlw	7
  3359  000EE0  160F               	andwf	??___ftadd,f,c
  3360  000EE2  B4D8               	btfsc	status,2,c
  3361  000EE4  D007               	goto	l409
  3362  000EE6  D7EE               	goto	u1130
  3363  000EE8  FFFF               	dw	65535	; assembler added errata NOP
  3364  000EEA  90D8               	bcf	status,0,c
  3365  000EEC  320B               	rrcf	___ftadd@f1+2,f,c
  3366  000EEE  320A               	rrcf	___ftadd@f1+1,f,c
  3367  000EF0  3209               	rrcf	___ftadd@f1,f,c
  3368  000EF2  2A14               	incf	___ftadd@exp1,f,c
  3369  000EF4                     l409:
  3370  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  3371  000EF6  5013               	movf	___ftadd@exp2,w,c
  3372  000EF8  1814               	xorwf	___ftadd@exp1,w,c
  3373  000EFA  B4D8               	btfsc	status,2,c
  3374  000EFC  D023               	goto	u1200
  3375  000EFE  D7F4               	goto	l410
  3376  000F00                     l404:
  3377  000F00  FFFF               	dw	65535	; assembler added errata NOP
  3378  000F02  5014               	movf	___ftadd@exp1,w,c
  3379  000F04  5C13               	subwf	___ftadd@exp2,w,c
  3380  000F06  B0D8               	btfsc	status,0,c
  3381  000F08  D01D               	goto	u1200
  3382  000F0A                     u1170:
  3383  000F0A  FFFF               	dw	65535	; assembler added errata NOP
  3384  000F0C  90D8               	bcf	status,0,c
  3385  000F0E  3609               	rlcf	___ftadd@f1,f,c
  3386  000F10  360A               	rlcf	___ftadd@f1+1,f,c
  3387  000F12  360B               	rlcf	___ftadd@f1+2,f,c
  3388  000F14  0614               	decf	___ftadd@exp1,f,c
  3389  000F16  5014               	movf	___ftadd@exp1,w,c
  3390  000F18  1813               	xorwf	___ftadd@exp2,w,c
  3391  000F1A  B4D8               	btfsc	status,2,c
  3392  000F1C  D00E               	goto	l418
  3393  000F1E  0612               	decf	___ftadd@sign,f,c
  3394  000F20  C012  F00F         	movff	___ftadd@sign,??___ftadd
  3395  000F24  0E07               	movlw	7
  3396  000F26  160F               	andwf	??___ftadd,f,c
  3397  000F28  B4D8               	btfsc	status,2,c
  3398  000F2A  D007               	goto	l418
  3399  000F2C  D7EE               	goto	u1170
  3400  000F2E  FFFF               	dw	65535	; assembler added errata NOP
  3401  000F30  90D8               	bcf	status,0,c
  3402  000F32  320E               	rrcf	___ftadd@f2+2,f,c
  3403  000F34  320D               	rrcf	___ftadd@f2+1,f,c
  3404  000F36  320C               	rrcf	___ftadd@f2,f,c
  3405  000F38  2A13               	incf	___ftadd@exp2,f,c
  3406  000F3A                     l418:
  3407  000F3A  FFFF               	dw	65535	; assembler added errata NOP
  3408  000F3C  5013               	movf	___ftadd@exp2,w,c
  3409  000F3E  1814               	xorwf	___ftadd@exp1,w,c
  3410  000F40  A4D8               	btfss	status,2,c
  3411  000F42  D7F5               	goto	l419
  3412  000F44                     u1200:
  3413  000F44  FFFF               	dw	65535	; assembler added errata NOP
  3414  000F46  AE12               	btfss	___ftadd@sign,7,c
  3415  000F48  D00C               	goto	l421
  3416  000F4A  0EFF               	movlw	255
  3417  000F4C  1A09               	xorwf	___ftadd@f1,f,c
  3418  000F4E  0EFF               	movlw	255
  3419  000F50  1A0A               	xorwf	___ftadd@f1+1,f,c
  3420  000F52  0EFF               	movlw	255
  3421  000F54  1A0B               	xorwf	___ftadd@f1+2,f,c
  3422  000F56  0E01               	movlw	1
  3423  000F58  2609               	addwf	___ftadd@f1,f,c
  3424  000F5A  0E00               	movlw	0
  3425  000F5C  220A               	addwfc	___ftadd@f1+1,f,c
  3426  000F5E  0E00               	movlw	0
  3427  000F60  220B               	addwfc	___ftadd@f1+2,f,c
  3428  000F62                     l421:
  3429  000F62  FFFF               	dw	65535	; assembler added errata NOP
  3430  000F64  AC12               	btfss	___ftadd@sign,6,c
  3431  000F66  D00C               	goto	l422
  3432  000F68  0EFF               	movlw	255
  3433  000F6A  1A0C               	xorwf	___ftadd@f2,f,c
  3434  000F6C  0EFF               	movlw	255
  3435  000F6E  1A0D               	xorwf	___ftadd@f2+1,f,c
  3436  000F70  0EFF               	movlw	255
  3437  000F72  1A0E               	xorwf	___ftadd@f2+2,f,c
  3438  000F74  0E01               	movlw	1
  3439  000F76  260C               	addwf	___ftadd@f2,f,c
  3440  000F78  0E00               	movlw	0
  3441  000F7A  220D               	addwfc	___ftadd@f2+1,f,c
  3442  000F7C  0E00               	movlw	0
  3443  000F7E  220E               	addwfc	___ftadd@f2+2,f,c
  3444  000F80                     l422:
  3445  000F80  FFFF               	dw	65535	; assembler added errata NOP
  3446  000F82  0E00               	movlw	0
  3447  000F84  6E12               	movwf	___ftadd@sign,c
  3448  000F86  5009               	movf	___ftadd@f1,w,c
  3449  000F88  260C               	addwf	___ftadd@f2,f,c
  3450  000F8A  500A               	movf	___ftadd@f1+1,w,c
  3451  000F8C  220D               	addwfc	___ftadd@f2+1,f,c
  3452  000F8E  500B               	movf	___ftadd@f1+2,w,c
  3453  000F90  220E               	addwfc	___ftadd@f2+2,f,c
  3454  000F92  AE0E               	btfss	___ftadd@f2+2,7,c
  3455  000F94  D00E               	goto	l423
  3456  000F96  0EFF               	movlw	255
  3457  000F98  1A0C               	xorwf	___ftadd@f2,f,c
  3458  000F9A  0EFF               	movlw	255
  3459  000F9C  1A0D               	xorwf	___ftadd@f2+1,f,c
  3460  000F9E  0EFF               	movlw	255
  3461  000FA0  1A0E               	xorwf	___ftadd@f2+2,f,c
  3462  000FA2  0E01               	movlw	1
  3463  000FA4  260C               	addwf	___ftadd@f2,f,c
  3464  000FA6  0E00               	movlw	0
  3465  000FA8  220D               	addwfc	___ftadd@f2+1,f,c
  3466  000FAA  0E00               	movlw	0
  3467  000FAC  220E               	addwfc	___ftadd@f2+2,f,c
  3468  000FAE  0E01               	movlw	1
  3469  000FB0  6E12               	movwf	___ftadd@sign,c
  3470  000FB2                     l423:
  3471  000FB2  FFFF               	dw	65535	; assembler added errata NOP
  3472  000FB4  C00C  F001         	movff	___ftadd@f2,___ftpack@arg
  3473  000FB8  C00D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3474  000FBC  C00E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3475  000FC0  C014  F004         	movff	___ftadd@exp1,___ftpack@exp
  3476  000FC4  C012  F005         	movff	___ftadd@sign,___ftpack@sign
  3477  000FC8  ECAB  F00A         	call	___ftpack	;wreg free
  3478  000FCC  C001  F009         	movff	?___ftpack,?___ftadd
  3479  000FD0  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  3480  000FD4  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  3481  000FD8                     l1635:
  3482  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  3483  000FDA  0012               	return		;funcret
  3484  000FDC  FFFF               	dw	65535	; errata NOP
  3485  000FDE                     __end_of___ftadd:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           prodh	equ	0xFF4
  3492                           prodl	equ	0xFF3
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           postdec1	equ	0xFE5
  3496                           fsr1l	equ	0xFE1
  3497                           postinc2	equ	0xFDE
  3498                           postdec2	equ	0xFDD
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function ___ftneg *****************
  3504 ;; Defined at:
  3505 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  f1              3    0[COMRAM] float 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  3    0[COMRAM] float 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3519 ;;      Params:         3       0       0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0
  3522 ;;      Totals:         3       0       0       0       0       0       0
  3523 ;;Total ram usage:        3 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; This function calls:
  3526 ;;		Nothing
  3527 ;; This function is called by:
  3528 ;;		_sin
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text15
  3533  001AFC                     __ptext15:
  3534                           	opt stack 0
  3535  001AFC                     ___ftneg:
  3536                           	opt stack 0
  3537  001AFC  FFFF               	dw	65535	; assembler added errata NOP
  3538                           
  3539                           ;incstack = 0
  3540  001AFE  5001               	movf	___ftneg@f1,w,c
  3541  001B00  1002               	iorwf	___ftneg@f1+1,w,c
  3542  001B02  1003               	iorwf	___ftneg@f1+2,w,c
  3543  001B04  B4D8               	btfsc	status,2,c
  3544  001B06  D006               	goto	l454
  3545  001B08  0E00               	movlw	0
  3546  001B0A  1A01               	xorwf	___ftneg@f1,f,c
  3547  001B0C  0E00               	movlw	0
  3548  001B0E  1A02               	xorwf	___ftneg@f1+1,f,c
  3549  001B10  0E80               	movlw	128
  3550  001B12  1A03               	xorwf	___ftneg@f1+2,f,c
  3551  001B14                     l454:
  3552  001B14  FFFF               	dw	65535	; assembler added errata NOP
  3553  001B16  C001  F001         	movff	___ftneg@f1,?___ftneg
  3554  001B1A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  3555  001B1E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  3556  001B22  0012               	return		;funcret
  3557  001B24  FFFF               	dw	65535	; errata NOP
  3558  001B26                     __end_of___ftneg:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           postdec1	equ	0xFE5
  3569                           fsr1l	equ	0xFE1
  3570                           postinc2	equ	0xFDE
  3571                           postdec2	equ	0xFDD
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function ___ftdiv *****************
  3577 ;; Defined at:
  3578 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  f1              3   20[COMRAM] float 
  3581 ;;  f2              3   23[COMRAM] float 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  f3              3   30[COMRAM] float 
  3584 ;;  sign            1   34[COMRAM] unsigned char 
  3585 ;;  exp             1   33[COMRAM] unsigned char 
  3586 ;;  cntr            1   29[COMRAM] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  3   20[COMRAM] float 
  3589 ;; Registers used:
  3590 ;;		wreg, status,2, status,0, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3596 ;;      Params:         6       0       0       0       0       0       0
  3597 ;;      Locals:         6       0       0       0       0       0       0
  3598 ;;      Temps:          3       0       0       0       0       0       0
  3599 ;;      Totals:        15       0       0       0       0       0       0
  3600 ;;Total ram usage:       15 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    1
  3603 ;; This function calls:
  3604 ;;		___ftpack
  3605 ;; This function is called by:
  3606 ;;		_DAC
  3607 ;;		_sin
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text16
  3612  001390                     __ptext16:
  3613                           	opt stack 0
  3614  001390                     ___ftdiv:
  3615                           	opt stack 0
  3616  001390  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ;incstack = 0
  3619  001392  C017  F01B         	movff	___ftdiv@f1+2,??___ftdiv
  3620  001396  6A1C               	clrf	(??___ftdiv+1)& (0+255),c
  3621  001398  6A1D               	clrf	(??___ftdiv+2)& (0+255),c
  3622  00139A  3416               	rlcf	___ftdiv@f1+1,w,c
  3623  00139C  361B               	rlcf	??___ftdiv& (0+255),f,c
  3624  00139E  E301               	bnc	u1431
  3625  0013A0  801C               	bsf	(??___ftdiv+1)& (0+255),0,c
  3626  0013A2                     u1431:
  3627  0013A2  501B               	movf	??___ftdiv,w,c
  3628  0013A4  6E22               	movwf	___ftdiv@exp,c
  3629  0013A6  5022               	movf	___ftdiv@exp,w,c
  3630  0013A8  B4D8               	btfsc	status,2,c
  3631  0013AA  D00D               	goto	u1460
  3632  0013AC  C01A  F01B         	movff	___ftdiv@f2+2,??___ftdiv
  3633  0013B0  6A1C               	clrf	(??___ftdiv+1)& (0+255),c
  3634  0013B2  6A1D               	clrf	(??___ftdiv+2)& (0+255),c
  3635  0013B4  3419               	rlcf	___ftdiv@f2+1,w,c
  3636  0013B6  361B               	rlcf	??___ftdiv& (0+255),f,c
  3637  0013B8  E301               	bnc	u1451
  3638  0013BA  801C               	bsf	(??___ftdiv+1)& (0+255),0,c
  3639  0013BC                     u1451:
  3640  0013BC  501B               	movf	??___ftdiv,w,c
  3641  0013BE  6E23               	movwf	___ftdiv@sign,c
  3642  0013C0  5023               	movf	___ftdiv@sign,w,c
  3643  0013C2  A4D8               	btfss	status,2,c
  3644  0013C4  D008               	goto	l430
  3645  0013C6                     u1460:
  3646  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  3647  0013C8  0E00               	movlw	0
  3648  0013CA  6E15               	movwf	?___ftdiv,c
  3649  0013CC  0E00               	movlw	0
  3650  0013CE  6E16               	movwf	?___ftdiv+1,c
  3651  0013D0  0E00               	movlw	0
  3652  0013D2  6E17               	movwf	?___ftdiv+2,c
  3653  0013D4  D04D               	goto	l1809
  3654  0013D6                     l430:
  3655  0013D6  FFFF               	dw	65535	; assembler added errata NOP
  3656  0013D8  0E00               	movlw	0
  3657  0013DA  6E1F               	movwf	___ftdiv@f3,c
  3658  0013DC  0E00               	movlw	0
  3659  0013DE  6E20               	movwf	___ftdiv@f3+1,c
  3660  0013E0  0E00               	movlw	0
  3661  0013E2  6E21               	movwf	___ftdiv@f3+2,c
  3662  0013E4  5023               	movf	___ftdiv@sign,w,c
  3663  0013E6  0F89               	addlw	137
  3664  0013E8  5E22               	subwf	___ftdiv@exp,f,c
  3665  0013EA  C017  F023         	movff	___ftdiv@f1+2,___ftdiv@sign
  3666  0013EE  501A               	movf	___ftdiv@f2+2,w,c
  3667  0013F0  1A23               	xorwf	___ftdiv@sign,f,c
  3668  0013F2  0E80               	movlw	128
  3669  0013F4  1623               	andwf	___ftdiv@sign,f,c
  3670  0013F6  8E16               	bsf	___ftdiv@f1+1,7,c
  3671  0013F8  0EFF               	movlw	255
  3672  0013FA  1615               	andwf	___ftdiv@f1,f,c
  3673  0013FC  0EFF               	movlw	255
  3674  0013FE  1616               	andwf	___ftdiv@f1+1,f,c
  3675  001400  0E00               	movlw	0
  3676  001402  1617               	andwf	___ftdiv@f1+2,f,c
  3677  001404  8E19               	bsf	___ftdiv@f2+1,7,c
  3678  001406  0EFF               	movlw	255
  3679  001408  1618               	andwf	___ftdiv@f2,f,c
  3680  00140A  0EFF               	movlw	255
  3681  00140C  1619               	andwf	___ftdiv@f2+1,f,c
  3682  00140E  0E00               	movlw	0
  3683  001410  161A               	andwf	___ftdiv@f2+2,f,c
  3684  001412  0E18               	movlw	24
  3685  001414  6E1E               	movwf	___ftdiv@cntr,c
  3686  001416  FFFF               	dw	65535	; assembler added errata NOP
  3687  001418  90D8               	bcf	status,0,c
  3688  00141A  361F               	rlcf	___ftdiv@f3,f,c
  3689  00141C  3620               	rlcf	___ftdiv@f3+1,f,c
  3690  00141E  3621               	rlcf	___ftdiv@f3+2,f,c
  3691  001420  5018               	movf	___ftdiv@f2,w,c
  3692  001422  5C15               	subwf	___ftdiv@f1,w,c
  3693  001424  5019               	movf	___ftdiv@f2+1,w,c
  3694  001426  5816               	subwfb	___ftdiv@f1+1,w,c
  3695  001428  501A               	movf	___ftdiv@f2+2,w,c
  3696  00142A  5817               	subwfb	___ftdiv@f1+2,w,c
  3697  00142C  A0D8               	btfss	status,0,c
  3698  00142E  D007               	goto	l432
  3699  001430  5018               	movf	___ftdiv@f2,w,c
  3700  001432  5E15               	subwf	___ftdiv@f1,f,c
  3701  001434  5019               	movf	___ftdiv@f2+1,w,c
  3702  001436  5A16               	subwfb	___ftdiv@f1+1,f,c
  3703  001438  501A               	movf	___ftdiv@f2+2,w,c
  3704  00143A  5A17               	subwfb	___ftdiv@f1+2,f,c
  3705  00143C  801F               	bsf	___ftdiv@f3,0,c
  3706  00143E                     l432:
  3707  00143E  FFFF               	dw	65535	; assembler added errata NOP
  3708  001440  90D8               	bcf	status,0,c
  3709  001442  3615               	rlcf	___ftdiv@f1,f,c
  3710  001444  3616               	rlcf	___ftdiv@f1+1,f,c
  3711  001446  3617               	rlcf	___ftdiv@f1+2,f,c
  3712  001448  2E1E               	decfsz	___ftdiv@cntr,f,c
  3713  00144A  D7E5               	goto	l431
  3714  00144C  C01F  F001         	movff	___ftdiv@f3,___ftpack@arg
  3715  001450  C020  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3716  001454  C021  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3717  001458  C022  F004         	movff	___ftdiv@exp,___ftpack@exp
  3718  00145C  C023  F005         	movff	___ftdiv@sign,___ftpack@sign
  3719  001460  ECAB  F00A         	call	___ftpack	;wreg free
  3720  001464  C001  F015         	movff	?___ftpack,?___ftdiv
  3721  001468  C002  F016         	movff	?___ftpack+1,?___ftdiv+1
  3722  00146C  C003  F017         	movff	?___ftpack+2,?___ftdiv+2
  3723  001470                     l1809:
  3724  001470  FFFF               	dw	65535	; assembler added errata NOP
  3725  001472  0012               	return		;funcret
  3726  001474  FFFF               	dw	65535	; errata NOP
  3727  001476                     __end_of___ftdiv:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           postinc0	equ	0xFEE
  3736                           wreg	equ	0xFE8
  3737                           postdec1	equ	0xFE5
  3738                           fsr1l	equ	0xFE1
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function ___ftpack *****************
  3746 ;; Defined at:
  3747 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  arg             3    0[COMRAM] unsigned um
  3750 ;;  exp             1    3[COMRAM] unsigned char 
  3751 ;;  sign            1    4[COMRAM] unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  3    0[COMRAM] float 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         5       0       0       0       0       0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0
  3765 ;;      Temps:          3       0       0       0       0       0       0
  3766 ;;      Totals:         8       0       0       0       0       0       0
  3767 ;;Total ram usage:        8 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		___altoft
  3773 ;;		___ftadd
  3774 ;;		___ftdiv
  3775 ;;		___ftmul
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text17
  3780  001556                     __ptext17:
  3781                           	opt stack 0
  3782  001556                     ___ftpack:
  3783                           	opt stack 0
  3784  001556  FFFF               	dw	65535	; assembler added errata NOP
  3785                           
  3786                           ;incstack = 0
  3787  001558  5004               	movf	___ftpack@exp,w,c
  3788  00155A  B4D8               	btfsc	status,2,c
  3789  00155C  D005               	goto	u940
  3790  00155E  5001               	movf	___ftpack@arg,w,c
  3791  001560  1002               	iorwf	___ftpack@arg+1,w,c
  3792  001562  1003               	iorwf	___ftpack@arg+2,w,c
  3793  001564  A4D8               	btfss	status,2,c
  3794  001566  D00E               	goto	l364
  3795  001568                     u940:
  3796  001568  FFFF               	dw	65535	; assembler added errata NOP
  3797  00156A  0E00               	movlw	0
  3798  00156C  6E01               	movwf	?___ftpack,c
  3799  00156E  0E00               	movlw	0
  3800  001570  6E02               	movwf	?___ftpack+1,c
  3801  001572  0E00               	movlw	0
  3802  001574  6E03               	movwf	?___ftpack+2,c
  3803  001576  D04E               	goto	l1543
  3804  001578  FFFF               	dw	65535	; assembler added errata NOP
  3805  00157A  2A04               	incf	___ftpack@exp,f,c
  3806  00157C  90D8               	bcf	status,0,c
  3807  00157E  3203               	rrcf	___ftpack@arg+2,f,c
  3808  001580  3202               	rrcf	___ftpack@arg+1,f,c
  3809  001582  3201               	rrcf	___ftpack@arg,f,c
  3810  001584                     l364:
  3811  001584  FFFF               	dw	65535	; assembler added errata NOP
  3812  001586  0E00               	movlw	0
  3813  001588  1401               	andwf	___ftpack@arg,w,c
  3814  00158A  6E06               	movwf	??___ftpack& (0+255),c
  3815  00158C  0E00               	movlw	0
  3816  00158E  1402               	andwf	___ftpack@arg+1,w,c
  3817  001590  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3818  001592  0EFE               	movlw	254
  3819  001594  1403               	andwf	___ftpack@arg+2,w,c
  3820  001596  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3821  001598  5006               	movf	??___ftpack,w,c
  3822  00159A  1007               	iorwf	??___ftpack+1,w,c
  3823  00159C  1008               	iorwf	??___ftpack+2,w,c
  3824  00159E  B4D8               	btfsc	status,2,c
  3825  0015A0  D00D               	goto	l367
  3826  0015A2  D7EA               	goto	l365
  3827  0015A4  FFFF               	dw	65535	; assembler added errata NOP
  3828  0015A6  2A04               	incf	___ftpack@exp,f,c
  3829  0015A8  0E01               	movlw	1
  3830  0015AA  2601               	addwf	___ftpack@arg,f,c
  3831  0015AC  0E00               	movlw	0
  3832  0015AE  2202               	addwfc	___ftpack@arg+1,f,c
  3833  0015B0  0E00               	movlw	0
  3834  0015B2  2203               	addwfc	___ftpack@arg+2,f,c
  3835  0015B4  90D8               	bcf	status,0,c
  3836  0015B6  3203               	rrcf	___ftpack@arg+2,f,c
  3837  0015B8  3202               	rrcf	___ftpack@arg+1,f,c
  3838  0015BA  3201               	rrcf	___ftpack@arg,f,c
  3839  0015BC                     l367:
  3840  0015BC  FFFF               	dw	65535	; assembler added errata NOP
  3841  0015BE  0E00               	movlw	0
  3842  0015C0  1401               	andwf	___ftpack@arg,w,c
  3843  0015C2  6E06               	movwf	??___ftpack& (0+255),c
  3844  0015C4  0E00               	movlw	0
  3845  0015C6  1402               	andwf	___ftpack@arg+1,w,c
  3846  0015C8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3847  0015CA  0EFF               	movlw	255
  3848  0015CC  1403               	andwf	___ftpack@arg+2,w,c
  3849  0015CE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3850  0015D0  5006               	movf	??___ftpack,w,c
  3851  0015D2  1007               	iorwf	??___ftpack+1,w,c
  3852  0015D4  1008               	iorwf	??___ftpack+2,w,c
  3853  0015D6  B4D8               	btfsc	status,2,c
  3854  0015D8  D007               	goto	l370
  3855  0015DA  D7E4               	goto	l368
  3856  0015DC  FFFF               	dw	65535	; assembler added errata NOP
  3857  0015DE  0604               	decf	___ftpack@exp,f,c
  3858  0015E0  90D8               	bcf	status,0,c
  3859  0015E2  3601               	rlcf	___ftpack@arg,f,c
  3860  0015E4  3602               	rlcf	___ftpack@arg+1,f,c
  3861  0015E6  3603               	rlcf	___ftpack@arg+2,f,c
  3862  0015E8                     l370:
  3863  0015E8  FFFF               	dw	65535	; assembler added errata NOP
  3864  0015EA  BE02               	btfsc	___ftpack@arg+1,7,c
  3865  0015EC  D003               	goto	u980
  3866  0015EE  0E02               	movlw	2
  3867  0015F0  6004               	cpfslt	___ftpack@exp,c
  3868  0015F2  D7F4               	goto	l371
  3869  0015F4                     u980:
  3870  0015F4  FFFF               	dw	65535	; assembler added errata NOP
  3871  0015F6  A004               	btfss	___ftpack@exp,0,c
  3872  0015F8  9E02               	bcf	___ftpack@arg+1,7,c
  3873  0015FA  90D8               	bcf	status,0,c
  3874  0015FC  3204               	rrcf	___ftpack@exp,f,c
  3875  0015FE  5004               	movf	___ftpack@exp,w,c
  3876  001600  1203               	iorwf	___ftpack@arg+2,f,c
  3877  001602  5005               	movf	___ftpack@sign,w,c
  3878  001604  A4D8               	btfss	status,2,c
  3879  001606  8E03               	bsf	___ftpack@arg+2,7,c
  3880  001608  C001  F001         	movff	___ftpack@arg,?___ftpack
  3881  00160C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3882  001610  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3883  001614                     l1543:
  3884  001614  FFFF               	dw	65535	; assembler added errata NOP
  3885  001616  0012               	return		;funcret
  3886  001618  FFFF               	dw	65535	; errata NOP
  3887  00161A                     __end_of___ftpack:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           prodh	equ	0xFF4
  3894                           prodl	equ	0xFF3
  3895                           postinc0	equ	0xFEE
  3896                           wreg	equ	0xFE8
  3897                           postdec1	equ	0xFE5
  3898                           fsr1l	equ	0xFE1
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function ___lmul *****************
  3906 ;; Defined at:
  3907 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  multiplier      4    0[COMRAM] unsigned long 
  3910 ;;  multiplicand    4    4[COMRAM] unsigned long 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  product         4    8[COMRAM] unsigned long 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  4    0[COMRAM] unsigned long 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3922 ;;      Params:         8       0       0       0       0       0       0
  3923 ;;      Locals:         4       0       0       0       0       0       0
  3924 ;;      Temps:          0       0       0       0       0       0       0
  3925 ;;      Totals:        12       0       0       0       0       0       0
  3926 ;;Total ram usage:       12 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_DAC
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text18
  3936  001992                     __ptext18:
  3937                           	opt stack 0
  3938  001992                     ___lmul:
  3939                           	opt stack 0
  3940  001992  FFFF               	dw	65535	; assembler added errata NOP
  3941                           
  3942                           ;incstack = 0
  3943  001994  0E00               	movlw	0
  3944  001996  6E09               	movwf	___lmul@product,c
  3945  001998  0E00               	movlw	0
  3946  00199A  6E0A               	movwf	___lmul@product+1,c
  3947  00199C  0E00               	movlw	0
  3948  00199E  6E0B               	movwf	___lmul@product+2,c
  3949  0019A0  0E00               	movlw	0
  3950  0019A2  6E0C               	movwf	___lmul@product+3,c
  3951  0019A4  FFFF               	dw	65535	; assembler added errata NOP
  3952  0019A6  A001               	btfss	___lmul@multiplier,0,c
  3953  0019A8  D008               	goto	l162
  3954  0019AA  5005               	movf	___lmul@multiplicand,w,c
  3955  0019AC  2609               	addwf	___lmul@product,f,c
  3956  0019AE  5006               	movf	___lmul@multiplicand+1,w,c
  3957  0019B0  220A               	addwfc	___lmul@product+1,f,c
  3958  0019B2  5007               	movf	___lmul@multiplicand+2,w,c
  3959  0019B4  220B               	addwfc	___lmul@product+2,f,c
  3960  0019B6  5008               	movf	___lmul@multiplicand+3,w,c
  3961  0019B8  220C               	addwfc	___lmul@product+3,f,c
  3962  0019BA                     l162:
  3963  0019BA  FFFF               	dw	65535	; assembler added errata NOP
  3964  0019BC  90D8               	bcf	status,0,c
  3965  0019BE  3605               	rlcf	___lmul@multiplicand,f,c
  3966  0019C0  3606               	rlcf	___lmul@multiplicand+1,f,c
  3967  0019C2  3607               	rlcf	___lmul@multiplicand+2,f,c
  3968  0019C4  3608               	rlcf	___lmul@multiplicand+3,f,c
  3969  0019C6  90D8               	bcf	status,0,c
  3970  0019C8  3204               	rrcf	___lmul@multiplier+3,f,c
  3971  0019CA  3203               	rrcf	___lmul@multiplier+2,f,c
  3972  0019CC  3202               	rrcf	___lmul@multiplier+1,f,c
  3973  0019CE  3201               	rrcf	___lmul@multiplier,f,c
  3974  0019D0  5001               	movf	___lmul@multiplier,w,c
  3975  0019D2  1002               	iorwf	___lmul@multiplier+1,w,c
  3976  0019D4  1003               	iorwf	___lmul@multiplier+2,w,c
  3977  0019D6  1004               	iorwf	___lmul@multiplier+3,w,c
  3978  0019D8  A4D8               	btfss	status,2,c
  3979  0019DA  D7E4               	goto	l161
  3980  0019DC  C009  F001         	movff	___lmul@product,?___lmul
  3981  0019E0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  3982  0019E4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  3983  0019E8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  3984  0019EC  0012               	return		;funcret
  3985  0019EE  FFFF               	dw	65535	; errata NOP
  3986  0019F0                     __end_of___lmul:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           postinc0	equ	0xFEE
  3995                           wreg	equ	0xFE8
  3996                           postdec1	equ	0xFE5
  3997                           fsr1l	equ	0xFE1
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function ___almod *****************
  4005 ;; Defined at:
  4006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\almod.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  dividend        4    0[COMRAM] long 
  4009 ;;  divisor         4    4[COMRAM] long 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  sign            1    9[COMRAM] unsigned char 
  4012 ;;  counter         1    8[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  4    0[COMRAM] long 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4022 ;;      Params:         8       0       0       0       0       0       0
  4023 ;;      Locals:         2       0       0       0       0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0
  4025 ;;      Totals:        10       0       0       0       0       0       0
  4026 ;;Total ram usage:       10 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_DAC
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text19
  4036  00161A                     __ptext19:
  4037                           	opt stack 0
  4038  00161A                     ___almod:
  4039                           	opt stack 0
  4040  00161A  FFFF               	dw	65535	; assembler added errata NOP
  4041                           
  4042                           ;incstack = 0
  4043  00161C  0E00               	movlw	0
  4044  00161E  6E0A               	movwf	___almod@sign,c
  4045  001620  AE04               	btfss	___almod@dividend+3,7,c
  4046  001622  D00A               	goto	l218
  4047  001624  1E04               	comf	___almod@dividend+3,f,c
  4048  001626  1E03               	comf	___almod@dividend+2,f,c
  4049  001628  1E02               	comf	___almod@dividend+1,f,c
  4050  00162A  6C01               	negf	___almod@dividend,c
  4051  00162C  0E00               	movlw	0
  4052  00162E  2202               	addwfc	___almod@dividend+1,f,c
  4053  001630  2203               	addwfc	___almod@dividend+2,f,c
  4054  001632  2204               	addwfc	___almod@dividend+3,f,c
  4055  001634  0E01               	movlw	1
  4056  001636  6E0A               	movwf	___almod@sign,c
  4057  001638                     l218:
  4058  001638  FFFF               	dw	65535	; assembler added errata NOP
  4059  00163A  AE08               	btfss	___almod@divisor+3,7,c
  4060  00163C  D008               	goto	l219
  4061  00163E  1E08               	comf	___almod@divisor+3,f,c
  4062  001640  1E07               	comf	___almod@divisor+2,f,c
  4063  001642  1E06               	comf	___almod@divisor+1,f,c
  4064  001644  6C05               	negf	___almod@divisor,c
  4065  001646  0E00               	movlw	0
  4066  001648  2206               	addwfc	___almod@divisor+1,f,c
  4067  00164A  2207               	addwfc	___almod@divisor+2,f,c
  4068  00164C  2208               	addwfc	___almod@divisor+3,f,c
  4069  00164E                     l219:
  4070  00164E  FFFF               	dw	65535	; assembler added errata NOP
  4071  001650  5005               	movf	___almod@divisor,w,c
  4072  001652  1006               	iorwf	___almod@divisor+1,w,c
  4073  001654  1007               	iorwf	___almod@divisor+2,w,c
  4074  001656  1008               	iorwf	___almod@divisor+3,w,c
  4075  001658  B4D8               	btfsc	status,2,c
  4076  00165A  D028               	goto	l226
  4077  00165C  0E01               	movlw	1
  4078  00165E  6E09               	movwf	___almod@counter,c
  4079  001660  D007               	goto	l221
  4080  001662  FFFF               	dw	65535	; assembler added errata NOP
  4081  001664  90D8               	bcf	status,0,c
  4082  001666  3605               	rlcf	___almod@divisor,f,c
  4083  001668  3606               	rlcf	___almod@divisor+1,f,c
  4084  00166A  3607               	rlcf	___almod@divisor+2,f,c
  4085  00166C  3608               	rlcf	___almod@divisor+3,f,c
  4086  00166E  2A09               	incf	___almod@counter,f,c
  4087  001670                     l221:
  4088  001670  FFFF               	dw	65535	; assembler added errata NOP
  4089  001672  AE08               	btfss	___almod@divisor+3,7,c
  4090  001674  D7F6               	goto	l222
  4091  001676                     u1750:
  4092  001676  FFFF               	dw	65535	; assembler added errata NOP
  4093  001678  5005               	movf	___almod@divisor,w,c
  4094  00167A  5C01               	subwf	___almod@dividend,w,c
  4095  00167C  5006               	movf	___almod@divisor+1,w,c
  4096  00167E  5802               	subwfb	___almod@dividend+1,w,c
  4097  001680  5007               	movf	___almod@divisor+2,w,c
  4098  001682  5803               	subwfb	___almod@dividend+2,w,c
  4099  001684  5008               	movf	___almod@divisor+3,w,c
  4100  001686  5804               	subwfb	___almod@dividend+3,w,c
  4101  001688  A0D8               	btfss	status,0,c
  4102  00168A  D008               	goto	l225
  4103  00168C  5005               	movf	___almod@divisor,w,c
  4104  00168E  5E01               	subwf	___almod@dividend,f,c
  4105  001690  5006               	movf	___almod@divisor+1,w,c
  4106  001692  5A02               	subwfb	___almod@dividend+1,f,c
  4107  001694  5007               	movf	___almod@divisor+2,w,c
  4108  001696  5A03               	subwfb	___almod@dividend+2,f,c
  4109  001698  5008               	movf	___almod@divisor+3,w,c
  4110  00169A  5A04               	subwfb	___almod@dividend+3,f,c
  4111  00169C                     l225:
  4112  00169C  FFFF               	dw	65535	; assembler added errata NOP
  4113  00169E  90D8               	bcf	status,0,c
  4114  0016A0  3208               	rrcf	___almod@divisor+3,f,c
  4115  0016A2  3207               	rrcf	___almod@divisor+2,f,c
  4116  0016A4  3206               	rrcf	___almod@divisor+1,f,c
  4117  0016A6  3205               	rrcf	___almod@divisor,f,c
  4118  0016A8  2E09               	decfsz	___almod@counter,f,c
  4119  0016AA  D7E5               	goto	u1750
  4120  0016AC                     l226:
  4121  0016AC  FFFF               	dw	65535	; assembler added errata NOP
  4122  0016AE  500A               	movf	___almod@sign,w,c
  4123  0016B0  B4D8               	btfsc	status,2,c
  4124  0016B2  D008               	goto	l227
  4125  0016B4  1E04               	comf	___almod@dividend+3,f,c
  4126  0016B6  1E03               	comf	___almod@dividend+2,f,c
  4127  0016B8  1E02               	comf	___almod@dividend+1,f,c
  4128  0016BA  6C01               	negf	___almod@dividend,c
  4129  0016BC  0E00               	movlw	0
  4130  0016BE  2202               	addwfc	___almod@dividend+1,f,c
  4131  0016C0  2203               	addwfc	___almod@dividend+2,f,c
  4132  0016C2  2204               	addwfc	___almod@dividend+3,f,c
  4133  0016C4                     l227:
  4134  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  4135  0016C6  C001  F001         	movff	___almod@dividend,?___almod
  4136  0016CA  C002  F002         	movff	___almod@dividend+1,?___almod+1
  4137  0016CE  C003  F003         	movff	___almod@dividend+2,?___almod+2
  4138  0016D2  C004  F004         	movff	___almod@dividend+3,?___almod+3
  4139  0016D6  0012               	return		;funcret
  4140  0016D8  FFFF               	dw	65535	; errata NOP
  4141  0016DA                     __end_of___almod:
  4142                           	opt stack 0
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1l	equ	0xFE1
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function ___aldiv *****************
  4160 ;; Defined at:
  4161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  dividend        4   12[COMRAM] long 
  4164 ;;  divisor         4   16[COMRAM] long 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  quotient        4   22[COMRAM] long 
  4167 ;;  sign            1   21[COMRAM] unsigned char 
  4168 ;;  counter         1   20[COMRAM] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  4   12[COMRAM] long 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4178 ;;      Params:         8       0       0       0       0       0       0
  4179 ;;      Locals:         6       0       0       0       0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0
  4181 ;;      Totals:        14       0       0       0       0       0       0
  4182 ;;Total ram usage:       14 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_DAC
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text20
  4192  001476                     __ptext20:
  4193                           	opt stack 0
  4194  001476                     ___aldiv:
  4195                           	opt stack 0
  4196  001476  FFFF               	dw	65535	; assembler added errata NOP
  4197                           
  4198                           ;incstack = 0
  4199  001478  0E00               	movlw	0
  4200  00147A  6E16               	movwf	___aldiv@sign,c
  4201  00147C  AE14               	btfss	___aldiv@divisor+3,7,c
  4202  00147E  D00A               	goto	l205
  4203  001480  1E14               	comf	___aldiv@divisor+3,f,c
  4204  001482  1E13               	comf	___aldiv@divisor+2,f,c
  4205  001484  1E12               	comf	___aldiv@divisor+1,f,c
  4206  001486  6C11               	negf	___aldiv@divisor,c
  4207  001488  0E00               	movlw	0
  4208  00148A  2212               	addwfc	___aldiv@divisor+1,f,c
  4209  00148C  2213               	addwfc	___aldiv@divisor+2,f,c
  4210  00148E  2214               	addwfc	___aldiv@divisor+3,f,c
  4211  001490  0E01               	movlw	1
  4212  001492  6E16               	movwf	___aldiv@sign,c
  4213  001494                     l205:
  4214  001494  FFFF               	dw	65535	; assembler added errata NOP
  4215  001496  AE10               	btfss	___aldiv@dividend+3,7,c
  4216  001498  D00A               	goto	l206
  4217  00149A  1E10               	comf	___aldiv@dividend+3,f,c
  4218  00149C  1E0F               	comf	___aldiv@dividend+2,f,c
  4219  00149E  1E0E               	comf	___aldiv@dividend+1,f,c
  4220  0014A0  6C0D               	negf	___aldiv@dividend,c
  4221  0014A2  0E00               	movlw	0
  4222  0014A4  220E               	addwfc	___aldiv@dividend+1,f,c
  4223  0014A6  220F               	addwfc	___aldiv@dividend+2,f,c
  4224  0014A8  2210               	addwfc	___aldiv@dividend+3,f,c
  4225  0014AA  0E01               	movlw	1
  4226  0014AC  1A16               	xorwf	___aldiv@sign,f,c
  4227  0014AE                     l206:
  4228  0014AE  FFFF               	dw	65535	; assembler added errata NOP
  4229  0014B0  0E00               	movlw	0
  4230  0014B2  6E17               	movwf	___aldiv@quotient,c
  4231  0014B4  0E00               	movlw	0
  4232  0014B6  6E18               	movwf	___aldiv@quotient+1,c
  4233  0014B8  0E00               	movlw	0
  4234  0014BA  6E19               	movwf	___aldiv@quotient+2,c
  4235  0014BC  0E00               	movlw	0
  4236  0014BE  6E1A               	movwf	___aldiv@quotient+3,c
  4237  0014C0  5011               	movf	___aldiv@divisor,w,c
  4238  0014C2  1012               	iorwf	___aldiv@divisor+1,w,c
  4239  0014C4  1013               	iorwf	___aldiv@divisor+2,w,c
  4240  0014C6  1014               	iorwf	___aldiv@divisor+3,w,c
  4241  0014C8  B4D8               	btfsc	status,2,c
  4242  0014CA  D02E               	goto	l213
  4243  0014CC  0E01               	movlw	1
  4244  0014CE  6E15               	movwf	___aldiv@counter,c
  4245  0014D0  D007               	goto	l208
  4246  0014D2  FFFF               	dw	65535	; assembler added errata NOP
  4247  0014D4  90D8               	bcf	status,0,c
  4248  0014D6  3611               	rlcf	___aldiv@divisor,f,c
  4249  0014D8  3612               	rlcf	___aldiv@divisor+1,f,c
  4250  0014DA  3613               	rlcf	___aldiv@divisor+2,f,c
  4251  0014DC  3614               	rlcf	___aldiv@divisor+3,f,c
  4252  0014DE  2A15               	incf	___aldiv@counter,f,c
  4253  0014E0                     l208:
  4254  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  4255  0014E2  AE14               	btfss	___aldiv@divisor+3,7,c
  4256  0014E4  D7F6               	goto	l209
  4257  0014E6                     u1690:
  4258  0014E6  FFFF               	dw	65535	; assembler added errata NOP
  4259  0014E8  90D8               	bcf	status,0,c
  4260  0014EA  3617               	rlcf	___aldiv@quotient,f,c
  4261  0014EC  3618               	rlcf	___aldiv@quotient+1,f,c
  4262  0014EE  3619               	rlcf	___aldiv@quotient+2,f,c
  4263  0014F0  361A               	rlcf	___aldiv@quotient+3,f,c
  4264  0014F2  5011               	movf	___aldiv@divisor,w,c
  4265  0014F4  5C0D               	subwf	___aldiv@dividend,w,c
  4266  0014F6  5012               	movf	___aldiv@divisor+1,w,c
  4267  0014F8  580E               	subwfb	___aldiv@dividend+1,w,c
  4268  0014FA  5013               	movf	___aldiv@divisor+2,w,c
  4269  0014FC  580F               	subwfb	___aldiv@dividend+2,w,c
  4270  0014FE  5014               	movf	___aldiv@divisor+3,w,c
  4271  001500  5810               	subwfb	___aldiv@dividend+3,w,c
  4272  001502  A0D8               	btfss	status,0,c
  4273  001504  D009               	goto	l212
  4274  001506  5011               	movf	___aldiv@divisor,w,c
  4275  001508  5E0D               	subwf	___aldiv@dividend,f,c
  4276  00150A  5012               	movf	___aldiv@divisor+1,w,c
  4277  00150C  5A0E               	subwfb	___aldiv@dividend+1,f,c
  4278  00150E  5013               	movf	___aldiv@divisor+2,w,c
  4279  001510  5A0F               	subwfb	___aldiv@dividend+2,f,c
  4280  001512  5014               	movf	___aldiv@divisor+3,w,c
  4281  001514  5A10               	subwfb	___aldiv@dividend+3,f,c
  4282  001516  8017               	bsf	___aldiv@quotient,0,c
  4283  001518                     l212:
  4284  001518  FFFF               	dw	65535	; assembler added errata NOP
  4285  00151A  90D8               	bcf	status,0,c
  4286  00151C  3214               	rrcf	___aldiv@divisor+3,f,c
  4287  00151E  3213               	rrcf	___aldiv@divisor+2,f,c
  4288  001520  3212               	rrcf	___aldiv@divisor+1,f,c
  4289  001522  3211               	rrcf	___aldiv@divisor,f,c
  4290  001524  2E15               	decfsz	___aldiv@counter,f,c
  4291  001526  D7DF               	goto	u1690
  4292  001528                     l213:
  4293  001528  FFFF               	dw	65535	; assembler added errata NOP
  4294  00152A  5016               	movf	___aldiv@sign,w,c
  4295  00152C  B4D8               	btfsc	status,2,c
  4296  00152E  D008               	goto	l214
  4297  001530  1E1A               	comf	___aldiv@quotient+3,f,c
  4298  001532  1E19               	comf	___aldiv@quotient+2,f,c
  4299  001534  1E18               	comf	___aldiv@quotient+1,f,c
  4300  001536  6C17               	negf	___aldiv@quotient,c
  4301  001538  0E00               	movlw	0
  4302  00153A  2218               	addwfc	___aldiv@quotient+1,f,c
  4303  00153C  2219               	addwfc	___aldiv@quotient+2,f,c
  4304  00153E  221A               	addwfc	___aldiv@quotient+3,f,c
  4305  001540                     l214:
  4306  001540  FFFF               	dw	65535	; assembler added errata NOP
  4307  001542  C017  F00D         	movff	___aldiv@quotient,?___aldiv
  4308  001546  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
  4309  00154A  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
  4310  00154E  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
  4311  001552  0012               	return		;funcret
  4312  001554  FFFF               	dw	65535	; errata NOP
  4313  001556                     __end_of___aldiv:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           postdec1	equ	0xFE5
  4324                           fsr1l	equ	0xFE1
  4325                           postinc2	equ	0xFDE
  4326                           postdec2	equ	0xFDD
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _Print_To_LCD *****************
  4332 ;; Defined at:
  4333 ;;		line 270 in file "Lab5.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  tempPtr         2    0[COMRAM] PTR const unsigned char 
  4336 ;;		 -> Str_1(10), Str_2(10), Clear2(10), Clear1(10), 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  currentChar     1    3[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      void 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4348 ;;      Params:         2       0       0       0       0       0       0
  4349 ;;      Locals:         1       0       0       0       0       0       0
  4350 ;;      Temps:          1       0       0       0       0       0       0
  4351 ;;      Totals:         4       0       0       0       0       0       0
  4352 ;;Total ram usage:        4 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;;		_DAC
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text21
  4363  001806                     __ptext21:
  4364                           	opt stack 0
  4365  001806                     _Print_To_LCD:
  4366                           	opt stack 0
  4367  001806  FFFF               	dw	65535	; assembler added errata NOP
  4368                           
  4369                           ;Lab5.c: 272: char currentChar;
  4370                           ;Lab5.c: 273: PORTEbits.RE0 = 0;
  4371                           
  4372                           ;incstack = 0
  4373  001808  9084               	bcf	3972,0,c	;volatile
  4374                           
  4375                           ;Lab5.c: 275: while (*tempPtr)
  4376  00180A  D029               	goto	l143
  4377  00180C  FFFF               	dw	65535	; assembler added errata NOP
  4378                           
  4379                           ;Lab5.c: 276: {
  4380                           ;Lab5.c: 277: currentChar = *tempPtr;
  4381  00180E  C001  FFF6         	movff	Print_To_LCD@tempPtr,tblptrl
  4382  001812  C002  FFF7         	movff	Print_To_LCD@tempPtr+1,tblptrh
  4383  001816  6AF8               	clrf	tblptru,c
  4384  001818  0E05               	movlw	(high __ramtop+-1)
  4385  00181A  64F7               	cpfsgt	tblptrh,c
  4386  00181C  D004               	bra	u1557
  4387  00181E  0008               	tblrd		*
  4388  001820  FFFF               	dw	65535	; errata NOP
  4389  001822  50F5               	movf	tablat,w,c
  4390  001824  D005               	bra	u1550
  4391  001826                     u1557:
  4392  001826  CFF6 FFD9          	movff	tblptrl,fsr2l
  4393  00182A  CFF7 FFDA          	movff	tblptrh,fsr2h
  4394  00182E  50DF               	movf	indf2,w,c
  4395  001830                     u1550:
  4396  001830  6E04               	movwf	Print_To_LCD@currentChar,c
  4397                           
  4398                           ;Lab5.c: 278: PORTEbits.RE1 = 1;
  4399  001832  8284               	bsf	3972,1,c	;volatile
  4400                           
  4401                           ;Lab5.c: 279: PORTD = currentChar;
  4402  001834  C004  FF83         	movff	Print_To_LCD@currentChar,3971	;volatile
  4403                           
  4404                           ;Lab5.c: 280: PORTEbits.RE1 = 0;
  4405  001838  9284               	bcf	3972,1,c	;volatile
  4406                           
  4407                           ;Lab5.c: 281: currentChar <<= 4;
  4408  00183A  3A04               	swapf	Print_To_LCD@currentChar,f,c
  4409  00183C  0EF0               	movlw	240
  4410  00183E  1604               	andwf	Print_To_LCD@currentChar,f,c
  4411                           
  4412                           ;Lab5.c: 282: PORTEbits.RE1 = 1;
  4413  001840  8284               	bsf	3972,1,c	;volatile
  4414                           
  4415                           ;Lab5.c: 283: PORTD = currentChar;
  4416  001842  C004  FF83         	movff	Print_To_LCD@currentChar,3971	;volatile
  4417                           
  4418                           ;Lab5.c: 284: PORTEbits.RE1 = 0;
  4419  001846  9284               	bcf	3972,1,c	;volatile
  4420                           
  4421                           ;Lab5.c: 285: _delay((unsigned long)((10)*(10000000/4000.0)));
  4422  001848  0E19               	movlw	25
  4423  00184A  6E03               	movwf	??_Print_To_LCD& (0+255),c
  4424  00184C  0E5D               	movlw	93
  4425  00184E                     u1927:
  4426  00184E  FFFF               	dw	65535	; errata NOP
  4427  001850  2EE8               	decfsz	wreg,f,c
  4428  001852  D7FD               	bra	u1927
  4429  001854  2E03               	decfsz	??_Print_To_LCD& (0+255),f,c
  4430  001856  D7FB               	bra	u1927
  4431                           
  4432                           ;Lab5.c: 286: PORTEbits.RE0 = 1;
  4433  001858  8084               	bsf	3972,0,c	;volatile
  4434                           
  4435                           ;Lab5.c: 287: tempPtr++;
  4436  00185A  4A01               	infsnz	Print_To_LCD@tempPtr,f,c
  4437  00185C  2A02               	incf	Print_To_LCD@tempPtr+1,f,c
  4438  00185E                     l143:
  4439  00185E  FFFF               	dw	65535	; assembler added errata NOP
  4440  001860  C001  FFF6         	movff	Print_To_LCD@tempPtr,tblptrl
  4441  001864  C002  FFF7         	movff	Print_To_LCD@tempPtr+1,tblptrh
  4442  001868  6AF8               	clrf	tblptru,c
  4443  00186A  0E05               	movlw	(high __ramtop+-1)
  4444  00186C  64F7               	cpfsgt	tblptrh,c
  4445  00186E  D004               	bra	u1567
  4446  001870  0008               	tblrd		*
  4447  001872  FFFF               	dw	65535	; errata NOP
  4448  001874  50F5               	movf	tablat,w,c
  4449  001876  D005               	bra	u1560
  4450  001878                     u1567:
  4451  001878  CFF6 FFD9          	movff	tblptrl,fsr2l
  4452  00187C  CFF7 FFDA          	movff	tblptrh,fsr2h
  4453  001880  50DF               	movf	indf2,w,c
  4454  001882                     u1560:
  4455  001882  0900               	iorlw	0
  4456  001884  B4D8               	btfsc	status,2,c
  4457  001886  0012               	return		;funcret
  4458  001888  FFFF               	dw	65535	; assembler added errata NOP
  4459  00188A  D7C0               	goto	l144
  4460  00188C  FFFF               	dw	65535	; errata NOP
  4461  00188E                     __end_of_Print_To_LCD:
  4462                           	opt stack 0
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           postinc0	equ	0xFEE
  4470                           wreg	equ	0xFE8
  4471                           postdec1	equ	0xFE5
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           fsr2h	equ	0xFDA
  4477                           fsr2l	equ	0xFD9
  4478                           status	equ	0xFD8
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           postinc0	equ	0xFEE
  4486                           wreg	equ	0xFE8
  4487                           postdec1	equ	0xFE5
  4488                           fsr1l	equ	0xFE1
  4489                           indf2	equ	0xFDF
  4490                           postinc2	equ	0xFDE
  4491                           postdec2	equ	0xFDD
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496                           	psect	rparam
  4497  0000                     tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           postdec1	equ	0xFE5
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    55
    Data        30
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     86     125
    BANK0           128      0      54
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    Print_To_LCD@tempPtr	PTR const unsigned char  size(2) Largest target is 10
		 -> Str_1(BANK0[10]), Str_2(BANK0[10]), Clear2(CODE[10]), Clear1(CODE[10]), 

    Initialize_LCD@tempPtr	PTR unsigned char  size(2) Largest target is 8
		 -> LCDstr(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_DAC
    _Initialize_PIC->_Initialize_LCD
    _DAC->_sin
    _sin->_eval_poly
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftmul
    ___ftmul->___ftdiv
    ___ftsub->_floor
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    ___ftdiv->___ftadd
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   56600
                                _DAC
                     _Initialize_PIC
                       _Print_To_LCD
 ---------------------------------------------------------------------------------
 (1) _Initialize_PIC                                       0     0      0      60
                     _Initialize_LCD
 ---------------------------------------------------------------------------------
 (2) _Initialize_LCD                                       5     5      0      60
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _DAC                                                 11    11      0   56145
                                             75 COMRAM    11    11      0
                       _Print_To_LCD
                            ___aldiv
                            ___almod
                           ___altoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                             ___lmul
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 13    10      3   37257
                                             62 COMRAM    13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3    9163
                                             25 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     404
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     896
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2832
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    9727
                                             50 COMRAM    12     5      7
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4286
                                             35 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4841
                                             33 COMRAM     6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4344
                                              8 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     273
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3176
                                             20 COMRAM    15     9      6
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     600
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1212
                                             12 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Print_To_LCD                                         4     2      2     395
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DAC
     _Print_To_LCD
     ___aldiv
       ___lmul (ARG)
     ___almod
     ___altoft
       ___ftpack
       ___fttol (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
     ___fttol
     ___lmul
     _sin
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___fttol
           _frexp
       _eval_poly
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
         ___wmul (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___fttol
         _frexp
   _Initialize_PIC
     _Initialize_LCD
   _Print_To_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      36       5       42.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     56      7D       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B3      15        0.0%
DATA                 0      0      B3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Apr 10 15:10:19 2018

                                               ___altoft@exp 0018  
                                                _SSPSTATbits 000FC7  
                                              ___altoft@sign 0019  
                                        ___wmul@multiplicand 0003  
                                                __CFG_OSC$HS 000000  
                                               ___ftadd@exp1 0014  
                                               ___ftadd@exp2 0013  
                                               ___ftadd@sign 0012  
                                                        l111 1A9E  
                                                        l121 086A  
                                                        l212 1518  
                                                        l213 1528  
                                                        l205 1494  
                                                        l221 1670  
                                                        l214 1540  
                                                        l206 14AE  
                                                        l222 1662  
                                                        l126 0A1C  
                                                        l118 066E  
                                                        l143 185E  
                                                        l144 180C  
                                                        l208 14E0  
                                                        l209 14D2  
                                                        l225 169C  
                                                        l161 19A4  
                                                        l129 0B52  
                                                        l137 17EA  
                                                        l226 16AC  
                                                        l218 1638  
                                                        l162 19BA  
                                                        l410 0EE8  
                                                        l234 1944  
                                                        l138 179E  
                                                        l227 16C4  
                                                        l219 164E  
                                                        l235 1936  
                                                        l404 0F00  
                                                        l421 0F62  
                                                        l430 13D6  
                                                        l422 0F80  
                                                        l431 1416  
                                                        l423 0FB2  
                                                        l432 143E  
                                                        l409 0EF4  
                                                        l370 15E8  
                                                        l418 0F3A  
                                                        l450 1096  
                                                        l371 15DC  
                                                        l419 0F2E  
                                                        l364 1584  
                                                        l460 1A08  
                                                        l436 170C  
                                                        l365 1578  
                                                        l445 1024  
                                                        l437 173E  
                                                        _DAC 063A  
                                                        l454 1B14  
                                                        l446 1058  
                                                        l367 15BC  
                                                        l447 106A  
                                                        l368 15A4  
                                                        l472 1272  
                                                        l449 1084  
                                                        l473 1264  
                                                        l466 1248  
                                                        l395 0E64  
                                                        l731 1376  
                                                        l475 1292  
                                                        l467 1236  
                                                        l732 12F2  
                                                        l740 1104  
                                                        l741 11BC  
                                                        l742 1132  
                                                        l399 0E92  
                                                        l743 11AE  
                                                        l585 0BD2  
                                                        l586 0CB6  
                                                        l739 1116  
                                                        l587 0D10  
                                                        l748 18AC  
                                                        l588 0DFA  
                                                        l589 0E08  
                                                        u940 1568  
                                                        u980 15F4  
                                               __CFG_BOR$OFF 000000  
                                                        _rem 00A6  
                                                        _sin 0BA8  
                                                        wreg 000FE8  
                                                       ?_DAC 0001  
                                               __CFG_LVP$OFF 000000  
                                               ___ftdiv@cntr 001E  
                                               ___ftdiv@sign 0023  
                                               __CFG_WDT$OFF 000000  
                                                       l1505 176C  
                                                       l1507 1770  
                                                       l1543 1614  
                                                       l1635 0FD8  
                                                       l1809 1470  
                                                       l1683 10D0  
                                                       l1747 12A4  
                                                       l1763 190C  
                                                       ?_sin 003F  
                                                       u1100 0E82  
                                                       u1031 0E20  
                                                       u1200 0F44  
                                                       u1041 0E34  
                                                       u1130 0EC4  
                                                       u1070 0E54  
                                                       u1241 0FF0  
                                                       u1170 0F0A  
                                                       u1331 11D4  
                                                       u1420 18D6  
                                                       u1261 100A  
                                                       u1270 1014  
                                                       u1350 11FE  
                                                       u1431 13A2  
                                                       u1520 1124  
                                                       u1600 0CAE  
                                                       u1610 0CB2  
                                                       u1451 13BC  
                                                       u1355 11F4  
                                                       u1460 13C6  
                                                       u1380 1250  
                                                       u1428 18DA  
                                                       u1550 1830  
                                                       u1390 127A  
                                                       u1560 1882  
                                                       u1557 1826  
                                                       u1750 1676  
                                                       u1830 0BA2  
                                                       u1567 1878  
                                                       u1690 14E6  
                                                       u1907 084E  
                                                       u1917 0860  
                                                       u1927 184E  
                                                       u1847 1782  
                                                       u1857 17BE  
                                                       u1867 17DC  
                                                       u1877 0652  
                                                       u1887 0664  
                                                       u1897 0836  
                                               __CFG_STVR$ON 000000  
                                                       _main 1A78  
                                               ___ftpack@arg 0001  
                                                       _hund 0057  
                                               ___ftpack@exp 0004  
                                                       _tens 00AA  
                                                       _time 006B  
                                                       fsr2h 000FDA  
                                                       indf2 000FDF  
                                                       fsr1l 000FE1  
                                                       fsr2l 000FD9  
                                                       sin@f 003F  
                                                       sin@y 0042  
                                                       prodh 000FF4  
                                                       prodl 000FF3  
                                                       start 0002  
                                                _voltage_int 00B2  
                                                _voltage_ext 005F  
                                               ___ftmul@cntr 0031  
                                               ___param_bank 000000  
                                               ___ftmul@sign 0032  
                                                      ??_DAC 004C  
                                               ___fttol@exp1 000F  
                                               ___fttol@lval 000B  
                                                      ??_sin 0042  
                                              __CFG_OSCS$OFF 000000  
                                            __end_of___aldiv 1556  
                                            __end_of___almod 16DA  
                                                      ?_main 0001  
                                            __end_of___ftadd 0FDE  
                                            __end_of___ftdiv 1476  
                                            __end_of___ftneg 1B26  
                                            __end_of___ftmul 10D6  
                                            __end_of___ftsub 1A36  
                                            __end_of___fttol 12AA  
                                                      _PORTA 000F80  
                                                      _PORTD 000F83  
                                                      _TRISA 000F92  
                                                      _TRISB 000F93  
                                                      _TRISC 000F94  
                                                      _TRISD 000F95  
                                                      _TRISE 000F96  
                                         __end_ofsin@coeff_a 0610  
                                         __end_ofsin@coeff_b 061C  
                                              __CFG_PWRT$OFF 000000  
                                        ___lmul@multiplicand 0005  
                                                      _Str_1 0094  
                                                      _Str_2 008A  
                                                      _adLow 007B  
                                                      _floor 10D6  
                                                      _frexp 188E  
                                                      _rem_1 009E  
                                                      _errno 0071  
                                              ___ftpack@sign 0005  
                                                      sin@x2 0048  
                                                      tablat 000FF5  
                                  Initialize_LCD@currentChar 0005  
                                                      status 000FD8  
                                            __initialization 1A36  
                                    __size_of_Initialize_LCD 0090  
                                    __size_of_Initialize_PIC 002C  
                                               __end_of_main 1AA6  
                                                     ??_main 0057  
                                              ___fttol@sign1 000A  
                                              __activetblptr 000002  
                                            __CFG_CCP2MUX$ON 000000  
                                                     _ADCON0 000FC2  
                                                     _ADCON1 000FC1  
                                                     ?_floor 001A  
                                                     ?_frexp 0001  
                                           __end_of___altoft 1992  
                                                     _ADRESH 000FC4  
                                                     _ADRESL 000FC3  
                                           __end_of___ftpack 161A  
                                                     _LCDstr 0630  
                                                     _SSPBUF 000FC9  
                                                     _Clear1 0626  
                                                     _Clear2 061C  
                                                     _adHigh 0079  
                                                     ___ftge 16DA  
                                                     ___lmul 1992  
                                                  ??___aldiv 0015  
                                                  ??___almod 0009  
                                                     ___wmul 1AD2  
                                                  ??___ftadd 000F  
                                                  ??___ftdiv 001B  
                                                  ??___ftneg 0004  
                                                  ??___ftmul 002A  
                                                  ??___ftsub 0028  
                                                  ??___fttol 0005  
                                                     _fullAD 0073  
                                                     clear_0 1A5C  
                                                     clear_1 1A68  
                                                     _tens_1 00A2  
                                                     floor@i 001D  
                                                     floor@x 001A  
                                      ___ftmul@f3_as_product 002E  
                                        Print_To_LCD@tempPtr 0001  
                                                     sin@sgn 004B  
                                               __mediumconst 0000  
                                                     tblptrh 000FF7  
                                                     tblptrl 000FF6  
                                                     tblptru 000FF8  
                                                 __accesstop 0080  
                                    __end_of__initialization 1A6E  
                                                 ___altoft@c 0010  
                                                 ___ftadd@f1 0009  
                                                 ___ftadd@f2 000C  
                                                 ___ftge@ff1 0001  
                                                 ___ftge@ff2 0004  
                                               eval_poly@res 003C  
                                              ___rparam_used 000001  
                                                 ___ftdiv@f1 0015  
                                                 ___ftdiv@f2 0018  
                                                 ___ftdiv@f3 001F  
                                                 ___ftneg@f1 0001  
                                                 ___ftmul@f1 0024  
                                                 ___ftmul@f2 0027  
                                                 ___ftsub@f1 0022  
                                                 ___ftsub@f2 0025  
                                                 ___fttol@f1 0001  
                                             __pcstackCOMRAM 0001  
                                               __pidataBANK0 1B26  
                                              __end_of_floor 11C2  
                                              __end_of_frexp 1912  
                                                    ??_floor 001D  
                                                    ??_frexp 0006  
                                                 _decimal_5k 00AE  
                                                 __pbssBANK0 009E  
                                         __size_of_eval_poly 00E6  
                                             _Initialize_LCD 1776  
                                             _Initialize_PIC 1AA6  
                                                    ?___ftge 0001  
                                                    ?___lmul 0001  
                                                    ?___wmul 0001  
                                                  ?___altoft 0010  
                                             ___lmul@product 0009  
                                                  ?___ftpack 0001  
                                                    _SSPCON1 000FC6  
                                                    _SSPSTAT 000FC7  
                                     __end_of_Initialize_LCD 1806  
                                     __end_of_Initialize_PIC 1AD2  
                                                    __Hparam 0000  
                                                    __Lparam 0000  
                                              ?_Print_To_LCD 0001  
                                                    ___aldiv 1476  
                                                    ___almod 161A  
                                            __size_of___ftge 009C  
                                            __size_of___lmul 005E  
                                                    ___ftadd 0E0E  
                                                    ___ftdiv 1390  
                                                    ___ftneg 1AFC  
                                            __size_of___wmul 002A  
                                                    ___ftmul 0FDE  
                                                    ___ftsub 19F0  
                                                    ___fttol 11C2  
                                               __psmallconst 0600  
                                                 ??___altoft 0014  
                                                    _decimal 0067  
                                                    __pcinit 1A36  
                                                 ??___ftpack 0006  
                                          __end_of_eval_poly 1390  
                                                    __ramtop 0600  
                                                    __ptext0 1A78  
                                                    __ptext1 1AA6  
                                                    __ptext2 1776  
                                                    __ptext3 063A  
                                                    __ptext4 0BA8  
                                                    __ptext5 10D6  
                                                    __ptext6 188E  
                                                    __ptext7 11C2  
                                                    __ptext8 16DA  
                                                    __ptext9 1912  
                                               __size_of_DAC 056E  
                                               __size_of_sin 0266  
                                           ___aldiv@dividend 000D  
                                                    _voltage 0063  
                                       end_of_initialization 1A6E  
                                              __Lmediumconst 0000  
                                            ?_Initialize_LCD 0001  
                                            ?_Initialize_PIC 0001  
                                             ??_Print_To_LCD 0003  
                                           ___aldiv@quotient 0017  
                                                    postdec1 000FE5  
                                                    postdec2 000FDD  
                                                    postinc0 000FEE  
                                                    postinc2 000FDE  
                                                  _PORTAbits 000F80  
                                                  _PORTCbits 000F82  
                                                  _PORTEbits 000F84  
                                                  _TRISAbits 000F92  
                                                  _TRISCbits 000F94  
                                                  _TRISEbits 000F96  
                                    Print_To_LCD@currentChar 0004  
                                                ___ftdiv@exp 0022  
                                             __end_of_LCDstr 0638  
                                             __end_of_Clear1 0630  
                                             __end_of_Clear2 0626  
                                                 _voltage_5k 005B  
                                                ___ftmul@exp 002D  
                                             __end_of___ftge 1776  
                                             __end_of___lmul 19F0  
                                             __end_of___wmul 1AFC  
                                                 floor@expon 0020  
                                        start_initialization 1A36  
                                                 eval_poly@d 0036  
                                                 eval_poly@n 0038  
                                                __end_of_DAC 0BA8  
                                                 eval_poly@x 0033  
                                                __end_of_sin 0E0E  
                                                 frexp@value 0001  
                                                   ??___ftge 0007  
                                                   ??___lmul 0009  
                                                   ??___wmul 0005  
                                                  _adHigh_5k 0075  
                                                __pdataBANK0 0080  
                                          __size_of___altoft 0080  
                                          __size_of___ftpack 00C4  
                                                __pbssCOMRAM 0057  
                                       __end_of_Print_To_LCD 188E  
                                                 sin@coeff_a 0601  
                                                 sin@coeff_b 0610  
                                                   ?___aldiv 000D  
                                                   ?___almod 0001  
                                                   ?___ftadd 0009  
                                                   _DAC$1273 004E  
                                                   _DAC$1274 0051  
                                                   _DAC$1275 0054  
                                                   ?___ftdiv 0015  
                                                   ?___ftneg 0001  
                                                   ?___ftmul 0024  
                                                   ?___ftsub 0022  
                                                   ?___fttol 0001  
                                           ___almod@dividend 0001  
                                                __smallconst 0600  
                                                  _eval_poly 12AA  
                                             __size_of_floor 00EC  
                                             __size_of_frexp 0084  
                                           ??_Initialize_LCD 0001  
                                           ??_Initialize_PIC 0006  
                                            ___aldiv@divisor 0011  
                                            ___aldiv@counter 0015  
                                             ___wmul@product 0005  
                                                 _ADCON0bits 000FC2  
                                          ___wmul@multiplier 0001  
                                                 ?_eval_poly 0033  
                                                _controlByte 007D  
                                          ___lmul@multiplier 0001  
                                                  copy_data0 1A4A  
                                      Initialize_LCD@tempPtr 0003  
                                                  frexp@eptr 0004  
                                                   __Hrparam 0000  
                                                   __Lrparam 0000  
                                                   _adLow_5k 0077  
                                           __size_of___aldiv 00E0  
                                           __size_of___almod 00C0  
                                                   _Str_Test 0080  
                                           __size_of___ftadd 01D0  
                                           __size_of___ftdiv 00E6  
                                           __size_of___ftneg 002A  
                                                   ___altoft 1912  
                                           __size_of___ftmul 00F8  
                                           __size_of___ftsub 0046  
                                           __size_of___fttol 00E8  
                                                   ___ftpack 1556  
                                      __size_of_Print_To_LCD 0088  
                                                   _dataByte 006E  
                                                   __ptext10 12AA  
                                                   __ptext11 1AD2  
                                                   __ptext20 1476  
                                                   __ptext12 0FDE  
                                                   __ptext21 1806  
                                                   __ptext13 19F0  
                                                   __ptext14 0E0E  
                                                   __ptext15 1AFC  
                                                   __ptext16 1390  
                                                   __ptext17 1556  
                                                   __ptext18 1992  
                                                   __ptext19 161A  
                                                   _sin$1276 0045  
                                            ___almod@divisor 0005  
                                            ___almod@counter 0009  
                                              __size_of_main 002E  
                                               _Print_To_LCD 1806  
                                                ??_eval_poly 003A  
                                               ___aldiv@sign 0016  
                                               ___almod@sign 000A  
